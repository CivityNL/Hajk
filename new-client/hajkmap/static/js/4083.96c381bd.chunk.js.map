{"version":3,"file":"static/js/4083.96c381bd.chunk.js","mappings":"kKAKe,SAASA,EAAgBC,GAEtC,MAAOC,EAAcC,GAAmBC,EAAAA,SAAe,CACrDC,qBAAqBC,EAAAA,EAAAA,gBACrBC,qBAAqBC,EAAAA,EAAAA,kBAqBvB,OAfAJ,EAAAA,WAAgB,KACd,MAAMK,EAAiBR,EAAeS,UACpC,2BACA,KACEP,EAAgB,CACdE,qBAAqBC,EAAAA,EAAAA,gBACrBC,qBAAqBC,EAAAA,EAAAA,iBAFvB,IAMJ,MAAO,KACLC,EAAeE,aAAf,CADF,GAGC,CAACV,IAEGC,CACR,C","sources":["hooks/useCookieStatus.js"],"sourcesContent":["import React from \"react\";\nimport { functionalOk, thirdPartyOk } from \"../models/Cookie\";\n\n// A simple hook which will return an object stating wether functional- and third-party-cookies\n// are OK to use or not (depending on the users choice in the cookie-notice).\nexport default function useCookieStatus(globalObserver) {\n  // Let's combine both statuses in one state-object since they will always be updated at the same time.\n  const [cookieStatus, setCookieStatus] = React.useState({\n    functionalCookiesOk: functionalOk(),\n    thirdPartyCookiesOk: thirdPartyOk(),\n  });\n\n  // An effect subscribing to an event sent from the cookie-handler when the\n  // cookie-settings change. If the settings change, we make sure to update the\n  // state with the current cookie-status so that we can render the appropriate components.\n  React.useEffect(() => {\n    const cookieListener = globalObserver.subscribe(\n      \"core.cookieLevelChanged\",\n      () => {\n        setCookieStatus({\n          functionalCookiesOk: functionalOk(),\n          thirdPartyCookiesOk: thirdPartyOk(),\n        });\n      }\n    );\n    return () => {\n      cookieListener.unsubscribe();\n    };\n  }, [globalObserver]);\n\n  return cookieStatus;\n}\n"],"names":["useCookieStatus","globalObserver","cookieStatus","setCookieStatus","React","functionalCookiesOk","functionalOk","thirdPartyCookiesOk","thirdPartyOk","cookieListener","subscribe","unsubscribe"],"sourceRoot":""}
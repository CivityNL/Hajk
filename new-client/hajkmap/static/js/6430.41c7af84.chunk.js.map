{"version":3,"file":"static/js/6430.41c7af84.chunk.js","mappings":"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","sources":["plugins/Coordinates/CoordinatesTransformRow.js"],"sourcesContent":["import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport NumberFormat from \"react-number-format\";\nimport { transform } from \"ol/proj\";\nimport { withSnackbar } from \"notistack\";\nimport Grid from \"@mui/material/Grid\";\n\nclass CoordinatesTransformRow extends React.PureComponent {\n  state = {\n    errorX: \"\",\n    errorY: \"\",\n    coordinateX: \"\",\n    coordinateY: \"\",\n    coordinateXFloat: 0,\n    coordinateYFloat: 0,\n    wasLastChanged: false,\n    wasModified: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.model = this.props.model;\n    this.transformation = this.props.transformation;\n    this.localObserver = this.props.model.localObserver;\n\n    this.localObserver.subscribe(\"newCoordinates\", (incomingCoords) => {\n      // Force a change if the new coords from map click or user location since\n      // there might be a transformation with the same code as on the map\n      if (\n        incomingCoords[\"proj\"] !== this.transformation.code ||\n        incomingCoords[\"force\"]\n      ) {\n        const transformedCoords = transform(\n          incomingCoords[\"coordinates\"],\n          incomingCoords[\"proj\"],\n          this.props.transformation.code\n        );\n        this.setState({\n          errorX: \"\",\n          errorY: \"\",\n          wasModified: true,\n          coordinateX: transformedCoords[0].toFixed(\n            this.transformation.precision\n          ),\n          coordinateY: transformedCoords[1].toFixed(\n            this.transformation.precision\n          ),\n          coordinateXFloat: transformedCoords[0],\n          coordinateYFloat: transformedCoords[1],\n          wasLastChanged: false,\n        });\n      } else {\n        this.setState({ wasLastChanged: true, wasModified: true });\n      }\n    });\n\n    this.localObserver.subscribe(\"resetCoordinates\", () => {\n      this.setState({\n        errorX: \"\",\n        errorY: \"\",\n        coordinateX: \"\",\n        coordinateY: \"\",\n        coordinateXFloat: 0,\n        coordinateYFloat: 0,\n      });\n    });\n  }\n\n  handleInputX(event) {\n    if (\n      (!this.props.inverseAxis && event.value === this.state.coordinateX) ||\n      (this.props.inverseAxis && event.value === this.state.coordinateY)\n    ) {\n      // Nothing was changed so do nothing, this happens since the value is\n      // changed multiple times during formatting and we do not want to create\n      // infinite loops\n      return;\n    }\n    if (!this.props.inverseAxis) {\n      // Validate that the changed data is a finite number\n      this.setState({\n        coordinateX: event.value,\n        coordinateXFloat: event.floatValue,\n        wasModified: true,\n      });\n    } else {\n      this.setState({\n        coordinateY: event.value,\n        coordinateYFloat: event.floatValue,\n        wasModified: true,\n      });\n    }\n    if (isNaN(event.floatValue) || !isFinite(event.floatValue)) {\n      this.setState({ errorX: \"Ange ett decimaltal\" });\n    } else {\n      this.setState({ errorX: \"\" });\n      const updatedValue = event.floatValue;\n\n      if (!this.props.inverseAxis) {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [updatedValue, this.state.coordinateYFloat],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      } else {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [this.state.coordinateXFloat, updatedValue],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      }\n    }\n  }\n\n  handleInputY(event) {\n    if (\n      (!this.props.inverseAxis && event.value === this.state.coordinateY) ||\n      (this.props.inverseAxis && event.value === this.state.coordinateX)\n    ) {\n      // Nothing was changed so do nothing, this happens since the value is\n      // changed multiple times during formatting and we do not want to create\n      // infinite loops\n      return;\n    }\n    if (!this.props.inverseAxis) {\n      // Validate that the changed data is a finite number\n      this.setState({\n        coordinateY: event.value,\n        coordinateYFloat: event.floatValue,\n        wasModified: true,\n      });\n    } else {\n      this.setState({\n        coordinateX: event.value,\n        coordinateXFloat: event.floatValue,\n        wasModified: true,\n      });\n    }\n    if (isNaN(event.floatValue) || !isFinite(event.floatValue)) {\n      this.setState({ errorY: \"Ange ett decimaltal\" });\n    } else {\n      this.setState({ errorY: \"\" });\n      const updatedValue = event.floatValue;\n\n      if (!this.props.inverseAxis) {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [this.state.coordinateXFloat, updatedValue],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      } else {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [updatedValue, this.state.coordinateYFloat],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    let xCoord = this.props.inverseAxis\n      ? this.state.coordinateY\n      : this.state.coordinateX;\n    let yCoord = this.props.inverseAxis\n      ? this.state.coordinateX\n      : this.state.coordinateY;\n\n    if (this.model.showFieldsOnStart || this.state.wasModified) {\n      return (\n        <Grid container item spacing={2} rowSpacing={1}>\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" style={{ fontWeight: 600 }}>\n              {this.transformation\n                ? this.transformation.title +\n                  \" (\" +\n                  this.transformation.code +\n                  \")\"\n                : \"\"}\n            </Typography>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <NumberFormat\n              label={this.props.transformation.xtitle}\n              margin=\"dense\"\n              variant=\"outlined\"\n              size=\"small\"\n              value={xCoord}\n              name=\"numberformatX\"\n              type=\"text\"\n              onValueChange={(values) => {\n                this.handleInputX(values);\n              }}\n              axis={this.props.transformation.inverseAxis ? \"X\" : \"Y\"}\n              error={this.state.errorX !== \"\"}\n              helperText={this.state.errorX}\n              thousandSeparator={this.model.thousandSeparator ? \" \" : false}\n              customInput={TextField}\n              fullWidth={true}\n            />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <NumberFormat\n              label={this.props.transformation.ytitle}\n              margin=\"dense\"\n              size=\"small\"\n              variant=\"outlined\"\n              value={yCoord}\n              name=\"numberformatY\"\n              type=\"text\"\n              onValueChange={(values) => {\n                this.handleInputY(values);\n              }}\n              axis={this.props.transformation.inverseAxis ? \"Y\" : \"X\"}\n              error={this.state.errorY !== \"\"}\n              helperText={this.state.errorY}\n              thousandSeparator={this.model.thousandSeparator ? \" \" : false}\n              customInput={TextField}\n              fullWidth={true}\n            />\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\nexport default withSnackbar(CoordinatesTransformRow);\n"],"names":["CoordinatesTransformRow","React","constructor","props","super","state","errorX","errorY","coordinateX","coordinateY","coordinateXFloat","coordinateYFloat","wasLastChanged","wasModified","this","model","transformation","localObserver","subscribe","incomingCoords","code","transformedCoords","transform","setState","toFixed","precision","handleInputX","event","inverseAxis","value","floatValue","isNaN","isFinite","updatedValue","publish","coordinates","proj","force","handleInputY","componentWillUnmount","render","xCoord","yCoord","showFieldsOnStart","container","item","spacing","rowSpacing","xs","variant","style","fontWeight","title","md","label","xtitle","margin","size","name","type","onValueChange","values","axis","error","helperText","thousandSeparator","customInput","TextField","fullWidth","ytitle","withSnackbar"],"sourceRoot":""}
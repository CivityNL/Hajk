{"version":3,"file":"static/js/2130.b88108ef.chunk.js","mappings":"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","sources":["plugins/LayerSwitcher/components/VectorFilter.js"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { Vector as VectorLayer } from \"ol/layer\";\nimport { hfetch } from \"utils/FetchWrapper\";\n\nconst StyledFormControl = styled(FormControl)(({ theme }) => ({\n  margin: theme.spacing(1),\n  minWidth: 120,\n}));\n\nconst StyledTypography = styled(Typography)(({ theme }) => ({\n  fontWeight: 500,\n}));\n\nclass VectorFilter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterAttribute: props.layer.get(\"filterAttribute\") || \"\",\n      filterValue: props.layer.get(\"filterValue\") || \"\",\n      filterComparer: props.layer.get(\"filterComparer\") || \"\",\n      layerProperties: [],\n    };\n    this.loadFeatureInfo();\n  }\n\n  /**\n   * @summary Prepare entries for dropdown, will contain possible values for filterAttribute.\n   *\n   * @memberof VectorFilter\n   */\n  loadFeatureInfo = () => {\n    const { url, featureType } = this.props.layer.getProperties();\n    hfetch(\n      url +\n        `?service=WFS&request=describeFeatureType&outputFormat=application/json&typename=${featureType}`\n    ).then((response) => {\n      response.json().then((featureInfo) => {\n        const featureTypeInfo = featureInfo.featureTypes.find(\n          (type) => type.typeName === featureType\n        );\n        if (featureTypeInfo && Array.isArray(featureTypeInfo.properties)) {\n          const layerProperties = featureTypeInfo.properties\n            .filter((property) => property.type !== \"gml:Geometry\")\n            .map((property) => property.name);\n          this.setState({\n            layerProperties,\n          });\n        }\n      });\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  /**\n   * @summary Reads filter options from state, applies them on layer and refreshes the source.\n   *\n   * @memberof VectorFilter\n   */\n  setFilter = (e) => {\n    this.props.layer.set(\"filterAttribute\", this.state.filterAttribute);\n    this.props.layer.set(\"filterComparer\", this.state.filterComparer);\n    this.props.layer.set(\"filterValue\", this.state.filterValue);\n\n    this.props.layer.getSource().refresh();\n  };\n\n  /**\n   * @ Resets the UI to no filter and reloads the source\n   *\n   * @memberof VectorFilter\n   */\n  resetFilter = (e) => {\n    // Reset the UI\n    this.setState({\n      filterAttribute: \"\",\n      filterValue: \"\",\n      filterComparer: \"\",\n    });\n\n    // Reset filter options on layer\n    this.props.layer.set(\"filterAttribute\", \"\");\n    this.props.layer.set(\"filterComparer\", \"\");\n    this.props.layer.set(\"filterValue\", \"\");\n\n    // Refresh source\n    this.props.layer.getSource().refresh();\n  };\n\n  render() {\n    const { layer } = this.props;\n    if (layer instanceof VectorLayer) {\n      return (\n        <>\n          <StyledTypography variant=\"subtitle2\">\n            Filtrera innehåll baserat på attribut\n          </StyledTypography>\n          <StyledFormControl>\n            <InputLabel htmlFor=\"attribute\">Attribut</InputLabel>\n            <Select\n              value={this.state.filterAttribute}\n              onChange={this.handleChange}\n              inputProps={{\n                name: \"filterAttribute\",\n                id: \"attribute\",\n              }}\n            >\n              {this.state.layerProperties.map((property, i) => {\n                return (\n                  <MenuItem key={i} value={property}>\n                    {property}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </StyledFormControl>\n          <StyledFormControl>\n            <InputLabel htmlFor=\"comparer\">Jämförare</InputLabel>\n            <Select\n              value={this.state.filterComparer}\n              onChange={this.handleChange}\n              inputProps={{\n                name: \"filterComparer\",\n                id: \"comparer\",\n              }}\n            >\n              <MenuItem value=\"gt\">Större än</MenuItem>\n              <MenuItem value=\"lt\">Mindre än</MenuItem>\n              <MenuItem value=\"eq\">Lika med</MenuItem>\n              <MenuItem value=\"not\">Skilt från</MenuItem>\n            </Select>\n          </StyledFormControl>\n          <StyledFormControl>\n            <Input\n              value={this.state.filterValue}\n              onChange={this.handleChange}\n              placeholder=\"Filtervärde\"\n              inputProps={{\n                name: \"filterValue\",\n                \"aria-label\": \"Värde\",\n              }}\n            />\n          </StyledFormControl>\n\n          <Button variant=\"contained\" color=\"primary\" onClick={this.setFilter}>\n            Aktivera\n          </Button>\n          <Button onClick={this.resetFilter}>Återställ</Button>\n        </>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default VectorFilter;\n"],"names":["StyledFormControl","styled","FormControl","theme","margin","spacing","minWidth","StyledTypography","Typography","fontWeight","VectorFilter","React","constructor","props","super","loadFeatureInfo","url","featureType","this","layer","getProperties","hfetch","then","response","json","featureInfo","featureTypeInfo","featureTypes","find","type","typeName","Array","isArray","properties","layerProperties","filter","property","map","name","setState","handleChange","e","target","value","setFilter","set","state","filterAttribute","filterComparer","filterValue","getSource","refresh","resetFilter","get","render","VectorLayer","variant","htmlFor","onChange","inputProps","id","i","placeholder","color","onClick"],"sourceRoot":""}
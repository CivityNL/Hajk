{"version":3,"file":"static/js/2805.29ca8426.chunk.js","mappings":"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","sources":["components/Card.js","plugins/BaseWindowPlugin.js","plugins/Sketch/Sketch.js","plugins/Sketch/models/SketchModel.js","../node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js","../node_modules/@mui/material/CardActionArea/CardActionArea.js","../node_modules/@mui/material/CardHeader/cardHeaderClasses.js","../node_modules/@mui/material/CardHeader/CardHeader.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js"],"sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Card as MUICard,\n  CardHeader,\n  CardActionArea,\n  Avatar,\n} from \"@mui/material\";\n\nconst StyledCard = styled(MUICard)(({ theme }) => ({\n  marginBottom: theme.spacing(1),\n  width: \"210px\",\n  [theme.breakpoints.down(\"sm\")]: {\n    boxShadow: \"none\",\n    borderBottom: \"1px solid #ccc\",\n    borderRadius: 0,\n    margin: 0,\n    width: \"100%\",\n    justifyContent: \"left\",\n  },\n}));\n\nconst StyledAvatar = styled(Avatar)(({ theme }) => ({\n  background: theme.palette.text.primary,\n}));\n\nclass Card extends React.PureComponent {\n  state = {\n    open: false,\n    text: \"\",\n  };\n\n  static propTypes = {\n    abstract: propTypes.string.isRequired,\n    icon: propTypes.object.isRequired,\n    onClick: propTypes.func.isRequired,\n    title: propTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    abstract: \"Beskrivning saknas\",\n    title: \"Titel saknas\",\n  };\n\n  render() {\n    const { abstract, icon, onClick, title } = this.props;\n\n    return (\n      <StyledCard onClick={onClick}>\n        <CardActionArea>\n          <CardHeader\n            avatar={<StyledAvatar>{icon}</StyledAvatar>}\n            title={title}\n            subheader={abstract}\n          />\n        </CardActionArea>\n      </StyledCard>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { isMobile } from \"./../utils/IsMobile\";\nimport { createPortal } from \"react-dom\";\nimport { Hidden, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\nimport Window from \"../components/Window.js\";\nimport Card from \"../components/Card.js\";\nimport PluginControlButton from \"../components/PluginControlButton\";\n\nclass BaseWindowPlugin extends React.PureComponent {\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    children: propTypes.object.isRequired,\n    custom: propTypes.object.isRequired,\n    map: propTypes.object.isRequired,\n    options: propTypes.object.isRequired,\n    type: propTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    // 'type' is basically a unique identifier for each plugin\n    this.type = props.type.toLowerCase() || undefined;\n\n    // There will be defaults in props.custom, so that each plugin has own default title/description\n    this.description = props.options.description || props.custom.description;\n\n    // Should Window be visible at start?\n    const visibleAtStart =\n      (this.props.app.config.mapConfig.map.clean === false && // Never show in clean mode\n        (isMobile\n          ? props.options.visibleAtStartMobile\n          : props.options.visibleAtStart)) ||\n      false;\n\n    // If plugin is shown at start, we want to register it as shown in the Analytics module too.\n    // Normally, the event would be sent when user clicks on the button that activates the plugin,\n    // but in this case there won't be any click as the window will be visible at start.\n    if (visibleAtStart) {\n      this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n        eventName: \"pluginShown\",\n        pluginName: this.type,\n        activeMap: this.props.app.config.activeMap,\n      });\n    }\n\n    // Title and Color are kept in state and not as class properties. Keeping them in state\n    // ensures re-render when new props arrive and update the state variables (see componentDidUpdate() too).\n    this.state = {\n      title: props.options.title || props.custom.title || \"Unnamed plugin\",\n      color: props.options.color || props.custom.color || null,\n      windowVisible: visibleAtStart,\n    };\n\n    // Title is a special case: we want to use the state.title and pass on to Window in order\n    // to update Window's title dynamically. At the same time, we want all other occurrences,\n    // e.g. Widget or Drawer button's label to remain the same.\n    this.title = props.options.title || props.custom.title || \"Unnamed plugin\";\n\n    // Try to get values from admin's option. Fallback to customs from Plugin defaults, or finally to hard-coded values.\n    this.width = props.options.width || props.custom.width || 400;\n    this.height = props.options.height || props.custom.height || \"auto\";\n    this.position = props.options.position || props.custom.position || \"left\";\n\n    // Register Window in our global register\n    props.app.registerWindowPlugin(this);\n\n    // Subscribe to a global event that makes it possible to show/hide Windows.\n    // First we prepare a unique event name for each plugin so it looks like '{pluginName}.showWindow'.\n    const eventName = `${this.type}.showWindow`;\n    // Next, subscribe to that event, expect 'opts' array.\n    // To find all places where this event is publish, search for 'globalObserver.publish(\"show'\n    props.app.globalObserver.subscribe(eventName, (opts) => {\n      this.showWindow(opts);\n    });\n\n    // Same as above, but to close the window.\n    const closeEventName = `${this.type}.closeWindow`;\n\n    props.app.globalObserver.subscribe(closeEventName, () => {\n      this.closeWindow();\n    });\n  }\n\n  // Does not run on initial render, but runs on subsequential re-renders.\n  componentDidUpdate(prevProps) {\n    // Window's title and color can be updated on-the-flight, so we keep them\n    // in state and ensure that state is updated when new props arrive.\n    prevProps.custom.title !== this.props.custom.title &&\n      this.setState({ title: this.props.custom.title });\n\n    prevProps.custom.color !== this.props.custom.color &&\n      this.setState({ color: this.props.custom.color });\n  }\n\n  pluginIsWidget(target) {\n    return [\"left\", \"right\"].includes(target);\n  }\n\n  handleButtonClick = (e) => {\n    this.showWindow({\n      hideOtherPluginWindows: true,\n      runCallback: true,\n    });\n    this.props.app.globalObserver.publish(\"core.onlyHideDrawerIfNeeded\");\n  };\n\n  showWindow = (opts = {}) => {\n    const hideOtherPluginWindows = opts.hideOtherPluginWindows || true,\n      runCallback = opts.runCallback || true;\n    // Let the App know which tool is currently active\n    this.props.app.activeTool = this.type;\n\n    // Tell the Analytics model about this\n    this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n      eventName: \"pluginShown\",\n      pluginName: this.type,\n      activeMap: this.props.app.config.activeMap,\n    });\n\n    // AppModel keeps track of recently shown plugins.\n    this.props.app.pushPluginIntoHistory({\n      type: this.type,\n      icon: this.props.custom.icon,\n      title: this.title,\n      description: this.description,\n    });\n\n    // Don't continue if visibility hasn't changed\n    if (this.state.windowVisible === true) {\n      return null;\n    }\n\n    hideOtherPluginWindows === true && this.props.app.onWindowOpen(this);\n\n    this.setState(\n      {\n        windowVisible: true,\n      },\n      () => {\n        // Notify the app that a plugin's visibility has changed\n        this.props.app.globalObserver.publish(\"core.pluginVisibilityChanged\");\n\n        // If there's a callback defined in custom, run it\n        runCallback === true &&\n          typeof this.props.custom.onWindowShow === \"function\" &&\n          this.props.custom.onWindowShow();\n      }\n    );\n  };\n\n  closeWindow = () => {\n    // If closeWindow was initiated by the tool that is currently\n    // active, we should unset the activeTool property\n    if (this.type === this.props.app.activeTool)\n      this.props.app.activeTool = undefined;\n\n    this.setState(\n      {\n        windowVisible: false,\n      },\n      () => {\n        // Notify the app that a plugin's visibility has changed\n        this.props.app.globalObserver.publish(\"core.pluginVisibilityChanged\");\n\n        typeof this.props.custom.onWindowHide === \"function\" &&\n          this.props.custom.onWindowHide();\n      }\n    );\n  };\n  /**\n   * @summary Render the plugin and its buttons according to settings in admin.\n   * @description See comments in code to follow the rendering logic.\n   * @param {*} custom\n   * @returns {object} React.Component\n   * @memberof BaseWindowPlugin\n   */\n  renderWindow(custom) {\n    const { target } = this.props.options;\n    // BaseWindowPlugin, which calls this method, will supply an object.\n    // If that object contains a render() function, we want to call it\n    // and bypass any other functionality from this method.\n    return typeof custom?.render === \"function\" ? (\n      custom.render()\n    ) : (\n      // If there was not custom render method, we do \"normal\" rendering.\n      // That includes rendering the plugin Window itself, as well as a\n      // button (that will trigger opening of the plugin Window).\n      <>\n        <Window\n          globalObserver={this.props.app.globalObserver}\n          title={this.state.title}\n          color={this.state.color}\n          onClose={this.closeWindow}\n          open={this.state.windowVisible}\n          onResize={this.props.custom.onResize}\n          onMaximize={this.props.custom.onMaximize}\n          onMinimize={this.props.custom.onMinimize}\n          draggingEnabled={this.props.custom.draggingEnabled}\n          customPanelHeaderButtons={this.props.custom.customPanelHeaderButtons}\n          resizingEnabled={this.props.custom.resizingEnabled}\n          scrollable={this.props.custom.scrollable}\n          allowMaximizedWindow={this.props.custom.allowMaximizedWindow}\n          disablePadding={this.props.custom.disablePadding}\n          width={this.width}\n          height={this.height}\n          position={this.position}\n          mode=\"window\"\n          layerswitcherConfig={this.props.app.config.mapConfig.tools.find(\n            (t) => t.type === \"layerswitcher\"\n          )}\n        >\n          {/* We have to pass windowVisible down to the children so that we can conditionally render\n          the <Tabs /> component, since it does not accept components with display: \"none\". We use the\n          windowVisible-prop to make sure that we don't render the <Tabs /> when the window\n          is not visible.*/}\n          {React.cloneElement(this.props.children, {\n            windowVisible: this.state.windowVisible,\n          })}\n        </Window>\n        {/* Always render a Drawer button unless its target is \"hidden\". \n              It's a backup for plugins render elsewhere: we hide \n              Widget and Control buttons on small screens and fall \n              back to Drawer button). */}\n        {target !== \"hidden\" && this.renderDrawerButton()}\n        {/* Widget buttons must also render a Widget */}\n        {this.pluginIsWidget(target) &&\n          this.renderWidgetButton(`${target}-column`)}\n        {/* Finally, render a Control button if target has that value */}\n        {target === \"control\" && this.renderControlButton()}\n      </>\n    );\n  }\n\n  /**\n   * This is a bit of a special case. This method will render\n   * not only plugins specified as Drawer plugins (target===toolbar),\n   * but it will also render Widget and Control plugins - given some special condition.\n   *\n   * Those special conditions are small screens, where there's no screen\n   * estate to render the Widget button in Map Overlay.\n   */\n  renderDrawerButton() {\n    return createPortal(\n      <Hidden\n        mdUp={\n          this.pluginIsWidget(this.props.options.target) ||\n          this.props.options.target === \"control\"\n        }\n      >\n        <ListItem\n          button\n          divider={true}\n          selected={this.state.windowVisible}\n          onClick={this.handleButtonClick}\n        >\n          <ListItemIcon>{this.props.custom.icon}</ListItemIcon>\n          <ListItemText primary={this.title} />\n        </ListItem>\n      </Hidden>,\n      document.getElementById(\"plugin-buttons\")\n    );\n  }\n\n  renderWidgetButton(id) {\n    return createPortal(\n      // Hide Widget button on small screens, see renderDrawerButton too\n      <Hidden mdDown>\n        <Card\n          icon={this.props.custom.icon}\n          onClick={this.handleButtonClick}\n          title={this.title}\n          abstract={this.description}\n        />\n      </Hidden>,\n      document.getElementById(id)\n    );\n  }\n\n  renderControlButton() {\n    return createPortal(\n      // Hide Control button on small screens, see renderDrawerButton too\n      <Hidden mdDown>\n        <PluginControlButton\n          icon={this.props.custom.icon}\n          onClick={this.handleButtonClick}\n          title={this.title}\n          abstract={this.description}\n        />\n      </Hidden>,\n      document.getElementById(\"plugin-control-buttons\")\n    );\n  }\n\n  render() {\n    // Don't render if \"clean\" query param is specified, otherwise go on\n    return (\n      this.props.app.config.mapConfig.map.clean !== true &&\n      this.renderWindow(this.props.custom)\n    );\n  }\n}\n\nexport default BaseWindowPlugin;\n","import React from \"react\";\nimport Observer from \"react-event-observer\";\nimport EditIcon from \"@mui/icons-material/Edit\";\n\n// Helpers\nimport LocalStorageHelper from \"utils/LocalStorageHelper\";\n\n// Views\nimport BaseWindowPlugin from \"../BaseWindowPlugin\";\nimport SketchView from \"./views/SketchView\";\n\n// Models\nimport SketchModel from \"./models/SketchModel\";\nimport DrawModel from \"../../models/DrawModel\";\nimport KmlModel from \"models/KmlModel\";\n\n// Constants\nimport { STORAGE_KEY, DEFAULT_MEASUREMENT_SETTINGS } from \"./constants\";\n\n// Hooks\nimport useCookieStatus from \"hooks/useCookieStatus\";\n\n// Returns the measurement-settings-object from LS if it exists, otherwise it returns\n// the default measurement-settings. The LS might be empty since the user might have chosen\n// not to accept functional cookies.\nconst getMeasurementSettings = () => {\n  const { measurementSettings } = LocalStorageHelper.get(STORAGE_KEY);\n  return measurementSettings || DEFAULT_MEASUREMENT_SETTINGS;\n};\n\nconst Sketch = (props) => {\n  // We're gonna need to keep track of the current chosen activity. (\"ADD\", \"REMOVE\", etc).\n  const [activityId, setActivityId] = React.useState(\"ADD\");\n  // We're gonna need to keep track of the currently active draw-type. (\"Polygon\", \"Rectangle\", etc).\n  const [activeDrawType, setActiveDrawType] = React.useState(\"Polygon\");\n  // We have to keep track of the eventual feature that has been selected for modification.\n  const [editFeature, setEditFeature] = React.useState(null);\n  // We also need to keep track of if we're supposed to be enabling a modify-interaction along with\n  // the edit-interaction. (The edit-interaction allows the user to change feature colors etc. and the\n  // modify-interaction allows the user to change the features geometries).\n  const [modifyEnabled, setModifyEnabled] = React.useState(false);\n  // We also have to keep track of if free-hand-translation should be enabled or not.\n  // Free-hand-translate is a part of the move-interaction allowing the user to move features\n  // by dragging them in the map.\n  const [translateEnabled, setTranslateEnabled] = React.useState(true);\n  // We need to keep track of features that has been selected while in move-mode.\n  const [moveFeatures, setMoveFeatures] = React.useState([]);\n  // We're gonna need to keep track of if the actual plugin is shown or not.\n  const [pluginShown, setPluginShown] = React.useState(\n    props.options.visibleAtStart ?? false\n  );\n  // We have to keep track of some measurement-settings\n  const [measurementSettings, setMeasurementSettings] = React.useState(\n    getMeasurementSettings()\n  );\n  // We're gonna need to keep track of if we're allowed to save stuff in LS. Let's use the hook.\n  const { functionalCookiesOk } = useCookieStatus(props.app.globalObserver);\n  // The local observer will handle the communication between models and views.\n  const [localObserver] = React.useState(() => Observer());\n\n  // We're also gonna need a drawModel to handle all draw functionality\n  const [drawModel] = React.useState(\n    () =>\n      new DrawModel({\n        layerName: \"pluginSketch\",\n        map: props.map,\n        observer: localObserver,\n        measurementSettings: measurementSettings,\n      })\n  );\n\n  // We need a model used to interact with the map etc. We want to\n  // keep the view free from direct interactions.\n  // There's a possibility that this model won't be needed since most\n  // (if not all) of the functionality should exist in the core Draw-model.\n  const [sketchModel] = React.useState(\n    () =>\n      new SketchModel({\n        drawModel: drawModel,\n        modifyDefaultEnabled: modifyEnabled,\n        translateDefaultEnabled: translateEnabled,\n        storageKey: STORAGE_KEY,\n      })\n  );\n\n  // We'll also need a KML-model so that the user can import and export to/from .kml.\n  const [kmlModel] = React.useState(\n    () =>\n      new KmlModel({\n        layerName: \"pluginSketch\",\n        map: props.map,\n        observer: localObserver,\n        drawModel: drawModel,\n        enableDragAndDrop: true,\n      })\n  );\n\n  // This functions handles events from the draw-model that are sent\n  // when we are in edit-mode and the map is clicked. A feature might be sent\n  // in the payload, but if the user clicked the map where no drawn feature exists,\n  // null is sent.\n  const handleModifyMapClick = React.useCallback((clickedFeature) => {\n    setEditFeature(clickedFeature);\n  }, []);\n\n  // This functions handles events from the draw-model that are sent\n  // when we are in move-mode and the map is clicked. The payload will contain\n  // all features currently selected in the map.\n  const handleMoveFeatureSelected = React.useCallback((selectedFeatures) => {\n    setMoveFeatures(selectedFeatures);\n  }, []);\n\n  // This effect makes sure to subscribe (and un-subscribe) to all observer-events\n  // we are interested in in this view.\n  React.useEffect(() => {\n    localObserver.subscribe(\"drawModel.modify.mapClick\", handleModifyMapClick);\n    localObserver.subscribe(\"drawModel.move.select\", handleMoveFeatureSelected);\n    return () => {\n      localObserver.unsubscribe(\"drawModel.modify.mapClick\");\n      localObserver.unsubscribe(\"drawModel.move.select\");\n    };\n  }, [localObserver, handleModifyMapClick, handleMoveFeatureSelected]);\n\n  // This effect makes sure that we activate the proper draw-interaction when the draw-type,\n  // activity-id, or plugin-visibility changes. (This includes activating the first draw-interaction on first render).\n  React.useEffect(() => {\n    // If the plugin is not shown, we have to make sure to disable\n    // the potential draw-interaction.\n    if (!pluginShown) {\n      return drawModel.toggleDrawInteraction(\"\");\n    }\n    // Otherwise, we make sure to toggle the draw-interaction to the correct one.\n    switch (activityId) {\n      case \"ADD\":\n        return drawModel.toggleDrawInteraction(activeDrawType);\n      case \"DELETE\":\n        return drawModel.toggleDrawInteraction(\"Delete\");\n      case \"EDIT\":\n        return drawModel.toggleDrawInteraction(\"Edit\");\n      case \"MOVE\":\n        return drawModel.toggleDrawInteraction(\"Move\");\n      default:\n        return drawModel.toggleDrawInteraction(\"\");\n    }\n  }, [activeDrawType, activityId, drawModel, pluginShown]);\n\n  // This effect makes sure to reset the edit- and move-feature if the window is closed,\n  // or if the user changes activity. (We don't want to keep the features selected\n  // if the user toggles from edit- or move-mode to create mode for example).\n  React.useEffect(() => {\n    setEditFeature(null);\n    setMoveFeatures([]);\n  }, [activityId, pluginShown]);\n\n  // An effect that makes sure to set the modify-interaction in the model\n  // when the modify-state changes.\n  React.useEffect(() => {\n    drawModel.setModifyActive(modifyEnabled);\n  }, [drawModel, modifyEnabled]);\n\n  // An effect that makes sure to set the translate-interaction in the model\n  // when the translate-state changes.\n  React.useEffect(() => {\n    drawModel.setTranslateActive(translateEnabled);\n  }, [drawModel, translateEnabled]);\n\n  // An effect making sure to update the measurement-settings in the draw-model\n  // (and in LS if thats OK) when they are changed in the view.\n  React.useEffect(() => {\n    if (functionalCookiesOk) {\n      LocalStorageHelper.set(STORAGE_KEY, {\n        ...LocalStorageHelper.get(STORAGE_KEY),\n        measurementSettings: measurementSettings,\n      });\n    }\n    drawModel.setMeasurementSettings(measurementSettings);\n  }, [functionalCookiesOk, drawModel, measurementSettings]);\n\n  // We're gonna need to catch if the user closes the window, and make sure to\n  // update the state so that the effect handling the draw-interaction-toggling fires.\n  const onWindowHide = () => {\n    setPluginShown(false);\n  };\n\n  // We're gonna need to catch if the user opens the window, and make sure to\n  // update the state so that the effect handling the draw-interaction-toggling fires.\n  const onWindowShow = () => {\n    setPluginShown(true);\n  };\n\n  // We're rendering the view in a BaseWindowPlugin, since this is a\n  // \"standard\" plugin.\n  return (\n    <BaseWindowPlugin\n      {...props}\n      type=\"Sketch\"\n      custom={{\n        icon: <EditIcon />,\n        title: \"Rita\",\n        description: \"Skapa dina helt egna geometrier!\",\n        height: \"dynamic\",\n        width: 350,\n        onWindowHide: onWindowHide,\n        onWindowShow: onWindowShow,\n      }}\n    >\n      <SketchView\n        model={sketchModel}\n        drawModel={drawModel}\n        kmlModel={kmlModel}\n        options={props.options}\n        localObserver={localObserver}\n        globalObserver={props.app.globalObserver}\n        activeDrawType={activeDrawType}\n        activityId={activityId}\n        setActivityId={setActivityId}\n        setActiveDrawType={setActiveDrawType}\n        modifyEnabled={modifyEnabled}\n        setModifyEnabled={setModifyEnabled}\n        translateEnabled={translateEnabled}\n        setTranslateEnabled={setTranslateEnabled}\n        editFeature={editFeature}\n        moveFeatures={moveFeatures}\n        measurementSettings={measurementSettings}\n        setMeasurementSettings={setMeasurementSettings}\n      />\n    </BaseWindowPlugin>\n  );\n};\n\nexport default Sketch;\n","import { ACTIVITIES, MAX_REMOVED_FEATURES } from \"../constants\";\nimport LocalStorageHelper from \"../../../utils/LocalStorageHelper\";\nimport { Circle, Fill, Stroke, Style } from \"ol/style\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport { Circle as CircleGeometry, Point } from \"ol/geom\";\nimport { Feature } from \"ol\";\n\nimport {\n  DEFAULT_DRAW_STYLE_SETTINGS,\n  DEFAULT_TEXT_STYLE_SETTINGS,\n  STROKE_DASHES,\n  MAX_LS_CHARS,\n  PROMPT_TEXTS,\n} from \"../constants\";\n\nclass SketchModel {\n  #geoJSONParser;\n  #storageKey;\n  #dateTimeOptions;\n  #drawModel;\n  #showHelperSnacks;\n\n  constructor(settings) {\n    this.#geoJSONParser = new GeoJSON();\n    this.#storageKey = settings.storageKey || \"sketch\";\n    this.#dateTimeOptions = {\n      day: \"numeric\",\n      month: \"numeric\",\n      year: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n    };\n    this.#drawModel = settings.drawModel;\n    this.#showHelperSnacks = this.#getDefaultShowHelperSnacks();\n  }\n\n  // Returns the default value regarding wether helper-snacks should be shown or not.\n  // (Value from LS or defaults to true).\n  #getDefaultShowHelperSnacks = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"showHelperSnacks\"] ?? true;\n  };\n\n  #setSketchKeyInStorage = (key, value) => {\n    LocalStorageHelper.set(this.#storageKey, {\n      ...LocalStorageHelper.get(this.#storageKey),\n      [key]: value,\n    });\n  };\n\n  // Updates the removed features in the local-storage\n  #setStoredRemovedFeatures = (removedFeatures) => {\n    this.#setSketchKeyInStorage(\"removedFeatures\", removedFeatures);\n  };\n\n  // Updates the stored sketches in the local-storage\n  #setStoredSketches = (sketches) => {\n    this.#setSketchKeyInStorage(\"sketches\", sketches);\n  };\n\n  // Updates the stored draw-style-settings in the local-storage.\n  // Exposed so direct calls from view is possible.\n  setStoredDrawStyleSettings = (settings) => {\n    this.#setSketchKeyInStorage(\"drawStyleSettings\", settings);\n  };\n\n  // Updates the stored text-style-settings in the local-storage\n  // Exposed so direct calls from view is possible.\n  setStoredTextStyleSettings = (settings) => {\n    this.#setSketchKeyInStorage(\"textStyleSettings\", settings);\n  };\n\n  // Creates an object containing all the supplied properties along with\n  // all the (not currently hidden) features currently in the sketch-layer.\n  #createSketchObject = (sketchInformation) => {\n    return {\n      ...sketchInformation,\n      id: this.generateRandomString(),\n      date: this.getDateTimeString(),\n      features: this.#drawModel\n        .getAllDrawnFeatures()\n        .filter((f) => f.get(\"HIDDEN\") !== true)\n        .map((f) => this.#prepareFeatureForStorage(f)),\n    };\n  };\n\n  // Since we cannot save the OL-features directly in local-storage without\n  // loosing some information, we'll have to parse the feature to a geoJSON\n  // before we store it. We also have to decorate the feature with some style-information\n  // so that we can extract the style when adding the feature to the map again;\n  #prepareFeatureForStorage = (f) => {\n    // So first, we'll decorate the feature with its style-information\n    f.set(\"EXTRACTED_STYLE\", this.#drawModel.extractFeatureStyleInfo(f));\n    // If the feature to be saved consists of a Circle-geometry we have to\n    // update the geometry to something that geoJSON can handle.\n    if (f.getGeometry() instanceof CircleGeometry) {\n      this.#createFriendlyCircleGeom(f);\n    }\n    // Then we'll create the geoJSON, and return that.\n    return this.#geoJSONParser.writeFeature(f);\n  };\n\n  // Returns the helper text for the supplied activity and draw-type\n  getHelperSnackText = (activity, drawType) => {\n    // If we're nto supposed to show helper-snacks, let's return null so\n    // that no snack will be shown.\n    if (!this.#showHelperSnacks) {\n      return null;\n    }\n    // Otherwise we'll check the current activity and so on...\n    switch (activity) {\n      case \"ADD\":\n        // If we're in the add-view, we want to prompt the user with\n        // information regarding the current draw-type.\n        return PROMPT_TEXTS[`${drawType}Help`];\n      default:\n        // If we're not in the add-view, we want to prompt the user\n        // with information regarding the current view (activity).\n        return PROMPT_TEXTS[`${activity}Help`];\n    }\n  };\n\n  // Returns the draw-style-settings stored in LS, or the default draw-style-settings.\n  getDrawStyleSettings = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"drawStyleSettings\"] || DEFAULT_DRAW_STYLE_SETTINGS;\n  };\n\n  // Returns the text-style-settings stored in LS, or the default text-style-settings.\n  getTextStyleSettings = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"textStyleSettings\"] || DEFAULT_TEXT_STYLE_SETTINGS;\n  };\n\n  // Returns the activity-object connected to the supplied id\n  getActivityFromId = (id) => {\n    return ACTIVITIES.find((activity) => {\n      return activity.id === id;\n    });\n  };\n\n  // Returns the current date and time on YYYY-MM-DD HH:MM:SS\n  getDateTimeString = (options) => {\n    const date = new Date();\n    return date.toLocaleString(\"default\", options || this.#dateTimeOptions);\n  };\n\n  // Generates a random string that can be used as an ID.\n  generateRandomString = () => {\n    return Math.random().toString(36).slice(2, 9);\n  };\n\n  // Accepts an array containing the line-dash, and returns the line (stroke) type\n  // that corresponds to that value.\n  #getStrokeType = (lineDash) => {\n    for (const [key, value] of STROKE_DASHES.entries()) {\n      // The value and actual line-dash might be null, lets check if they\n      // both are: (If they are, the line-type is \"solid\").\n      if (value === lineDash) {\n        return key;\n      }\n      // The value might also be an array, and \"===\" will therefore check for reference equality.\n      // Which will obviously not work, since they are not pointing to the same object. Instead,\n      // let's check if the arrays has the same content. (We don't care about the array order).\n      if (\n        Array.isArray(value) &&\n        Array.isArray(lineDash) &&\n        value.every((v) => lineDash.includes(v))\n      ) {\n        return key;\n      }\n    }\n    // If it wasn't found, we'll log an error and return null.\n    console.error(\n      `Could not find corresponding stroke-type from supplied line-dash. The supplied line-dash was: ${lineDash}`\n    );\n    return null;\n  };\n\n  // Extract the style settings from the supplied object and returns an object\n  // with the color settings converted to string to comply with OL.\n  #extractStyleSettings = (settings) => {\n    const { strokeColor, fillColor, strokeWidth, lineDash } = settings;\n    const strokeColorString = this.#drawModel.getRGBAString(strokeColor);\n    const fillColorString = this.#drawModel.getRGBAString(fillColor);\n    return {\n      strokeColor: strokeColorString,\n      fillColor: fillColorString,\n      strokeWidth,\n      lineDash,\n    };\n  };\n\n  // Creates a circle-style that can be used within an image-style.\n  #createImageStyle = (settings) => {\n    return new Circle({\n      radius: 6,\n      stroke: new Stroke({\n        color: settings.strokeColor,\n        width: settings.strokeWidth,\n        lineDash: settings.lineDash,\n      }),\n      fill: new Fill({\n        color: settings.fillColor,\n      }),\n    });\n  };\n\n  #createHighlightStyle = () => {\n    return new Style({\n      stroke: new Stroke({\n        color: \"rgba(255, 0, 0, 1)\",\n        width: 3,\n      }),\n      fill: new Fill({\n        color: \"rgba(255, 0, 0, 0.1)\",\n      }),\n    });\n  };\n\n  // Accepts a feature with a Circle-geometry and updates the feature-geometry\n  // to a Point-geometry along with an additional property (\"CIRCLE_RADIUS\") that can\n  // be used to construct a \"real\" Circle-geometry when the feature is to be added to\n  // a map. This is done since the geoJSON-standard does not accept Circle-geometries.\n  #createFriendlyCircleGeom = (feature) => {\n    try {\n      const geometry = feature.getGeometry();\n      const center = geometry.getCenter();\n      const radius = geometry.getRadius();\n      feature.set(\"CIRCLE_RADIUS\", radius);\n      feature.set(\"CIRCLE_CENTER\", JSON.stringify(center));\n      feature.setGeometry(new Point(center));\n    } catch (error) {\n      console.error(\n        `Could not create a geoJSON-friendly circle-geometry. Error: ${error}`\n      );\n    }\n  };\n\n  // Returns wether the supplied sketch is OK to save in LS. There is a possibility\n  // that the supplied sketch is too complex (meaning that the resulting object will\n  // be too large to save).\n  #getSketchOkForLS = (sketch) => {\n    try {\n      // First we'll stringify the supplied sketch (an object).\n      const stringLength = JSON.stringify(sketch).length;\n      // And make sure the resulting string contains less characters\n      // than what is allowed in the LS.\n      return stringLength < MAX_LS_CHARS;\n    } catch (error) {\n      console.error(`Failed to parse supplied sketch. Error: ${error}`);\n      return false;\n    }\n  };\n\n  // Returns the feature-style in a form that fits the feature-style-editor\n  getFeatureStyle = (feature) => {\n    try {\n      // We're gonna need the base-style of the feature\n      const featureBaseStyle = this.#drawModel.extractFeatureStyleInfo(feature);\n      // Then we'll extract the text-settings. (These might be undefined, and\n      // are only set if we are dealing with a text-feature).\n      const featureTextStyle = feature.get(\"TEXT_SETTINGS\");\n      // Then we'll construct the feature-style-object and return it.\n      return {\n        strokeColor: this.#drawModel.parseColorString(\n          featureBaseStyle?.strokeStyle.color\n        ),\n        lineDash: featureBaseStyle?.strokeStyle.dash,\n        strokeWidth: featureBaseStyle?.strokeStyle.width,\n        strokeType: this.#getStrokeType(featureBaseStyle?.strokeStyle.dash),\n        fillColor: this.#drawModel.parseColorString(\n          featureBaseStyle?.fillStyle.color\n        ),\n        textForegroundColor: featureTextStyle?.foregroundColor,\n        textBackgroundColor: featureTextStyle?.backgroundColor,\n        textSize: featureTextStyle?.size,\n      };\n    } catch (error) {\n      console.error(`Failed to get feature-style: Error: ${error}`);\n      return null;\n    }\n  };\n\n  // Applies the supplied style on the supplied feature.\n  setFeatureStyle = (feature, styleSettings) => {\n    try {\n      // First we'll have to get the base-style. (If we're dealing\n      // with an arrow-feature, the base-style is the first element of the array\n      // returned from the getStyle-method).\n      const featureStyle = Array.isArray(feature.getStyle())\n        ? feature.getStyle()[0]\n        : feature.getStyle();\n      // Then we'll get the stroke and text-style\n      const fillStyle = featureStyle.getFill();\n      const strokeStyle = featureStyle.getStroke();\n      const imageStyle = featureStyle.getImage();\n\n      const { fillColor, strokeColor, strokeWidth, lineDash } =\n        this.#extractStyleSettings(styleSettings);\n\n      fillStyle.setColor(fillColor);\n      strokeStyle.setColor(strokeColor);\n      strokeStyle.setWidth(strokeWidth);\n      strokeStyle.setLineDash(lineDash);\n      // Unfortunately, the feature-image-style does not update by re-setting the\n      // stroke- and fill-settings within the image-style. Instead, a new image-style\n      // has to be created.\n      imageStyle &&\n        featureStyle.setImage(\n          this.#createImageStyle({\n            fillColor,\n            strokeColor,\n            strokeWidth,\n            lineDash,\n          })\n        );\n\n      // If we're dealing with a text.feature, the text-style-settings must be updated as well.\n      if (feature.get(\"DRAW_METHOD\") === \"Text\") {\n        feature.set(\"TEXT_SETTINGS\", {\n          size: styleSettings.textSize,\n          foregroundColor: styleSettings.textForegroundColor,\n          backgroundColor: styleSettings.textBackgroundColor,\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to apply the supplied style. Error: ${error}`);\n    }\n  };\n\n  // When a feature is removed, we should usually add it to the list of\n  // removed features. However, there are a couple of cases where we should not!\n  // -1: If we've added a text-feature, and the user has chosen to abort the\n  // input of text to apply to the feature, we make sure to remove it, and\n  // that removed feature should not be shown in the list of removed features.\n  // -2: If the feature is currently hidden, we shouldn't add it to the storage.\n  featureShouldBeAddedToStorage = (feature) => {\n    return (\n      !(feature.get(\"DRAW_METHOD\") === \"Text\" && !feature.get(\"USER_TEXT\")) ||\n      feature.get(\"HIDDEN\") === true\n    );\n  };\n\n  // We're gonna need to set some properties on the handled feature so that we can keep\n  // track of it. (The \"HANDLED_AT\" prop will show the user at what time the feature was\n  // removed, and the \"HANDLED_ID\" will be used if the user choses to restore the feature).\n  decorateFeature = (feature) => {\n    feature.set(\n      \"EXTRACTED_STYLE\",\n      this.#drawModel.extractFeatureStyleInfo(feature)\n    );\n    feature.set(\"HANDLED_AT\", this.getDateTimeString());\n    feature.set(\"HANDLED_ID\", this.generateRandomString());\n    // If the feature to be saved consists of a Circle-geometry we have to\n    // update the geometry to something that geoJSON can handle.\n    if (feature.getGeometry() instanceof CircleGeometry) {\n      this.#createFriendlyCircleGeom(feature);\n    }\n  };\n\n  // Returns the earlier removed features which are stored in local-storage\n  // If the first parameter is omitted, the method will return parsed OL-features,\n  // otherwise, it will return the actual local-storage value.\n  getRemovedFeaturesFromStorage = (returnType = \"FEATURES\") => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    const storedFeatures = inStorage[\"removedFeatures\"] || [];\n    return returnType === \"FEATURES\"\n      ? storedFeatures.map((parsedFeature) =>\n          this.#geoJSONParser.readFeature(parsedFeature)\n        )\n      : storedFeatures;\n  };\n\n  // Returns sketches that has been saved to local-storage.\n  getSketchesFromStorage = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    const storedSketches = inStorage[\"sketches\"] || [];\n    return storedSketches;\n  };\n\n  // Updates the local-storage by adding the removed feature and potentially\n  // removing old removed features. (We want to keep a maximum of MAX_REMOVED_FEATURES).\n  addFeatureToStorage = (feature) => {\n    const removedFeatures = this.getRemovedFeaturesFromStorage(\"STRINGS\");\n    const parsedFeature = this.#geoJSONParser.writeFeature(feature);\n    this.#setStoredRemovedFeatures([\n      parsedFeature,\n      ...removedFeatures.slice(0, MAX_REMOVED_FEATURES - 1),\n    ]);\n  };\n\n  // Updates the local-storage by adding a new sketch containing all the features currently\n  // in the the sketch-layer. If a sketch with the same id as the one supplied one already exist,\n  // the already stored sketch will be over-written.\n  addCurrentSketchToStorage = (sketchInfo) => {\n    // First we'll create a sketch (an object containing the supplied sketch-information along with the\n    // features currently existing in the sketch-layer).\n    const sketch = this.#createSketchObject(sketchInfo);\n    // Then we'll make sure there are some features to save. (If no features\n    // are present in the sketch, theres no point in saving a sketch).\n    const { features } = sketch;\n    if (!features || features.length === 0) {\n      return {\n        status: \"FAILED\",\n        message: PROMPT_TEXTS.saveNoFeatures,\n      };\n    }\n    // Then we have to make sure that the sketch is not to big (complex)\n    // for storage in the LS.\n    const sketchOkForLS = this.#getSketchOkForLS(sketch);\n    // If the sketch is not OK to save, we abort.\n    if (!sketchOkForLS) {\n      return {\n        status: \"FAILED\",\n        message: PROMPT_TEXTS.saveOverflow,\n      };\n    }\n    // Then we'll make sure to remove any potential sketch (with same title) already in storage.\n    // We do this since we don't allow for multiple sketches with the same title.\n    this.removeSketchFromStorage(sketchInfo);\n    // Then we'll get all the currently stored sketches.\n    const storedSketches = this.getSketchesFromStorage();\n    // Then we'll update the stored sketches with the supplied one.\n    this.#setStoredSketches([sketch, ...storedSketches]);\n    // Finally, we'll make sure to refresh the map by removing all drawn features,\n    // and re-add the current sketch.\n    this.#drawModel.removeDrawnFeatures();\n    this.addSketchToMap(sketch);\n    return { status: \"SUCCESS\", message: PROMPT_TEXTS.saveSuccess };\n  };\n\n  // Adds the features in the supplied sketch to the map by first parsing them\n  // (they are stored as geoJSON, and we want to add them as OL-features).\n  addSketchToMap = (sketch) => {\n    sketch.features.forEach((f) => {\n      this.#drawModel.addFeature(this.#geoJSONParser.readFeature(f));\n    });\n  };\n\n  // Updates the local-storage by removing the feature corresponding to the supplied id\n  removeFeatureFromStorage = (id) => {\n    const storedFeatures = this.getRemovedFeaturesFromStorage(\"STRINGS\");\n    this.#setStoredRemovedFeatures(\n      storedFeatures.filter((f) => !f.includes(id))\n    );\n  };\n\n  // Updates the local-storage by removing the sketch corresponding to the supplied title.\n  // Why title and not an id? Since we dont allow for multiple sketches with the same title, we can\n  // use the title as an id. Another reason is that in some cases, we generate an id after we've made sure\n  // to remove potential sketches with the same title.\n  removeSketchFromStorage = (sketch) => {\n    const storedSketches = this.getSketchesFromStorage();\n    this.#setStoredSketches(\n      storedSketches.filter(\n        (s) => !this.equalsIgnoringCase(s.title, sketch.title)\n      )\n    );\n  };\n\n  // Checks if two strings are equal, ignoring case.\n  equalsIgnoringCase = (s1, s2) => {\n    // If two strings were not supplied, we'll return false.\n    if (typeof s1 !== \"string\" || typeof s2 !== \"string\") {\n      return false;\n    }\n    // Otherwise we'll return the result of a lowercase-compare.\n    return s1.toLowerCase() === s2.toLowerCase();\n  };\n\n  // Creates a new feature with the same geometry as the supplied one. The new\n  // feature can be used an an highlight, to show where the supplied feature is.\n  createHighlightFeature = (feature) => {\n    // If no feature (or a feature with no get-geometry) is supplied, we abort.\n    if (feature && feature.getGeometry()) {\n      // Otherwise we create a new feature...\n      const highlightFeature = new Feature({\n        geometry: feature.getGeometry().clone(),\n      });\n      // ...set an id and a highlight-style...\n      highlightFeature.setId(this.generateRandomString());\n      highlightFeature.setStyle(this.#createHighlightStyle());\n      // Finally we return the feature so that we can add it to the map etc.\n      return highlightFeature;\n    }\n  };\n\n  // Returns wether helper-snacks should be shown or not\n  getShowHelperSnacks = () => {\n    return this.#showHelperSnacks;\n  };\n\n  // Set wether helper-snacks should be shown or not.\n  setShowHelperSnacks = (showSnacks) => {\n    this.#showHelperSnacks = showSnacks;\n  };\n\n  // Returns the value of the FEATURE_TITLE-attribute (or an empty string if the attribute is not set).\n  getFeatureTitle = (feature) => {\n    // If no feature was supplied, or if the supplied 'feature' is not\n    // a feature, we'll return an empty string.\n    if (!(feature instanceof Feature)) {\n      return \"\";\n    }\n    // Otherwise well return the value or an empty string.\n    return feature.get(\"FEATURE_TITLE\") ?? \"\";\n  };\n}\nexport default SketchModel;\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardActionAreaUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActionArea', slot);\n}\nconst cardActionAreaClasses = generateUtilityClasses('MuiCardActionArea', ['root', 'focusVisible', 'focusHighlight']);\nexport default cardActionAreaClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"focusVisibleClassName\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport cardActionAreaClasses, { getCardActionAreaUtilityClass } from './cardActionAreaClasses';\nimport ButtonBase from '../ButtonBase';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    focusHighlight: ['focusHighlight']\n  };\n  return composeClasses(slots, getCardActionAreaUtilityClass, classes);\n};\nconst CardActionAreaRoot = styled(ButtonBase, {\n  name: 'MuiCardActionArea',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  display: 'block',\n  textAlign: 'inherit',\n  width: '100%',\n  [`&:hover .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.hoverOpacity,\n    '@media (hover: none)': {\n      opacity: 0\n    }\n  },\n  [`&.${cardActionAreaClasses.focusVisible} .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.focusOpacity\n  }\n}));\nconst CardActionAreaFocusHighlight = styled('span', {\n  name: 'MuiCardActionArea',\n  slot: 'FocusHighlight',\n  overridesResolver: (props, styles) => styles.focusHighlight\n})(({\n  theme\n}) => ({\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  borderRadius: 'inherit',\n  opacity: 0,\n  backgroundColor: 'currentcolor',\n  transition: theme.transitions.create('opacity', {\n    duration: theme.transitions.duration.short\n  })\n}));\nconst CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActionArea'\n  });\n  const {\n      children,\n      className,\n      focusVisibleClassName\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(CardActionAreaRoot, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [children, /*#__PURE__*/_jsx(CardActionAreaFocusHighlight, {\n      className: classes.focusHighlight,\n      ownerState: ownerState\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActionArea;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardHeaderUtilityClass(slot) {\n  return generateUtilityClass('MuiCardHeader', slot);\n}\nconst cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);\nexport default cardHeaderClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\nconst CardHeaderRoot = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => _extends({\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root)\n})({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Avatar',\n  overridesResolver: (props, styles) => styles.avatar\n})({\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.content\n})({\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n  const {\n      action,\n      avatar,\n      className,\n      component = 'div',\n      disableTypography = false,\n      subheader: subheaderProp,\n      subheaderTypographyProps,\n      title: titleProp,\n      titleTypographyProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    disableTypography\n  });\n  const classes = useUtilityClasses(ownerState);\n  let title = titleProp;\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n  let subheader = subheaderProp;\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      ownerState: ownerState,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      ownerState: ownerState,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      ownerState: ownerState,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n      className,\n      raised = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    raised\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["StyledCard","styled","MUICard","theme","marginBottom","spacing","width","breakpoints","down","boxShadow","borderBottom","borderRadius","margin","justifyContent","StyledAvatar","Avatar","background","palette","text","primary","Card","React","state","open","render","abstract","icon","onClick","title","this","props","avatar","subheader","defaultProps","BaseWindowPlugin","constructor","super","handleButtonClick","e","showWindow","hideOtherPluginWindows","runCallback","app","globalObserver","publish","opts","activeTool","type","eventName","pluginName","activeMap","config","pushPluginIntoHistory","custom","description","windowVisible","onWindowOpen","setState","onWindowShow","closeWindow","undefined","onWindowHide","toLowerCase","options","visibleAtStart","mapConfig","map","clean","isMobile","visibleAtStartMobile","color","height","position","registerWindowPlugin","subscribe","closeEventName","componentDidUpdate","prevProps","pluginIsWidget","target","includes","renderWindow","onClose","onResize","onMaximize","onMinimize","draggingEnabled","customPanelHeaderButtons","resizingEnabled","scrollable","allowMaximizedWindow","disablePadding","mode","layerswitcherConfig","tools","find","t","children","renderDrawerButton","renderWidgetButton","renderControlButton","createPortal","mdUp","button","divider","selected","document","getElementById","id","mdDown","activityId","setActivityId","activeDrawType","setActiveDrawType","editFeature","setEditFeature","modifyEnabled","setModifyEnabled","translateEnabled","setTranslateEnabled","moveFeatures","setMoveFeatures","pluginShown","setPluginShown","measurementSettings","setMeasurementSettings","LocalStorageHelper","STORAGE_KEY","DEFAULT_MEASUREMENT_SETTINGS","getMeasurementSettings","functionalCookiesOk","useCookieStatus","localObserver","Observer","drawModel","DrawModel","layerName","observer","sketchModel","SketchModel","modifyDefaultEnabled","translateDefaultEnabled","storageKey","kmlModel","KmlModel","enableDragAndDrop","handleModifyMapClick","clickedFeature","handleMoveFeatureSelected","selectedFeatures","unsubscribe","toggleDrawInteraction","setModifyActive","setTranslateActive","model","settings","key","value","removedFeatures","sketches","setStoredDrawStyleSettings","setStoredTextStyleSettings","sketchInformation","generateRandomString","date","getDateTimeString","features","getAllDrawnFeatures","filter","f","get","set","extractFeatureStyleInfo","getGeometry","CircleGeometry","writeFeature","getHelperSnackText","activity","drawType","PROMPT_TEXTS","getDrawStyleSettings","DEFAULT_DRAW_STYLE_SETTINGS","getTextStyleSettings","DEFAULT_TEXT_STYLE_SETTINGS","getActivityFromId","ACTIVITIES","Date","toLocaleString","Math","random","toString","slice","lineDash","STROKE_DASHES","Array","isArray","every","v","console","error","strokeColor","fillColor","strokeWidth","getRGBAString","Circle","radius","stroke","Stroke","fill","Fill","Style","feature","geometry","center","getCenter","getRadius","JSON","stringify","setGeometry","Point","sketch","length","MAX_LS_CHARS","getFeatureStyle","featureBaseStyle","featureTextStyle","parseColorString","strokeStyle","dash","strokeType","fillStyle","textForegroundColor","foregroundColor","textBackgroundColor","backgroundColor","textSize","size","setFeatureStyle","styleSettings","featureStyle","getStyle","getFill","getStroke","imageStyle","getImage","setColor","setWidth","setLineDash","setImage","featureShouldBeAddedToStorage","decorateFeature","getRemovedFeaturesFromStorage","returnType","inStorage","storedFeatures","parsedFeature","readFeature","getSketchesFromStorage","addFeatureToStorage","MAX_REMOVED_FEATURES","addCurrentSketchToStorage","sketchInfo","status","message","removeSketchFromStorage","storedSketches","removeDrawnFeatures","addSketchToMap","forEach","addFeature","removeFeatureFromStorage","s","equalsIgnoringCase","s1","s2","createHighlightFeature","highlightFeature","Feature","clone","setId","setStyle","getShowHelperSnacks","setShowHelperSnacks","showSnacks","getFeatureTitle","GeoJSON","day","month","year","hour","minute","second","getCardActionAreaUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionAreaRoot","ButtonBase","name","overridesResolver","styles","root","display","textAlign","cardActionAreaClasses","opacity","vars","action","hoverOpacity","focusOpacity","CardActionAreaFocusHighlight","focusHighlight","overflow","pointerEvents","top","right","bottom","left","transition","transitions","create","duration","short","inProps","ref","useThemeProps","className","focusVisibleClassName","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","useUtilityClasses","_jsxs","_extends","clsx","focusVisible","_jsx","getCardHeaderUtilityClass","CardHeaderRoot","cardHeaderClasses","alignItems","padding","CardHeaderAvatar","flex","marginRight","CardHeaderAction","alignSelf","marginTop","CardHeaderContent","content","component","disableTypography","subheaderProp","subheaderTypographyProps","titleProp","titleTypographyProps","Typography","variant","as","getCardUtilityClass","CardRoot","Paper","raised","elevation"],"sourceRoot":""}
{"version":3,"file":"static/js/5474.348d52d2.chunk.js","mappings":"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","sources":["plugins/Sketch/components/DrawTypeSelector.js","plugins/Sketch/components/FeatureTextSetter.js","plugins/Sketch/components/Information.js","plugins/Sketch/components/SelectFeaturesDialog.js","plugins/Sketch/components/featureStyle/FeatureStyleAccordion.js","plugins/Sketch/components/featureStyle/FeatureStyleSelector.js","plugins/Sketch/components/featureStyle/StrokeTypeSelector.js","plugins/Sketch/constants/index.js","plugins/Sketch/views/AddView.js"],"sourcesContent":["import React from \"react\";\nimport { TextField, MenuItem, Tooltip } from \"@mui/material\";\nimport { DRAW_TYPES } from \"../constants\";\n\nconst DrawTypeSelector = (props) => {\n  return (\n    <TextField\n      fullWidth\n      id=\"select-draw-type\"\n      variant=\"outlined\"\n      size=\"small\"\n      select\n      value={props.activeDrawType}\n      onChange={(e) => props.setActiveDrawType(e.target.value)}\n    >\n      {DRAW_TYPES.map((option) => (\n        <MenuItem key={option.type} value={option.type}>\n          {\n            <Tooltip disableInteractive title={option.tooltip}>\n              <span style={{ width: \"100%\" }}>{option.label}</span>\n            </Tooltip>\n          }\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nexport default DrawTypeSelector;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport Dialog from \"../../../components/Dialog/Dialog\";\n\n// This component has a couple of responsibilities:\n// - 1) Subscribe to text-feature-creation\n// - 2) Prompt the user with a modal containing a text-input-field\n// - 3) Applied the text from the modal to the supplied feature.\nconst FeatureTextSetter = ({ drawModel, localObserver }) => {\n  // We're gonna need to keep track of if we've been supplied with a feature\n  // that we are supposed to apply text to.\n  const [feature, setFeature] = React.useState(null);\n\n  // We are going to need a handler for when the event on the observer fires.\n  const handleFeatureCreated = React.useCallback((addedFeature) => {\n    // We're only interested in features with the type \"Text\"\n    if (addedFeature.get(\"DRAW_METHOD\") === \"Text\") {\n      setFeature(addedFeature);\n    }\n  }, []);\n\n  // We are also going to need a handler for when the user closes the dialog\n  const handleCloseClick = React.useCallback(\n    (textFieldValue) => {\n      // If the user did not write any text, we remove the feature from\n      // the draw-source. (Since we don't want text-features without text).\n      if (textFieldValue.length === 0) {\n        drawModel.removeFeature(feature);\n      } else {\n        feature.set(\"USER_TEXT\", textFieldValue);\n        drawModel.refreshFeaturesTextStyle();\n      }\n      setFeature(null);\n    },\n    [drawModel, feature]\n  );\n\n  // If the user aborts, we make sure to remove the feature from the source\n  const handleAbortClick = React.useCallback(() => {\n    drawModel.removeFeature(feature);\n    setFeature(null);\n  }, [drawModel, feature]);\n\n  // Let's add an effect where we can subscribe to the addFeature-event\n  React.useEffect(() => {\n    localObserver.subscribe(\"drawModel.featureAdded\", handleFeatureCreated);\n    return () => {\n      localObserver.unsubscribe(\"drawModel.featureAdded\");\n    };\n  }, [drawModel, localObserver, handleFeatureCreated]);\n\n  return feature !== null\n    ? createPortal(\n        <Dialog\n          options={{\n            text: \"\",\n            prompt: true,\n            headerText: \"Ange text\",\n            buttonText: \"Ok\",\n            abortText: \"Annuleren\",\n          }}\n          open={feature !== null}\n          onClose={handleCloseClick}\n          onAbort={handleAbortClick}\n        />,\n        document.getElementById(\"map\")\n      )\n    : null;\n};\n\nexport default FeatureTextSetter;\n","import React from \"react\";\nimport { Paper, Typography } from \"@mui/material\";\n\n// A simple component showing the supplied text in a wrapper\nconst Information = ({ text }) => {\n  return (\n    <Paper style={{ width: \"100%\", padding: 8 }}>\n      <Typography align=\"center\" variant=\"body2\">\n        {text}\n      </Typography>\n    </Paper>\n  );\n};\n\nexport default Information;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nexport default function SelectFeaturesDialog({\n  localObserver,\n  drawModel,\n  model,\n}) {\n  // Let's keep everything in one state here since all properties are\n  // changing at the same time (almost).\n  const [state, setState] = React.useState({\n    clickedFeatures: [],\n    selectedFeatureIndexes: [],\n    highlightedFeature: null,\n  });\n\n  // Resets the state back to init.\n  const resetState = React.useCallback(() => {\n    setState({\n      clickedFeatures: [],\n      selectedFeatureIndexes: [],\n      highlightedFeature: null,\n    });\n  }, []);\n\n  // Handles map-click-event from drawModel and updates the clickedFeatures\n  // with the payload.\n  const handleDrawSelectClick = React.useCallback((clickedFeatures) => {\n    setState((state) => ({ ...state, clickedFeatures }));\n  }, []);\n\n  // Handles selection of features in the dialog-list. If the feature-index is already\n  // selected, we remove it, otherwise we add it to the selection.\n  const handleFeatureSelectChange = (featureIndex) => {\n    // Create the new selected feature-indexes...\n    const newSelectedFeatureIndexes =\n      state.selectedFeatureIndexes.indexOf(featureIndex) !== -1\n        ? state.selectedFeatureIndexes.filter((i) => i !== featureIndex)\n        : [...state.selectedFeatureIndexes, featureIndex];\n    // ...and update the state\n    setState((state) => ({\n      ...state,\n      selectedFeatureIndexes: newSelectedFeatureIndexes,\n    }));\n  };\n\n  // Handles dialog abort, resets the state so that the dialog can close.\n  const handleAbort = () => {\n    // We have to remove the eventual highlighted feature when aborting...\n    state.highlightedFeature &&\n      drawModel.removeFeature(state.highlightedFeature);\n    // ...and reset the state.\n    resetState();\n  };\n\n  // Handles confirmation from the dialog. Let's the drawModel add the feature,\n  // and then the state is reset so that the dialog is closed.\n  const handleConfirm = () => {\n    state.selectedFeatureIndexes.map((index) => {\n      return drawModel.drawSelectedFeature(state.clickedFeatures[index]);\n    });\n    resetState();\n  };\n\n  // Handler for mouse-enter on list of clicked features. Creates a new\n  // feature (which is used to show where the clicked feature is in the map).\n  const handleMouseEnter = (index) => {\n    // Let's get the clicked feature we're currently hoovering.\n    const hoveredFeature = state.clickedFeatures[index];\n    // Then we can create a corresponding highlight-feature.\n    const highlightFeature = model.createHighlightFeature(hoveredFeature);\n    // We'll add the highlight-feature to the draw-layer...\n    drawModel.addFeature(highlightFeature, { silent: true });\n    // ...and update the state so that we can keep track of what we are highlighting.\n    setState({\n      ...state,\n      highlightedFeature: highlightFeature,\n    });\n  };\n\n  // Handler for mouse-leave on the list of clicked features. Removes the currently\n  // highlighted feature from the draw-layer.\n  const handleMouseLeave = () => {\n    state.highlightedFeature &&\n      drawModel.removeFeature(state.highlightedFeature);\n  };\n\n  // An effect that handles subscriptions (and un-subscriptions) to the observer-\n  // event fired from the drawModel when the user has clicked a feature with the\n  // \"select feature from map\"-tool active. The event will only be fired if there\n  // is more than one feature present at the location on which the user clicked.\n  // (If there's zero or one, the drawModel will take care of it).\n  React.useEffect(() => {\n    localObserver.subscribe(\"drawModel.select.click\", handleDrawSelectClick);\n    return () => {\n      localObserver.unsubscribe(\"drawModel.select.click\");\n    };\n  }, [localObserver, handleDrawSelectClick]);\n\n  return createPortal(\n    <Dialog\n      open={state.clickedFeatures.length > 1}\n      onClose={handleAbort}\n      // Must stop event-bubbling. Otherwise the parent element in react can be dragged etc.\n      onMouseDown={(e) => {\n        e.stopPropagation();\n      }}\n    >\n      <DialogTitle>Välj de objekt du vill kopiera</DialogTitle>\n      <DialogContent>\n        <List sx={{ width: \"100%\", maxHeight: \"30vh\" }}>\n          {state.clickedFeatures.map((feature, index) => (\n            <ListItem\n              disableGutters\n              key={index}\n              onMouseEnter={() => handleMouseEnter(index)}\n              onMouseLeave={() => handleMouseLeave(index)}\n            >\n              <ListItemButton\n                onClick={() => handleFeatureSelectChange(index)}\n                dense\n              >\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={state.selectedFeatureIndexes.indexOf(index) !== -1}\n                    tabIndex={-1}\n                    disableRipple\n                  />\n                </ListItemIcon>\n                <ListItemText primary={feature.getId()} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          disabled={state.selectedFeatureIndexes.length === 0}\n          onClick={handleConfirm}\n        >\n          OK\n        </Button>\n        <Button onClick={handleAbort}>Annuleren</Button>\n      </DialogActions>\n    </Dialog>,\n    document.getElementById(\"map\")\n  );\n}\n","import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport { TwitterPicker } from \"react-color\";\n\nimport { Box, Grid, Typography, Tooltip } from \"@mui/material\";\nimport { Paper, Slider } from \"@mui/material\";\n\nimport { Accordion, AccordionDetails, AccordionSummary } from \"@mui/material\";\n\nimport { DRAW_COLORS } from \"../../constants\";\nimport StrokeTypeSelector from \"./StrokeTypeSelector\";\n\nconst StyledAccordionSummary = styled(AccordionSummary)(() => ({\n  minHeight: 35,\n  \"&.MuiAccordionSummary-root.Mui-expanded\": {\n    minHeight: 35,\n  },\n  \"& .MuiAccordionSummary-content\": {\n    transition: \"inherit !important\",\n    marginTop: 0,\n    marginBottom: 0,\n    \"&.Mui-expanded\": {\n      marginTop: 0,\n      marginBottom: 0,\n    },\n  },\n}));\n\n// We want to be able to display the current color. Let's create\n// a color-badge component.\nconst ColorBadge = ({ color }) => {\n  return (\n    <Box\n      style={{\n        height: \"1.1rem\",\n        width: \"1.1rem\",\n        backgroundColor: color,\n        borderRadius: \"10%\",\n        marginLeft: 4,\n        border: color.toLowerCase() === \"#ffffff\" ? \"1px solid black\" : null,\n      }}\n    />\n  );\n};\n\n// We want to be able to change the opacity of the fill color. Let's\n// create a slider that can be used to change the value.\nconst OpacitySlider = ({ opacity, handleOpacityChange }) => {\n  return (\n    <Grid item xs={12}>\n      <Paper style={{ padding: 8, marginTop: 8 }}>\n        <Typography variant=\"caption\">{`Opacitet: ${Math.floor(\n          opacity * 100\n        )}%`}</Typography>\n        <Slider\n          size=\"small\"\n          min={0}\n          max={1}\n          value={opacity}\n          step={0.01}\n          onChange={handleOpacityChange}\n          valueLabelFormat={(value) => `${Math.floor(value * 100)}%`}\n          valueLabelDisplay=\"auto\"\n        />\n      </Paper>\n    </Grid>\n  );\n};\n\n// We want to be able to change the opacity of the fill color. Let's\n// create a slider that can be used to change the value.\nconst StrokeWidthSlider = ({ strokeWidth, handleStrokeWidthChange }) => {\n  return (\n    <Grid item xs={12}>\n      <Paper style={{ padding: 8, marginTop: 8 }}>\n        <Typography variant=\"caption\">{`Linjebredd: ${strokeWidth}px`}</Typography>\n        <Slider\n          size=\"small\"\n          min={1}\n          max={5}\n          value={strokeWidth}\n          step={0.5}\n          onChange={handleStrokeWidthChange}\n          valueLabelFormat={(value) => `${value}`}\n          valueLabelDisplay=\"auto\"\n        />\n      </Paper>\n    </Grid>\n  );\n};\n\nconst AccordionSummaryContents = (props) => {\n  // We need to get the string-representation of the supplied color-object\n  // to be used in the color badge... (If it not already a string).\n  const colorString =\n    typeof props.color === \"string\"\n      ? props.color\n      : props.drawModel.getRGBAString(props.color);\n  // Then we'll render everything!\n  return (\n    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n      <Typography variant=\"button\">{props.title}</Typography>\n      <Grid container item xs={4} justifyContent=\"flex-end\" alignItems=\"center\">\n        {props.showOpacitySlider && (\n          <Typography variant=\"caption\">{`${\n            typeof props.color === \"string\"\n              ? 100\n              : Math.floor(\n                  (!isNaN(props.color?.a) ? props.color?.a : 100) * 100\n                )\n          }%`}</Typography>\n        )}\n        {typeof props.strokeWidth === \"number\" && (\n          <Typography variant=\"caption\">{`${props.strokeWidth}px`}</Typography>\n        )}\n        <ColorBadge color={colorString} />\n      </Grid>\n    </Grid>\n  );\n};\n\n// The draw-style-accordion includes a summary showing the current draw-style-settings.\n// It also includes tools to update the current style.\nconst FeatureStyleAccordion = (props) => {\n  return (\n    <Accordion size=\"small\" style={{ marginBottom: 8 }}>\n      <Tooltip\n        disableInteractive\n        title={`Klicka här för att ändra ${props.title.toLowerCase()}.`}\n      >\n        <StyledAccordionSummary>\n          <AccordionSummaryContents\n            title={props.title}\n            color={props.color}\n            showOpacitySlider={props.showOpacitySlider}\n            strokeWidth={props.strokeWidth}\n            drawModel={props.drawModel}\n          />\n        </StyledAccordionSummary>\n      </Tooltip>\n      <AccordionDetails style={{ maxWidth: \"100%\" }}>\n        <Grid container>\n          <Grid item xs={12}>\n            <TwitterPicker\n              colors={DRAW_COLORS}\n              triangle=\"hide\"\n              onChange={props.handleColorChange}\n              styles={{\n                default: {\n                  card: {\n                    maxWidth: \"100%\",\n                    background: \"unset\", // Hard-coded to white, we don't want that.\n                  },\n                },\n              }}\n              color={props.color}\n            />\n          </Grid>\n          {props.showOpacitySlider && (\n            <OpacitySlider\n              handleOpacityChange={props.handleOpacityChange}\n              opacity={isNaN(props.color?.a) ? 1 : props.color.a}\n            />\n          )}\n          {props.showStrokeWidthSlider && (\n            <StrokeWidthSlider\n              handleStrokeWidthChange={props.handleStrokeWidthChange}\n              strokeWidth={props.strokeWidth}\n            />\n          )}\n          {props.showStrokeTypeSelector && (\n            <Grid item xs={12} style={{ marginTop: 8 }}>\n              <StrokeTypeSelector\n                handleStrokeTypeChange={props.handleStrokeTypeChange}\n                strokeType={props.strokeType}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default FeatureStyleAccordion;\n","import React from \"react\";\nimport { Grid, Typography, TextField } from \"@mui/material\";\nimport { STROKE_DASHES } from \"plugins/Sketch/constants\";\n\nimport FeatureStyleAccordion from \"./FeatureStyleAccordion\";\nimport StrokeTypeSelector from \"./StrokeTypeSelector\";\n\nexport default function FeatureStyleSelector(props) {\n  // We need a handler that can update the stroke-dash setting\n  const handleStrokeTypeChange = (e) => {\n    // We are storing both the stroke-type (e.g. \"dashed\", \"dotted\", or \"solid\") as well as\n    // the actual line-dash array which corresponds to the stroke-type.\n    // The stroke-type comes from the select-event\n    const strokeType = e.target.value;\n    // And corresponds to a line-dash from the constants\n    const lineDash = STROKE_DASHES.get(strokeType);\n    // When everything we need is fetched, we update the draw-style.\n    props.setDrawStyle({\n      ...props.drawStyle,\n      strokeType: strokeType,\n      lineDash: lineDash,\n    });\n  };\n\n  // We need a handler that can update the text-size setting\n  const handleTextSizeChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      size: parseInt(e.target.value),\n    });\n  };\n\n  // We need a handler that can update the stroke color\n  const handleStrokeColorChange = (e) => {\n    props.setDrawStyle({ ...props.drawStyle, strokeColor: e.rgb });\n  };\n\n  // We need a handler that can update the fill color\n  const handleFillColorChange = (e) => {\n    props.setDrawStyle({\n      ...props.drawStyle,\n      fillColor: { ...e.rgb, a: props.drawStyle.fillColor.a },\n    });\n  };\n\n  // We need a handler that can update the opacity value\n  const handleOpacityChange = (e, value) => {\n    props.setDrawStyle({\n      ...props.drawStyle,\n      fillColor: { ...props.drawStyle.fillColor, a: value },\n    });\n  };\n\n  // We need a handler that can update the strokeWidth value\n  const handleStrokeWidthChange = (e, value) => {\n    props.setDrawStyle({ ...props.drawStyle, strokeWidth: value });\n  };\n\n  // We need a handler that can update the text-foreground-color change\n  const handleForegroundColorChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      foregroundColor: e.hex,\n    });\n  };\n\n  // We need a handler that can update the text-background-color change\n  const handleBackgroundColorChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      backgroundColor: e.hex,\n    });\n  };\n\n  const renderStrokeTypeSelector = () => {\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Variant</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <StrokeTypeSelector\n            handleStrokeTypeChange={handleStrokeTypeChange}\n            strokeType={props.drawStyle.strokeType}\n            includeContainer={false}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderTextSizeSelector = () => {\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Lettergrootte</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            variant=\"outlined\"\n            type=\"number\"\n            size=\"small\"\n            fullWidth\n            value={props.textStyle.size}\n            onChange={handleTextSizeChange}\n          ></TextField>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style settings for area-drawings!\n  const renderFillStyleSettings = () => {\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Vulling\"\n            showOpacitySlider\n            color={props.drawStyle.fillColor}\n            handleColorChange={handleFillColorChange}\n            handleOpacityChange={handleOpacityChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Lijn\"\n            showStrokeWidthSlider\n            color={props.drawStyle.strokeColor}\n            strokeWidth={props.drawStyle.strokeWidth}\n            handleColorChange={handleStrokeColorChange}\n            handleStrokeWidthChange={handleStrokeWidthChange}\n            drawModel={props.drawModel}\n            showStrokeTypeSelector\n            handleStrokeTypeChange={handleStrokeTypeChange}\n            strokeType={props.drawStyle.strokeType}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style settings for text-drawings!\n  const renderTextStyleSettings = () => {\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Kleur - voorgrond\"\n            color={props.textStyle.foregroundColor}\n            handleColorChange={handleForegroundColorChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Kleur - achtergrond\"\n            color={props.textStyle.backgroundColor}\n            handleColorChange={handleBackgroundColorChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style-settings for arrows! We are not showing a stroke-width-slider\n  // when creating arrows, since they should have a standard width.\n  const renderArrowStyleSettings = () => {\n    return (\n      <FeatureStyleAccordion\n        title=\"Kleur\"\n        color={props.drawStyle.strokeColor}\n        handleColorChange={handleStrokeColorChange}\n        drawModel={props.drawModel}\n      />\n    );\n  };\n\n  // The style settings for line-drawings!\n  // Why are we grid-ing these? Cause we're gonna be implementing more settings.\n  const renderLineStyleSettings = () => {\n    return (\n      <FeatureStyleAccordion\n        title=\"Breedte en kleur\"\n        showStrokeWidthSlider\n        color={props.drawStyle.strokeColor}\n        strokeWidth={props.drawStyle.strokeWidth}\n        handleColorChange={handleStrokeColorChange}\n        handleStrokeWidthChange={handleStrokeWidthChange}\n        drawModel={props.drawModel}\n      />\n    );\n  };\n\n  // We want to display different settings depending on what the user is drawing!\n  // Let's check and render the appropriate settings.\n  const renderColorSelectors = () => {\n    switch (props.activeDrawType) {\n      case \"Arrow\":\n        return renderArrowStyleSettings();\n      case \"LineString\":\n        return renderLineStyleSettings();\n      case \"Text\":\n        return renderTextStyleSettings();\n      default:\n        return renderFillStyleSettings();\n    }\n  };\n\n  const renderCircleRadiusSelector = () => {\n    if (props.isEdit) {\n      return null;\n    }\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Radius (m)</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            variant=\"outlined\"\n            type=\"number\"\n            size=\"small\"\n            fullWidth\n            defaultValue={props.drawModel.getCircleRadius()}\n            onChange={(e) => {\n              props.drawModel.setCircleRadius(e.target.value);\n            }}\n          ></TextField>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <Grid container>\n      {props.activeDrawType === \"LineString\" && renderStrokeTypeSelector()}\n      {props.activeDrawType === \"Text\" && renderTextSizeSelector()}\n      {props.activeDrawType === \"Circle\" && renderCircleRadiusSelector()}\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Symbolisatie</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          {renderColorSelectors()}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { Grid, MenuItem, Paper } from \"@mui/material\";\nimport { TextField, Tooltip, Typography } from \"@mui/material\";\nimport { STROKE_TYPES } from \"../../constants\";\n\nconst StrokeTypeSelector = (props) => {\n  return (\n    <Paper\n      style={{ padding: props.includeContainer !== false ? 8 : 0 }}\n      elevation={props.includeContainer !== false ? 3 : 0}\n    >\n      <Grid container>\n        {props.includeContainer !== false ? (\n          <Grid item xs={12}>\n            <Typography variant=\"caption\">Linjetyp</Typography>\n          </Grid>\n        ) : null}\n        <TextField\n          fullWidth\n          id=\"select-stroke-type\"\n          variant=\"outlined\"\n          size=\"small\"\n          select\n          value={props.strokeType}\n          onChange={props.handleStrokeTypeChange}\n        >\n          {STROKE_TYPES.map((option) => (\n            <MenuItem key={option.type} value={option.type}>\n              {\n                <Tooltip disableInteractive title={option.tooltip}>\n                  <span style={{ width: \"100%\" }}>{option.label}</span>\n                </Tooltip>\n              }\n            </MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default StrokeTypeSelector;\n","import EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FormatShapesIcon from \"@mui/icons-material/FormatShapes\";\nimport OpenWithIcon from \"@mui/icons-material/OpenWith\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport ImportExportIcon from \"@mui/icons-material/ImportExport\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\n\nexport const ACTIVITIES = [\n  {\n    id: \"ADD\",\n    tooltip: \"Voeg nieuwe objecten toe.\",\n    information:\n      \"Voeg objecten toe door op de kaart te tekenen. Begin hieronder met het\" +\n      \"kiezen van het type object dat u wilt tekenen.\",\n    icon: <EditIcon />,\n  },\n  {\n    id: \"EDIT\",\n    tooltip: \"Bewerk bestaande objecten.\",\n    information:\n      \"Bewerk nodes, wijzig de tekenvolgorde of wijzig de kleur van getekende\" +\n      \"objecten.\",\n    icon: <FormatShapesIcon />,\n  },\n  {\n    id: \"MOVE\",\n    tooltip: \"Verplaats bestaande objecten.\",\n    information:\n      \"Klik op het object op de kaart dat u wilt verplaatsen om de \" +\n      \"verplaatsingmodus te activeren. Sleep het object vervolgens naar de \" +\n      \"juiste locatie.\",\n    icon: <OpenWithIcon />,\n  },\n  {\n    id: \"DELETE\",\n    tooltip: \"Verwijder objecten.\",\n    information:\n      \"Klik op het object dat u wilt verwijderen, of klik op de onderstaande\" +\n      \"knop om alle objecten te verwijderen.\",\n    icon: <DeleteIcon />,\n  },\n  {\n    id: \"SAVE\",\n    tooltip: \"Objecten bewaren.\",\n    information:\n      \"Bewaar de objecten en ga later verder. Houd er rekening mee dat alleen \" +\n      \"objecten die zichtbaar zijn op d ekaart worden opgeslagen. .\",\n    icon: <SaveIcon />,\n  },\n  {\n    id: \"UPLOAD\",\n    tooltip: \"Download of upload objecten\",\n    information:\n      \"Download of upload objecten in .KML-formaat. Gebruik de \" +\n      \"onderstaande knoppen of sleep een .KML-bestand rechtstreeks naar de \" +\n      \"kaart. \",\n    icon: <ImportExportIcon />,\n  },\n  {\n    id: \"SETTINGS\",\n    tooltip: \"Instellingen.\",\n    information: \"Hier kunt u de instellingen van het de teken-tool wijzigen.\",\n    icon: <SettingsIcon />,\n  },\n];\n\nexport const DRAW_COLORS = [\n  \"#FF6900\",\n  \"#FCB900\",\n  \"#7BDCB5\",\n  \"#00D084\",\n  \"#8ED1FC\",\n  \"#0693E3\",\n  \"#ABB8C3\",\n  \"#EB144C\",\n  \"#F78DA7\",\n  \"#9900EF\",\n  \"#354FAD\",\n];\n\nexport const DRAW_TYPES = [\n  {\n    type: \"Circle\",\n    label: \"Cirkel\",\n    tooltip:\n      \"Teken een circel op de kaart door één keer te klikken waar de circel moet\" +\n      \" beginnen, vervolgens naar de gewenste grootte te slepen en los te laten.\",\n  },\n  {\n    type: \"LineString\",\n    label: \"Lijn\",\n    tooltip:\n      \"Teken een lijn in de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig een dubbelklik.\",\n  },\n  {\n    type: \"Rectangle\",\n    label: \"Rechthoek\",\n    tooltip:\n      \"Teken een rechthoek op de kaart door eenmaal te klikken waar de rechthoek\" +\n      \" moet beginnen, sleep vervolgens naar de gewenste grootte en laat los.\",\n  },\n  {\n    type: \"Arrow\",\n    label: \"Pijl\",\n    tooltip:\n      \"Teken een pijl in de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig met een dubbelklik.\",\n  },\n  {\n    type: \"Select\",\n    label: \"Selecteer op de kaart\",\n    tooltip:\n      \"Klik op een bestaand object op de kaart en kopieer het naar de tekenlaag.\",\n  },\n  {\n    type: \"Polygon\",\n    label: \"Polygon\",\n    tooltip:\n      \"Teken een polygoon op de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig met een dubbelklik.\",\n  },\n  {\n    type: \"Point\",\n    label: \"Punt\",\n    tooltip:\n      \"Voeg een punt in de kaart in door te klikken op de plek waar u het punt \" +\n      \"wilt hebben.\",\n  },\n  {\n    type: \"Text\",\n    label: \"Tekst\",\n    tooltip:\n      \"Voeg tekst in de kaart in door te klikken op de plek waar u de \" +\n      \"tekst wilt hebben.\",\n  },\n];\n\nexport const MAX_REMOVED_FEATURES = 4;\nexport const PLUGIN_MARGIN = 10;\n\nexport const STROKE_TYPES = [\n  {\n    type: \"solid\",\n    label: \"Ononderbroken\",\n    tooltip: \"Ononderbroken lijn.\",\n  },\n  {\n    type: \"dotted\",\n    label: \"Stippellijn\",\n    tooltip: \"Stippellijn (stippen).\",\n  },\n  {\n    type: \"dashed\",\n    label: \"Stippellijn\",\n    tooltip: \"Stippellijn (strepen).\",\n  },\n];\n\nexport const STROKE_DASHES = new Map([\n  [\"solid\", null],\n  [\"dotted\", [2, 7]],\n  [\"dashed\", [12, 7]],\n]);\n\n// A constant stating how many sketches we're allowed to save in local-storage.\nexport const MAX_SKETCHES = 3;\n\nexport const DEFAULT_MEASUREMENT_SETTINGS = {\n  showText: false,\n  showArea: false,\n  showLength: false,\n  showPerimeter: false,\n  areaUnit: \"AUTO\",\n  lengthUnit: \"AUTO\",\n  precision: 0,\n};\n\nexport const STORAGE_KEY = \"sketch\";\n\n// How many characters we allow the user to save in LS.\nexport const MAX_LS_CHARS = 1e6;\n\nexport const PROMPT_TEXTS = {\n  saveOverflow:\n    \"De items konden niet worden opgeslagen. Werkruimte voor veel objecten.\",\n  saveNoFeatures: \"Kan canvas niet maken, geen tekenobjecten gevonden.\",\n  saveSuccess: \"De werkruimte werd zonder problemen opgeslagen.\",\n  CircleHelp:\n    \"U kunt een cirkel maken door met een ingestelde straal te klikken, of te \" +\n    \"slepen om de gewenste straal te krijgen.\",\n  LineStringHelp:\n    \"Maak lijnen door voor elk knooppunt op een positie te klikken en eindig met\" +\n    \" dubbelklikken.\",\n  RectangleHelp:\n    \"Maak een rechthoek door met de linkermuisknop te klikken en over een gebied\" +\n    \" te slepen om de gewenste grootte te krijgen.\",\n  ArrowHelp:\n    \"Er wordt een pijl gemaakt door voor elk knooppunt op een positie te \" +\n    \"klikken, en eindig met een dubbelklik.\",\n  SelectHelp:\n    \"Klik op een bestaand object op de kaart en kopieer het naar de tekenlaag.\",\n  PolygonHelp:\n    \"Maak een polygoon door voor elk knooppunt op een positie te klikken en \" +\n    \"eindig met een dubbelklik.\",\n  PointHelp: \"Klik op een positie om een ​​punt in te voegen.\",\n  TextHelp: \"Klik op een positie om tekst in te voegen.\",\n  EDITHelp:\n    \"Klik op een object om het uiterlijk of de tekenvolgorde te wijzigen.\",\n  MOVEHelp: \"Klik op een object om het te verplaatsen.\",\n  DELETEHelp: \"Klik op een object om het uit uw schets te verwijderen.\",\n  SAVEHelp:\n    \"Hier kunt u een werkruimte opslaan om later verder te werken. Als u een \" +\n    \"oudere werkruimte wilt opslaan, voert u dezelfde naam in.\",\n};\n\nexport const AREA_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisch\" },\n  { type: \"M2\", name: \"Vierkante meter (m²)\" },\n  { type: \"KM2\", name: \"Vierkante kilometer (km²)\" },\n  { type: \"HECTARE\", name: \"Hactare (ha)\" },\n];\n\nexport const LENGTH_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisch\" },\n  { type: \"M\", name: \"Meter (m)\" },\n  { type: \"KM\", name: \"Kilometer (km)\" },\n];\n\nexport const MEASUREMENT_PRECISIONS = [\n  { value: 0, name: \"0 decimalen\" },\n  { value: 1, name: \"1 decimaal\" },\n  { value: 2, name: \"2 decimalen\" },\n  { value: 3, name: \"3 decimalen\" },\n];\n\nexport const DEFAULT_DRAW_STYLE_SETTINGS = {\n  strokeColor: { r: 10, g: 10, b: 10, a: 1 },\n  fillColor: { r: 60, g: 60, b: 60, a: 0.3 },\n  strokeType: \"solid\",\n  strokeWidth: 1,\n};\n\nexport const DEFAULT_TEXT_STYLE_SETTINGS = {\n  foregroundColor: \"#FFFFFF\",\n  backgroundColor: \"#000000\",\n  size: 14,\n};\n","import React from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\n\nimport DrawTypeSelector from \"../components/DrawTypeSelector\";\nimport Information from \"../components/Information\";\nimport FeatureStyleSelector from \"../components/featureStyle/FeatureStyleSelector\";\nimport FeatureTextSetter from \"../components/FeatureTextSetter\";\nimport SelectFeaturesDialog from \"../components/SelectFeaturesDialog\";\n\nconst AddView = (props) => {\n  // Let's destruct some properties from the props\n  const { model, activeDrawType, setActiveDrawType, localObserver, drawModel } =\n    props;\n  // We have to get some information about the current activity (view)\n  const activity = model.getActivityFromId(props.id);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Information text={activity.information} />\n      </Grid>\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Typ</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <DrawTypeSelector\n            activeDrawType={activeDrawType}\n            setActiveDrawType={setActiveDrawType}\n          />\n        </Grid>\n      </Grid>\n      <FeatureStyleSelector\n        activeDrawType={activeDrawType}\n        drawStyle={props.drawStyle}\n        drawModel={props.drawModel}\n        setDrawStyle={props.setDrawStyle}\n        textStyle={props.textStyle}\n        setTextStyle={props.setTextStyle}\n      />\n      <FeatureTextSetter\n        localObserver={props.localObserver}\n        drawModel={props.drawModel}\n      />\n      <SelectFeaturesDialog\n        localObserver={localObserver}\n        drawModel={drawModel}\n        model={model}\n      />\n    </Grid>\n  );\n};\n\nexport default AddView;\n"],"names":["props","fullWidth","id","variant","size","select","value","activeDrawType","onChange","e","setActiveDrawType","target","DRAW_TYPES","option","type","disableInteractive","title","tooltip","style","width","label","drawModel","localObserver","feature","setFeature","React","handleFeatureCreated","addedFeature","get","handleCloseClick","textFieldValue","length","removeFeature","set","refreshFeaturesTextStyle","handleAbortClick","subscribe","unsubscribe","createPortal","options","text","prompt","headerText","buttonText","abortText","open","onClose","onAbort","document","getElementById","padding","align","SelectFeaturesDialog","model","state","setState","clickedFeatures","selectedFeatureIndexes","highlightedFeature","resetState","handleDrawSelectClick","handleAbort","onMouseDown","stopPropagation","sx","maxHeight","map","index","disableGutters","onMouseEnter","hoveredFeature","highlightFeature","createHighlightFeature","addFeature","silent","handleMouseEnter","onMouseLeave","onClick","featureIndex","newSelectedFeatureIndexes","indexOf","filter","i","handleFeatureSelectChange","dense","edge","checked","tabIndex","disableRipple","primary","getId","disabled","drawSelectedFeature","StyledAccordionSummary","styled","AccordionSummary","minHeight","transition","marginTop","marginBottom","ColorBadge","color","height","backgroundColor","borderRadius","marginLeft","border","toLowerCase","OpacitySlider","opacity","handleOpacityChange","item","xs","Math","floor","min","max","step","valueLabelFormat","valueLabelDisplay","StrokeWidthSlider","strokeWidth","handleStrokeWidthChange","AccordionSummaryContents","colorString","getRGBAString","container","justifyContent","alignItems","showOpacitySlider","isNaN","a","maxWidth","colors","DRAW_COLORS","triangle","handleColorChange","styles","default","card","background","showStrokeWidthSlider","showStrokeTypeSelector","handleStrokeTypeChange","strokeType","FeatureStyleSelector","lineDash","STROKE_DASHES","setDrawStyle","drawStyle","handleTextSizeChange","setTextStyle","textStyle","parseInt","handleStrokeColorChange","strokeColor","rgb","handleFillColorChange","fillColor","handleForegroundColorChange","foregroundColor","hex","handleBackgroundColorChange","includeContainer","isEdit","defaultValue","getCircleRadius","setCircleRadius","renderColorSelectors","elevation","STROKE_TYPES","ACTIVITIES","information","icon","MAX_REMOVED_FEATURES","PLUGIN_MARGIN","Map","MAX_SKETCHES","DEFAULT_MEASUREMENT_SETTINGS","showText","showArea","showLength","showPerimeter","areaUnit","lengthUnit","precision","STORAGE_KEY","MAX_LS_CHARS","PROMPT_TEXTS","saveOverflow","saveNoFeatures","saveSuccess","CircleHelp","LineStringHelp","RectangleHelp","ArrowHelp","SelectHelp","PolygonHelp","PointHelp","TextHelp","EDITHelp","MOVEHelp","DELETEHelp","SAVEHelp","AREA_MEASUREMENT_UNITS","name","LENGTH_MEASUREMENT_UNITS","MEASUREMENT_PRECISIONS","DEFAULT_DRAW_STYLE_SETTINGS","r","g","b","DEFAULT_TEXT_STYLE_SETTINGS","activity","getActivityFromId"],"sourceRoot":""}
{"version":3,"file":"static/js/5931.2c055736.chunk.js","mappings":"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","sources":["plugins/LayerComparer/CustomOLControl.js"],"sourcesContent":["import Control from \"ol/control/Control\";\nimport { getRenderPixel } from \"ol/render\";\nimport \"./index.css\";\n\nexport default class OlSideBySideControl extends Control {\n  #container = null;\n  #divider = null;\n  #range = null;\n\n  constructor() {\n    const container = document.createElement(\"div\");\n\n    const divider = document.createElement(\"div\");\n    divider.className = \"ol-side-by-side-divider\";\n\n    const range = document.createElement(\"input\");\n    range.type = \"range\";\n    range.min = 0;\n    range.max = 1;\n    range.step = \"any\";\n    range.value = 0.5;\n    range.className = \"ol-side-by-side-range\";\n\n    super({\n      element: container,\n    });\n\n    this.#container = container;\n    this.#divider = divider;\n    this.#range = range;\n  }\n\n  #addEvents() {\n    this.#range.addEventListener(\"input\", () => {\n      this.updateClip();\n    });\n  }\n\n  updateClip() {\n    this.#divider.style.left = this.#getPosition() + \"px\";\n    this.getMap().render();\n  }\n\n  #getPosition() {\n    const rangeValue = this.#range.value;\n    const offset = (0.5 - rangeValue) * (2 * 0 + 42);\n    const size = this.getMap().getSize();\n    return size[0] * Number(rangeValue) + offset;\n  }\n\n  #prerenderLeft = (event) => {\n    const ctx = event.context;\n    const mapSize = this.getMap().getSize();\n    const width = this.#getPosition();\n\n    const tl = getRenderPixel(event, [0, 0]);\n    const tr = getRenderPixel(event, [width, 0]);\n    const bl = getRenderPixel(event, [width, mapSize[1]]);\n    const br = getRenderPixel(event, [0, mapSize[1]]);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(tl[0], tl[1]);\n    ctx.lineTo(tr[0], tr[1]);\n    ctx.lineTo(bl[0], bl[1]);\n    ctx.lineTo(br[0], br[1]);\n    ctx.closePath();\n    ctx.clip();\n  };\n\n  #prerenderRight = (event) => {\n    const ctx = event.context;\n    const mapSize = this.getMap().getSize();\n    const width = this.#getPosition();\n\n    const tl = getRenderPixel(event, [width, 0]);\n    const tr = getRenderPixel(event, [mapSize[0], 0]);\n    const bl = getRenderPixel(event, mapSize);\n    const br = getRenderPixel(event, [width, mapSize[1]]);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(tl[0], tl[1]);\n    ctx.lineTo(tr[0], tr[1]);\n    ctx.lineTo(bl[0], bl[1]);\n    ctx.lineTo(br[0], br[1]);\n    ctx.closePath();\n    ctx.clip();\n  };\n\n  #postrender(event) {\n    const ctx = event.context;\n    ctx.restore();\n  }\n\n  #unsetLayers = () => {\n    // Grab previous compare layer and hide them\n    this.getMap()\n      .getLayers()\n      .getArray()\n      .filter(\n        (l) =>\n          l.get(\"isLeftCompareLayer\") === true ||\n          l.get(\"isRightCompareLayer\") === true\n      )\n      .forEach((l) => {\n        l.set(\"visible\", false, true);\n        if (l.get(\"isLeftCompareLayer\") === true) {\n          l.set(\"isLeftCompareLayer\", false);\n          l.un(\"prerender\", this.#prerenderLeft);\n        } else {\n          l.set(\"isRightCompareLayer\", false);\n          l.un(\"prerender\", this.#prerenderRight);\n        }\n        l.un(\"postrender\", this.#postrender);\n      });\n  };\n\n  setCompareLayers(leftLayer, rightLayer) {\n    // Unset possible previous compare layers\n    this.#unsetLayers();\n\n    // Set visibility, silently (don't trigger a map render at this time)\n    leftLayer.set(\"visible\", true, true);\n\n    // Set a unique flag - used later\n    leftLayer.set(\"isLeftCompareLayer\", true);\n\n    // Add the render event handler that will split the screen in two\n    leftLayer.on(\"prerender\", this.#prerenderLeft);\n    leftLayer.on(\"postrender\", this.#postrender);\n\n    // Do the same for the other side of the screen\n    rightLayer.set(\"visible\", true, true);\n    rightLayer.set(\"isRightCompareLayer\", true);\n    rightLayer.on(\"prerender\", this.#prerenderRight);\n    rightLayer.on(\"postrender\", this.#postrender);\n  }\n\n  remove() {\n    // Hide previous compare layers and remove custom render handlers\n    this.#unsetLayers();\n\n    // Remove the DIV. Do it in a try/catch, else the DOM will throw\n    // an error if element can't be found.\n    try {\n      this.#container.removeChild(this.#divider);\n      this.#container.removeChild(this.#range);\n    } catch (error) {}\n  }\n\n  open() {\n    this.#container.appendChild(this.#divider);\n    this.#container.appendChild(this.#range);\n    this.#addEvents();\n  }\n}\n"],"names":["OlSideBySideControl","Control","constructor","container","document","createElement","divider","className","range","type","min","max","step","value","super","element","event","ctx","context","mapSize","this","getMap","getSize","width","tl","getRenderPixel","tr","bl","br","save","beginPath","moveTo","lineTo","closePath","clip","getLayers","getArray","filter","l","get","forEach","set","un","updateClip","style","left","render","setCompareLayers","leftLayer","rightLayer","on","remove","removeChild","error","open","appendChild","addEventListener","rangeValue","offset","Number","restore"],"sourceRoot":""}
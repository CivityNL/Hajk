{"version":3,"file":"static/js/3572.a1f044b3.chunk.js","mappings":"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","sources":["../node_modules/ol/format/KML.js"],"sourcesContent":["/**\n * @module ol/format/KML\n */\nimport Feature from '../Feature.js';\nimport Fill from '../style/Fill.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport Icon from '../style/Icon.js';\nimport ImageState from '../ImageState.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Stroke from '../style/Stroke.js';\nimport Style from '../style/Style.js';\nimport Text from '../style/Text.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  isDocument,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeReplacer,\n  makeSequence,\n  makeSimpleNodeFactory,\n  makeStructureNS,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readBoolean,\n  readDecimal,\n  readString,\n  writeBooleanTextNode,\n  writeCDATASection,\n  writeDecimalTextNode,\n  writeStringTextNode,\n} from './xsd.js';\nimport {toRadians} from '../math.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {Object} Vec2\n * @property {number} x X coordinate.\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} xunits Units of x.\n * @property {number} y Y coordinate.\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} yunits Units of Y.\n * @property {import(\"../style/Icon.js\").IconOrigin} [origin] Origin.\n */\n\n/**\n * @typedef {Object} GxTrackObject\n * @property {Array<Array<number>>} coordinates Coordinates.\n * @property {Array<number>} whens Whens.\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [\n  null,\n  'http://earth.google.com/kml/2.0',\n  'http://earth.google.com/kml/2.1',\n  'http://earth.google.com/kml/2.2',\n  'http://www.opengis.net/kml/2.2',\n];\n\n/**\n * @const\n * @type {string}\n */\nconst SCHEMA_LOCATION =\n  'http://www.opengis.net/kml/2.2 ' +\n  'https://developers.google.com/kml/schema/kml22gx.xsd';\n\n/**\n * @type {Object<string, import(\"../style/Icon.js\").IconAnchorUnits>}\n */\nconst ICON_ANCHOR_UNITS_MAP = {\n  'fraction': 'fraction',\n  'pixels': 'pixels',\n  'insetPixels': 'pixels',\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PLACEMARK_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'ExtendedData': extendedDataParser,\n    'Region': regionParser,\n    'MultiGeometry': makeObjectPropertySetter(readMultiGeometry, 'geometry'),\n    'LineString': makeObjectPropertySetter(readLineString, 'geometry'),\n    'LinearRing': makeObjectPropertySetter(readLinearRing, 'geometry'),\n    'Point': makeObjectPropertySetter(readPoint, 'geometry'),\n    'Polygon': makeObjectPropertySetter(readPolygon, 'geometry'),\n    'Style': makeObjectPropertySetter(readStyle),\n    'StyleMap': placemarkStyleMapParser,\n    'address': makeObjectPropertySetter(readString),\n    'description': makeObjectPropertySetter(readString),\n    'name': makeObjectPropertySetter(readString),\n    'open': makeObjectPropertySetter(readBoolean),\n    'phoneNumber': makeObjectPropertySetter(readString),\n    'styleUrl': makeObjectPropertySetter(readStyleURL),\n    'visibility': makeObjectPropertySetter(readBoolean),\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'MultiTrack': makeObjectPropertySetter(readGxMultiTrack, 'geometry'),\n    'Track': makeObjectPropertySetter(readGxTrack, 'geometry'),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst NETWORK_LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ExtendedData': extendedDataParser,\n  'Region': regionParser,\n  'Link': linkParser,\n  'address': makeObjectPropertySetter(readString),\n  'description': makeObjectPropertySetter(readString),\n  'name': makeObjectPropertySetter(readString),\n  'open': makeObjectPropertySetter(readBoolean),\n  'phoneNumber': makeObjectPropertySetter(readString),\n  'visibility': makeObjectPropertySetter(readBoolean),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'href': makeObjectPropertySetter(readURI),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst REGION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LatLonAltBox': latLonAltBoxParser,\n  'Lod': lodParser,\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst KML_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['Document', 'Placemark']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst KML_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Document': makeChildAppender(writeDocument),\n  'Placemark': makeChildAppender(writePlacemark),\n});\n\n/**\n * @type {import(\"../color.js\").Color}\n */\nlet DEFAULT_COLOR;\n\n/**\n * @type {Fill|null}\n */\nlet DEFAULT_FILL_STYLE = null;\n\n/**\n * Get the default fill style (or null if not yet set).\n * @return {Fill|null} The default fill style.\n */\nexport function getDefaultFillStyle() {\n  return DEFAULT_FILL_STYLE;\n}\n\n/**\n * @type {import(\"../size.js\").Size}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR;\n\n/**\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n\n/**\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\n */\nlet DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n\n/**\n * @type {import(\"../size.js\").Size}\n */\nlet DEFAULT_IMAGE_STYLE_SIZE;\n\n/**\n * @type {string}\n */\nlet DEFAULT_IMAGE_STYLE_SRC;\n\n/**\n * @type {import(\"../style/Image.js\").default|null}\n */\nlet DEFAULT_IMAGE_STYLE = null;\n\n/**\n * Get the default image style (or null if not yet set).\n * @return {import(\"../style/Image.js\").default|null} The default image style.\n */\nexport function getDefaultImageStyle() {\n  return DEFAULT_IMAGE_STYLE;\n}\n\n/**\n * @type {string}\n */\nlet DEFAULT_NO_IMAGE_STYLE;\n\n/**\n * @type {Stroke|null}\n */\nlet DEFAULT_STROKE_STYLE = null;\n\n/**\n * Get the default stroke style (or null if not yet set).\n * @return {Stroke|null} The default stroke style.\n */\nexport function getDefaultStrokeStyle() {\n  return DEFAULT_STROKE_STYLE;\n}\n\n/**\n * @type {Stroke}\n */\nlet DEFAULT_TEXT_STROKE_STYLE;\n\n/**\n * @type {Text|null}\n */\nlet DEFAULT_TEXT_STYLE = null;\n\n/**\n * Get the default text style (or null if not yet set).\n * @return {Text|null} The default text style.\n */\nexport function getDefaultTextStyle() {\n  return DEFAULT_TEXT_STYLE;\n}\n\n/**\n * @type {Style|null}\n */\nlet DEFAULT_STYLE = null;\n\n/**\n * Get the default style (or null if not yet set).\n * @return {Style|null} The default style.\n */\nexport function getDefaultStyle() {\n  return DEFAULT_STYLE;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet DEFAULT_STYLE_ARRAY = null;\n\n/**\n * Get the default style array (or null if not yet set).\n * @return {Array<Style>|null} The default style.\n */\nexport function getDefaultStyleArray() {\n  return DEFAULT_STYLE_ARRAY;\n}\n\n/**\n * Function that returns the scale needed to normalize an icon image to 32 pixels.\n * @param {import(\"../size.js\").Size} size Image size.\n * @return {number} Scale.\n */\nfunction scaleForSize(size) {\n  return 32 / Math.min(size[0], size[1]);\n}\n\nfunction createStyleDefaults() {\n  DEFAULT_COLOR = [255, 255, 255, 1];\n\n  DEFAULT_FILL_STYLE = new Fill({\n    color: DEFAULT_COLOR,\n  });\n\n  DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2];\n\n  DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = 'pixels';\n\n  DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = 'pixels';\n\n  DEFAULT_IMAGE_STYLE_SIZE = [64, 64];\n\n  DEFAULT_IMAGE_STYLE_SRC =\n    'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';\n\n  DEFAULT_IMAGE_STYLE = new Icon({\n    anchor: DEFAULT_IMAGE_STYLE_ANCHOR,\n    anchorOrigin: 'bottom-left',\n    anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,\n    anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,\n    crossOrigin: 'anonymous',\n    rotation: 0,\n    scale: scaleForSize(DEFAULT_IMAGE_STYLE_SIZE),\n    size: DEFAULT_IMAGE_STYLE_SIZE,\n    src: DEFAULT_IMAGE_STYLE_SRC,\n  });\n\n  DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';\n\n  DEFAULT_STROKE_STYLE = new Stroke({\n    color: DEFAULT_COLOR,\n    width: 1,\n  });\n\n  DEFAULT_TEXT_STROKE_STYLE = new Stroke({\n    color: [51, 51, 51, 1],\n    width: 2,\n  });\n\n  DEFAULT_TEXT_STYLE = new Text({\n    font: 'bold 16px Helvetica',\n    fill: DEFAULT_FILL_STYLE,\n    stroke: DEFAULT_TEXT_STROKE_STYLE,\n    scale: 0.8,\n  });\n\n  DEFAULT_STYLE = new Style({\n    fill: DEFAULT_FILL_STYLE,\n    image: DEFAULT_IMAGE_STYLE,\n    text: DEFAULT_TEXT_STYLE,\n    stroke: DEFAULT_STROKE_STYLE,\n    zIndex: 0,\n  });\n\n  DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];\n}\n\n/**\n * @type {HTMLTextAreaElement}\n */\nlet TEXTAREA;\n\n/**\n * A function that takes a url `{string}` and returns a url `{string}`.\n * Might be used to change an icon path or to substitute a\n * data url obtained from a KMZ array buffer.\n *\n * @typedef {function(string):string} IconUrlFunction\n * @api\n */\n\n/**\n * Function that returns a url unchanged.\n * @param {string} href Input url.\n * @return {string} Output url.\n */\nfunction defaultIconUrlFunction(href) {\n  return href;\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [extractStyles=true] Extract styles from the KML.\n * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.\n * @property {Array<Style>} [defaultStyle] Default style. The\n * default default style is the same as Google Earth.\n * @property {boolean} [writeStyles=true] Write styles into KML.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * @property {IconUrlFunction} [iconUrlFunction] Function that takes a url string and returns a url string.\n * Might be used to change an icon path or to substitute a data url obtained from a KMZ array buffer.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the KML format.\n *\n * {@link module:ol/format/KML~KML#readFeature} will read the first feature from\n * a KML source.\n *\n * MultiGeometries are converted into GeometryCollections if they are a mix of\n * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are\n * all of the same type.\n *\n * @api\n */\nclass KML extends XMLFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    if (!DEFAULT_STYLE_ARRAY) {\n      createStyleDefaults();\n    }\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @private\n     * @type {Array<Style>}\n     */\n    this.defaultStyle_ = options.defaultStyle\n      ? options.defaultStyle\n      : DEFAULT_STYLE_ARRAY;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.extractStyles_ =\n      options.extractStyles !== undefined ? options.extractStyles : true;\n\n    /**\n     * @type {boolean}\n     */\n    this.writeStyles_ =\n      options.writeStyles !== undefined ? options.writeStyles : true;\n\n    /**\n     * @private\n     * @type {!Object<string, (Array<Style>|string)>}\n     */\n    this.sharedStyles_ = {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.showPointNames_ =\n      options.showPointNames !== undefined ? options.showPointNames : true;\n\n    /**\n     * @type {null|string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    /**\n     * @type {IconUrlFunction}\n     */\n    this.iconUrlFunction_ = options.iconUrlFunction\n      ? options.iconUrlFunction\n      : defaultIconUrlFunction;\n\n    this.supportedMediaTypes = ['application/vnd.google-earth.kml+xml'];\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<Feature>|undefined} Features.\n   */\n  readDocumentOrFolder_(node, objectStack) {\n    // FIXME use scope somehow\n    const parsersNS = makeStructureNS(NAMESPACE_URIS, {\n      'Document': makeArrayExtender(this.readDocumentOrFolder_, this),\n      'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),\n      'Placemark': makeArrayPusher(this.readPlacemark_, this),\n      'Style': this.readSharedStyle_.bind(this),\n      'StyleMap': this.readSharedStyleMap_.bind(this),\n    });\n    /** @type {Array<Feature>} */\n    // @ts-ignore\n    const features = pushParseAndPop([], parsersNS, node, objectStack, this);\n    if (features) {\n      return features;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Feature|undefined} Feature.\n   */\n  readPlacemark_(node, objectStack) {\n    const object = pushParseAndPop(\n      {'geometry': null},\n      PLACEMARK_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (!object) {\n      return undefined;\n    }\n    const feature = new Feature();\n    const id = node.getAttribute('id');\n    if (id !== null) {\n      feature.setId(id);\n    }\n    const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\n      objectStack[0]\n    );\n\n    const geometry = object['geometry'];\n    if (geometry) {\n      transformGeometryWithOptions(geometry, false, options);\n    }\n    feature.setGeometry(geometry);\n    delete object['geometry'];\n\n    if (this.extractStyles_) {\n      const style = object['Style'];\n      const styleUrl = object['styleUrl'];\n      const styleFunction = createFeatureStyleFunction(\n        style,\n        styleUrl,\n        this.defaultStyle_,\n        this.sharedStyles_,\n        this.showPointNames_\n      );\n      feature.setStyle(styleFunction);\n    }\n    delete object['Style'];\n    // we do not remove the styleUrl property from the object, so it\n    // gets stored on feature when setProperties is called\n\n    feature.setProperties(object, true);\n\n    return feature;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  readSharedStyle_(node, objectStack) {\n    const id = node.getAttribute('id');\n    if (id !== null) {\n      const style = readStyle.call(this, node, objectStack);\n      if (style) {\n        let styleUri;\n        let baseURI = node.baseURI;\n        if (!baseURI || baseURI == 'about:blank') {\n          baseURI = window.location.href;\n        }\n        if (baseURI) {\n          const url = new URL('#' + id, baseURI);\n          styleUri = url.href;\n        } else {\n          styleUri = '#' + id;\n        }\n        this.sharedStyles_[styleUri] = style;\n      }\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  readSharedStyleMap_(node, objectStack) {\n    const id = node.getAttribute('id');\n    if (id === null) {\n      return;\n    }\n    const styleMapValue = readStyleMapValue.call(this, node, objectStack);\n    if (!styleMapValue) {\n      return;\n    }\n    let styleUri;\n    let baseURI = node.baseURI;\n    if (!baseURI || baseURI == 'about:blank') {\n      baseURI = window.location.href;\n    }\n    if (baseURI) {\n      const url = new URL('#' + id, baseURI);\n      styleUri = url.href;\n    } else {\n      styleUri = '#' + id;\n    }\n    this.sharedStyles_[styleUri] = styleMapValue;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return null;\n    }\n    const feature = this.readPlacemark_(node, [\n      this.getReadOptions(node, options),\n    ]);\n    if (feature) {\n      return feature;\n    }\n    return null;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\n      return [];\n    }\n    let features;\n    const localName = node.localName;\n    if (localName == 'Document' || localName == 'Folder') {\n      features = this.readDocumentOrFolder_(node, [\n        this.getReadOptions(node, options),\n      ]);\n      if (features) {\n        return features;\n      }\n      return [];\n    } else if (localName == 'Placemark') {\n      const feature = this.readPlacemark_(node, [\n        this.getReadOptions(node, options),\n      ]);\n      if (feature) {\n        return [feature];\n      }\n      return [];\n    } else if (localName == 'kml') {\n      features = [];\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        const fs = this.readFeaturesFromNode(n, options);\n        if (fs) {\n          extend(features, fs);\n        }\n      }\n      return features;\n    }\n    return [];\n  }\n\n  /**\n   * Read the name of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {string|undefined} Name.\n   * @api\n   */\n  readName(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readNameFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readNameFromDocument(/** @type {Document} */ (source));\n    }\n    return this.readNameFromNode(/** @type {Element} */ (source));\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {string|undefined} Name.\n   */\n  readNameFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        const name = this.readNameFromNode(/** @type {Element} */ (n));\n        if (name) {\n          return name;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {string|undefined} Name.\n   */\n  readNameFromNode(node) {\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'name') {\n        return readString(n);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        (localName == 'Document' ||\n          localName == 'Folder' ||\n          localName == 'Placemark' ||\n          localName == 'kml')\n      ) {\n        const name = this.readNameFromNode(n);\n        if (name) {\n          return name;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Read the network links of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {Array<Object>} Network links.\n   * @api\n   */\n  readNetworkLinks(source) {\n    const networkLinks = [];\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      extend(networkLinks, this.readNetworkLinksFromDocument(doc));\n    } else if (isDocument(source)) {\n      extend(\n        networkLinks,\n        this.readNetworkLinksFromDocument(/** @type {Document} */ (source))\n      );\n    } else {\n      extend(\n        networkLinks,\n        this.readNetworkLinksFromNode(/** @type {Element} */ (source))\n      );\n    }\n    return networkLinks;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Array<Object>} Network links.\n   */\n  readNetworkLinksFromDocument(doc) {\n    const networkLinks = [];\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(\n          networkLinks,\n          this.readNetworkLinksFromNode(/** @type {Element} */ (n))\n        );\n      }\n    }\n    return networkLinks;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Array<Object>} Network links.\n   */\n  readNetworkLinksFromNode(node) {\n    const networkLinks = [];\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        n.localName == 'NetworkLink'\n      ) {\n        const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);\n        networkLinks.push(obj);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\n      ) {\n        extend(networkLinks, this.readNetworkLinksFromNode(n));\n      }\n    }\n    return networkLinks;\n  }\n\n  /**\n   * Read the regions of the KML.\n   *\n   * @param {Document|Element|string} source Source.\n   * @return {Array<Object>} Regions.\n   * @api\n   */\n  readRegion(source) {\n    const regions = [];\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      extend(regions, this.readRegionFromDocument(doc));\n    } else if (isDocument(source)) {\n      extend(\n        regions,\n        this.readRegionFromDocument(/** @type {Document} */ (source))\n      );\n    } else {\n      extend(regions, this.readRegionFromNode(/** @type {Element} */ (source)));\n    }\n    return regions;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Array<Object>} Region.\n   */\n  readRegionFromDocument(doc) {\n    const regions = [];\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(regions, this.readRegionFromNode(/** @type {Element} */ (n)));\n      }\n    }\n    return regions;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Array<Object>} Region.\n   * @api\n   */\n  readRegionFromNode(node) {\n    const regions = [];\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'Region') {\n        const obj = pushParseAndPop({}, REGION_PARSERS, n, []);\n        regions.push(obj);\n      }\n    }\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      const localName = n.localName;\n      if (\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\n      ) {\n        extend(regions, this.readRegionFromNode(n));\n      }\n    }\n    return regions;\n  }\n\n  /**\n   * Encode an array of features in the KML format as an XML node. GeometryCollections,\n   * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.\n   *\n   * @param {Array<Feature>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const kml = createElementNS(NAMESPACE_URIS[4], 'kml');\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\n    kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);\n    kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\n    kml.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATION\n    );\n\n    const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {\n        node: kml,\n      };\n    /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */\n    const properties = {};\n    if (features.length > 1) {\n      properties['Document'] = features;\n    } else if (features.length == 1) {\n      properties['Placemark'] = features[0];\n    }\n    const orderedKeys = KML_SEQUENCE[kml.namespaceURI];\n    const values = makeSequence(properties, orderedKeys);\n    pushSerializeAndPop(\n      context,\n      KML_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      [options],\n      orderedKeys,\n      this\n    );\n    return kml;\n  }\n}\n\n/**\n * @param {Style|undefined} foundStyle Style.\n * @param {string} name Name.\n * @return {Style} style Style.\n */\nfunction createNameStyleFunction(foundStyle, name) {\n  const textOffset = [0, 0];\n  /** @type {CanvasTextAlign} */\n  let textAlign = 'start';\n  const imageStyle = foundStyle.getImage();\n  if (imageStyle) {\n    const imageSize = imageStyle.getSize();\n    if (imageSize && imageSize.length == 2) {\n      const imageScale = imageStyle.getScaleArray();\n      const anchor = imageStyle.getAnchor();\n      // Offset the label to be centered to the right of the icon,\n      // if there is one.\n      textOffset[0] = imageScale[0] * (imageSize[0] - anchor[0]);\n      textOffset[1] = imageScale[1] * (imageSize[1] / 2 - anchor[1]);\n      textAlign = 'left';\n    }\n  }\n  let textStyle = foundStyle.getText();\n  if (textStyle) {\n    // clone the text style, customizing it with name, alignments and offset.\n    // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).\n    textStyle = textStyle.clone();\n    textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());\n    textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());\n    textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());\n    textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);\n  } else {\n    textStyle = DEFAULT_TEXT_STYLE.clone();\n  }\n  textStyle.setText(name);\n  textStyle.setOffsetX(textOffset[0]);\n  textStyle.setOffsetY(textOffset[1]);\n  textStyle.setTextAlign(textAlign);\n\n  const nameStyle = new Style({\n    image: imageStyle,\n    text: textStyle,\n  });\n  return nameStyle;\n}\n\n/**\n * @param {Array<Style>|undefined} style Style.\n * @param {string} styleUrl Style URL.\n * @param {Array<Style>} defaultStyle Default style.\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.\n * @param {boolean|undefined} showPointNames true to show names for point placemarks.\n * @return {import(\"../style/Style.js\").StyleFunction} Feature style function.\n */\nfunction createFeatureStyleFunction(\n  style,\n  styleUrl,\n  defaultStyle,\n  sharedStyles,\n  showPointNames\n) {\n  return (\n    /**\n     * @param {Feature} feature feature.\n     * @param {number} resolution Resolution.\n     * @return {Array<Style>|Style} Style.\n     */\n    function (feature, resolution) {\n      let drawName = showPointNames;\n      let name = '';\n      let multiGeometryPoints = [];\n      if (drawName) {\n        const geometry = feature.getGeometry();\n        if (geometry) {\n          if (geometry instanceof GeometryCollection) {\n            multiGeometryPoints = geometry\n              .getGeometriesArrayRecursive()\n              .filter(function (geometry) {\n                const type = geometry.getType();\n                return type === 'Point' || type === 'MultiPoint';\n              });\n            drawName = multiGeometryPoints.length > 0;\n          } else {\n            const type = geometry.getType();\n            drawName = type === 'Point' || type === 'MultiPoint';\n          }\n        }\n      }\n\n      if (drawName) {\n        name = /** @type {string} */ (feature.get('name'));\n        drawName = drawName && !!name;\n        // convert any html character codes\n        if (drawName && /&[^&]+;/.test(name)) {\n          if (!TEXTAREA) {\n            TEXTAREA = document.createElement('textarea');\n          }\n          TEXTAREA.innerHTML = name;\n          name = TEXTAREA.value;\n        }\n      }\n\n      let featureStyle = defaultStyle;\n      if (style) {\n        featureStyle = style;\n      } else if (styleUrl) {\n        featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);\n      }\n      if (drawName) {\n        const nameStyle = createNameStyleFunction(featureStyle[0], name);\n        if (multiGeometryPoints.length > 0) {\n          // in multigeometries restrict the name style to points and create a\n          // style without image or text for geometries requiring fill or stroke\n          // including any polygon specific style if there is one\n          nameStyle.setGeometry(new GeometryCollection(multiGeometryPoints));\n          const baseStyle = new Style({\n            geometry: featureStyle[0].getGeometry(),\n            image: null,\n            fill: featureStyle[0].getFill(),\n            stroke: featureStyle[0].getStroke(),\n            text: null,\n          });\n          return [nameStyle, baseStyle].concat(featureStyle.slice(1));\n        }\n        return nameStyle;\n      }\n      return featureStyle;\n    }\n  );\n}\n\n/**\n * @param {Array<Style>|string|undefined} styleValue Style value.\n * @param {Array<Style>} defaultStyle Default style.\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles\n * Shared styles.\n * @return {Array<Style>} Style.\n */\nfunction findStyle(styleValue, defaultStyle, sharedStyles) {\n  if (Array.isArray(styleValue)) {\n    return styleValue;\n  } else if (typeof styleValue === 'string') {\n    return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);\n  }\n  return defaultStyle;\n}\n\n/**\n * @param {Node} node Node.\n * @return {import(\"../color.js\").Color|undefined} Color.\n */\nfunction readColor(node) {\n  const s = getAllTextContent(node, false);\n  // The KML specification states that colors should not include a leading `#`\n  // but we tolerate them.\n  const m = /^\\s*#?\\s*([0-9A-Fa-f]{8})\\s*$/.exec(s);\n  if (m) {\n    const hexColor = m[1];\n    return [\n      parseInt(hexColor.substr(6, 2), 16),\n      parseInt(hexColor.substr(4, 2), 16),\n      parseInt(hexColor.substr(2, 2), 16),\n      parseInt(hexColor.substr(0, 2), 16) / 255,\n    ];\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {Array<number>|undefined} Flat coordinates.\n */\nexport function readFlatCoordinates(node) {\n  let s = getAllTextContent(node, false);\n  const flatCoordinates = [];\n  // The KML specification states that coordinate tuples should not include\n  // spaces, but we tolerate them.\n  s = s.replace(/\\s*,\\s*/g, ',');\n  const re =\n    /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?),([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|,|$)(?:([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|$))?\\s*/i;\n  let m;\n  while ((m = re.exec(s))) {\n    const x = parseFloat(m[1]);\n    const y = parseFloat(m[2]);\n    const z = m[3] ? parseFloat(m[3]) : 0;\n    flatCoordinates.push(x, y, z);\n    s = s.substr(m[0].length);\n  }\n  if (s !== '') {\n    return undefined;\n  }\n  return flatCoordinates;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string} URI.\n */\nfunction readURI(node) {\n  const s = getAllTextContent(node, false).trim();\n  let baseURI = node.baseURI;\n  if (!baseURI || baseURI == 'about:blank') {\n    baseURI = window.location.href;\n  }\n  if (baseURI) {\n    const url = new URL(s, baseURI);\n    return url.href;\n  }\n  return s;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string} URI.\n */\nfunction readStyleURL(node) {\n  // KML files in the wild occasionally forget the leading\n  // `#` on styleUrlsdefined in the same document.\n  const s = getAllTextContent(node, false)\n    .trim()\n    .replace(/^(?!.*#)/, '#');\n  let baseURI = node.baseURI;\n  if (!baseURI || baseURI == 'about:blank') {\n    baseURI = window.location.href;\n  }\n  if (baseURI) {\n    const url = new URL(s, baseURI);\n    return url.href;\n  }\n  return s;\n}\n\n/**\n * @param {Element} node Node.\n * @return {Vec2} Vec2.\n */\nfunction readVec2(node) {\n  const xunits = node.getAttribute('xunits');\n  const yunits = node.getAttribute('yunits');\n  /** @type {import('../style/Icon.js').IconOrigin} */\n  let origin;\n  if (xunits !== 'insetPixels') {\n    if (yunits !== 'insetPixels') {\n      origin = 'bottom-left';\n    } else {\n      origin = 'top-left';\n    }\n  } else {\n    if (yunits !== 'insetPixels') {\n      origin = 'bottom-right';\n    } else {\n      origin = 'top-right';\n    }\n  }\n  return {\n    x: parseFloat(node.getAttribute('x')),\n    xunits: ICON_ANCHOR_UNITS_MAP[xunits],\n    y: parseFloat(node.getAttribute('y')),\n    yunits: ICON_ANCHOR_UNITS_MAP[yunits],\n    origin: origin,\n  };\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Scale.\n */\nfunction readScale(node) {\n  return readDecimal(node);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_MAP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Pair': pairDataParser,\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<Style>|string|undefined} StyleMap.\n */\nfunction readStyleMapValue(node, objectStack) {\n  return pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ICON_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Icon': makeObjectPropertySetter(readIcon),\n  'color': makeObjectPropertySetter(readColor),\n  'heading': makeObjectPropertySetter(readDecimal),\n  'hotSpot': makeObjectPropertySetter(readVec2),\n  'scale': makeObjectPropertySetter(readScale),\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction iconStyleParser(node, objectStack) {\n  // FIXME refreshMode\n  // FIXME refreshInterval\n  // FIXME viewRefreshTime\n  // FIXME viewBoundScale\n  // FIXME viewFormat\n  // FIXME httpQuery\n  const object = pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = /** @type {Object} */ (\n    objectStack[objectStack.length - 1]\n  );\n  const IconObject = 'Icon' in object ? object['Icon'] : {};\n  const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;\n  let src;\n  const href = /** @type {string|undefined} */ (IconObject['href']);\n  if (href) {\n    src = href;\n  } else if (drawIcon) {\n    src = DEFAULT_IMAGE_STYLE_SRC;\n  }\n  let anchor, anchorXUnits, anchorYUnits;\n  /** @type {import('../style/Icon.js').IconOrigin|undefined} */\n  let anchorOrigin = 'bottom-left';\n  const hotSpot = /** @type {Vec2|undefined} */ (object['hotSpot']);\n  if (hotSpot) {\n    anchor = [hotSpot.x, hotSpot.y];\n    anchorXUnits = hotSpot.xunits;\n    anchorYUnits = hotSpot.yunits;\n    anchorOrigin = hotSpot.origin;\n  } else if (/^https?:\\/\\/maps\\.(?:google|gstatic)\\.com\\//.test(src)) {\n    // Google hotspots from https://kml4earth.appspot.com/icons.html#notes\n    if (src.includes('pushpin')) {\n      anchor = DEFAULT_IMAGE_STYLE_ANCHOR;\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    } else if (src.includes('arrow-reverse')) {\n      anchor = [54, 42];\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    } else if (src.includes('paddle')) {\n      anchor = [32, 1];\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\n    }\n  }\n\n  let offset;\n  const x = /** @type {number|undefined} */ (IconObject['x']);\n  const y = /** @type {number|undefined} */ (IconObject['y']);\n  if (x !== undefined && y !== undefined) {\n    offset = [x, y];\n  }\n\n  let size;\n  const w = /** @type {number|undefined} */ (IconObject['w']);\n  const h = /** @type {number|undefined} */ (IconObject['h']);\n  if (w !== undefined && h !== undefined) {\n    size = [w, h];\n  }\n\n  let rotation;\n  const heading = /** @type {number} */ (object['heading']);\n  if (heading !== undefined) {\n    rotation = toRadians(heading);\n  }\n\n  const scale = /** @type {number|undefined} */ (object['scale']);\n\n  const color = /** @type {Array<number>|undefined} */ (object['color']);\n\n  if (drawIcon) {\n    if (src == DEFAULT_IMAGE_STYLE_SRC) {\n      size = DEFAULT_IMAGE_STYLE_SIZE;\n    }\n\n    const imageStyle = new Icon({\n      anchor: anchor,\n      anchorOrigin: anchorOrigin,\n      anchorXUnits: anchorXUnits,\n      anchorYUnits: anchorYUnits,\n      crossOrigin: this.crossOrigin_,\n      offset: offset,\n      offsetOrigin: 'bottom-left',\n      rotation: rotation,\n      scale: scale,\n      size: size,\n      src: this.iconUrlFunction_(src),\n      color: color,\n    });\n\n    const imageScale = imageStyle.getScaleArray()[0];\n    const imageSize = imageStyle.getSize();\n    if (imageSize === null) {\n      const imageState = imageStyle.getImageState();\n      if (imageState === ImageState.IDLE || imageState === ImageState.LOADING) {\n        const listener = function () {\n          const imageState = imageStyle.getImageState();\n          if (\n            !(\n              imageState === ImageState.IDLE ||\n              imageState === ImageState.LOADING\n            )\n          ) {\n            const imageSize = imageStyle.getSize();\n            if (imageSize && imageSize.length == 2) {\n              const resizeScale = scaleForSize(imageSize);\n              imageStyle.setScale(imageScale * resizeScale);\n            }\n            imageStyle.unlistenImageChange(listener);\n          }\n        };\n        imageStyle.listenImageChange(listener);\n        if (imageState === ImageState.IDLE) {\n          imageStyle.load();\n        }\n      }\n    } else if (imageSize.length == 2) {\n      const resizeScale = scaleForSize(imageSize);\n      imageStyle.setScale(imageScale * resizeScale);\n    }\n    styleObject['imageStyle'] = imageStyle;\n  } else {\n    // handle the case when we explicitly want to draw no icon.\n    styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'scale': makeObjectPropertySetter(readScale),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction labelStyleParser(node, objectStack) {\n  // FIXME colorMode\n  const object = pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const textStyle = new Text({\n    fill: new Fill({\n      color:\n        /** @type {import(\"../color.js\").Color} */\n        ('color' in object ? object['color'] : DEFAULT_COLOR),\n    }),\n    scale: /** @type {number|undefined} */ (object['scale']),\n  });\n  styleObject['textStyle'] = textStyle;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LINE_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'width': makeObjectPropertySetter(readDecimal),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction lineStyleParser(node, objectStack) {\n  // FIXME colorMode\n  // FIXME gx:outerColor\n  // FIXME gx:outerWidth\n  // FIXME gx:physicalWidth\n  // FIXME gx:labelVisibility\n  const object = pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const strokeStyle = new Stroke({\n    color:\n      /** @type {import(\"../color.js\").Color} */\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\n    width: /** @type {number} */ ('width' in object ? object['width'] : 1),\n  });\n  styleObject['strokeStyle'] = strokeStyle;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst POLY_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeObjectPropertySetter(readColor),\n  'fill': makeObjectPropertySetter(readBoolean),\n  'outline': makeObjectPropertySetter(readBoolean),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction polyStyleParser(node, objectStack) {\n  // FIXME colorMode\n  const object = pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const styleObject = objectStack[objectStack.length - 1];\n  const fillStyle = new Fill({\n    color:\n      /** @type {import(\"../color.js\").Color} */\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\n  });\n  styleObject['fillStyle'] = fillStyle;\n  const fill = /** @type {boolean|undefined} */ (object['fill']);\n  if (fill !== undefined) {\n    styleObject['fill'] = fill;\n  }\n  const outline = /** @type {boolean|undefined} */ (object['outline']);\n  if (outline !== undefined) {\n    styleObject['outline'] = outline;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst FLAT_LINEAR_RING_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'coordinates': makeReplacer(readFlatCoordinates),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<number>} LinearRing flat coordinates.\n */\nfunction readFlatLinearRing(node, objectStack) {\n  return pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction gxCoordParser(node, objectStack) {\n  const gxTrackObject =\n    /** @type {GxTrackObject} */\n    (objectStack[objectStack.length - 1]);\n  const coordinates = gxTrackObject.coordinates;\n  const s = getAllTextContent(node, false);\n  const re =\n    /^\\s*([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s*$/i;\n  const m = re.exec(s);\n  if (m) {\n    const x = parseFloat(m[1]);\n    const y = parseFloat(m[2]);\n    const z = parseFloat(m[3]);\n    coordinates.push([x, y, z]);\n  } else {\n    coordinates.push([]);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(GX_NAMESPACE_URIS, {\n  'Track': makeArrayPusher(readGxTrack),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {MultiLineString|undefined} MultiLineString.\n */\nfunction readGxMultiTrack(node, objectStack) {\n  const lineStrings = pushParseAndPop(\n    [],\n    GX_MULTITRACK_GEOMETRY_PARSERS,\n    node,\n    objectStack\n  );\n  if (!lineStrings) {\n    return undefined;\n  }\n  return new MultiLineString(lineStrings);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GX_TRACK_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'when': whenParser,\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'coord': gxCoordParser,\n  })\n);\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {LineString|undefined} LineString.\n */\nfunction readGxTrack(node, objectStack) {\n  const gxTrackObject = pushParseAndPop(\n    /** @type {GxTrackObject} */ ({\n      coordinates: [],\n      whens: [],\n    }),\n    GX_TRACK_PARSERS,\n    node,\n    objectStack\n  );\n  if (!gxTrackObject) {\n    return undefined;\n  }\n  const flatCoordinates = [];\n  const coordinates = gxTrackObject.coordinates;\n  const whens = gxTrackObject.whens;\n  for (\n    let i = 0, ii = Math.min(coordinates.length, whens.length);\n    i < ii;\n    ++i\n  ) {\n    if (coordinates[i].length == 3) {\n      flatCoordinates.push(\n        coordinates[i][0],\n        coordinates[i][1],\n        coordinates[i][2],\n        whens[i]\n      );\n    }\n  }\n  return new LineString(flatCoordinates, 'XYZM');\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ICON_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'href': makeObjectPropertySetter(readURI),\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'x': makeObjectPropertySetter(readDecimal),\n    'y': makeObjectPropertySetter(readDecimal),\n    'w': makeObjectPropertySetter(readDecimal),\n    'h': makeObjectPropertySetter(readDecimal),\n  })\n);\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object} Icon object.\n */\nfunction readIcon(node, objectStack) {\n  const iconObject = pushParseAndPop({}, ICON_PARSERS, node, objectStack);\n  if (iconObject) {\n    return iconObject;\n  }\n  return null;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'coordinates': makeReplacer(readFlatCoordinates),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<number>} Flat coordinates.\n */\nfunction readFlatCoordinatesFromNode(node, objectStack) {\n  return pushParseAndPop(\n    null,\n    GEOMETRY_FLAT_COORDINATES_PARSERS,\n    node,\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'extrude': makeObjectPropertySetter(readBoolean),\n  'tessellate': makeObjectPropertySetter(readBoolean),\n  'altitudeMode': makeObjectPropertySetter(readString),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {LineString|undefined} LineString.\n */\nfunction readLineString(node, objectStack) {\n  const properties = pushParseAndPop(\n    {},\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const lineString = new LineString(flatCoordinates, 'XYZ');\n    lineString.setProperties(properties, true);\n    return lineString;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Polygon|undefined} Polygon.\n */\nfunction readLinearRing(node, objectStack) {\n  const properties = pushParseAndPop(\n    {},\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const polygon = new Polygon(flatCoordinates, 'XYZ', [\n      flatCoordinates.length,\n    ]);\n    polygon.setProperties(properties, true);\n    return polygon;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst MULTI_GEOMETRY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LineString': makeArrayPusher(readLineString),\n  'LinearRing': makeArrayPusher(readLinearRing),\n  'MultiGeometry': makeArrayPusher(readMultiGeometry),\n  'Point': makeArrayPusher(readPoint),\n  'Polygon': makeArrayPusher(readPolygon),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readMultiGeometry(node, objectStack) {\n  const geometries = pushParseAndPop(\n    [],\n    MULTI_GEOMETRY_PARSERS,\n    node,\n    objectStack\n  );\n  if (!geometries) {\n    return null;\n  }\n  if (geometries.length === 0) {\n    return new GeometryCollection(geometries);\n  }\n  let multiGeometry;\n  let homogeneous = true;\n  const type = geometries[0].getType();\n  let geometry;\n  for (let i = 1, ii = geometries.length; i < ii; ++i) {\n    geometry = geometries[i];\n    if (geometry.getType() != type) {\n      homogeneous = false;\n      break;\n    }\n  }\n  if (homogeneous) {\n    let layout;\n    let flatCoordinates;\n    if (type == 'Point') {\n      const point = geometries[0];\n      layout = point.getLayout();\n      flatCoordinates = point.getFlatCoordinates();\n      for (let i = 1, ii = geometries.length; i < ii; ++i) {\n        geometry = geometries[i];\n        extend(flatCoordinates, geometry.getFlatCoordinates());\n      }\n      multiGeometry = new MultiPoint(flatCoordinates, layout);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'LineString') {\n      multiGeometry = new MultiLineString(geometries);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'Polygon') {\n      multiGeometry = new MultiPolygon(geometries);\n      setCommonGeometryProperties(multiGeometry, geometries);\n    } else if (type == 'GeometryCollection') {\n      multiGeometry = new GeometryCollection(geometries);\n    } else {\n      assert(false, 37); // Unknown geometry type found\n    }\n  } else {\n    multiGeometry = new GeometryCollection(geometries);\n  }\n  return /** @type {import(\"../geom/Geometry.js\").default} */ (multiGeometry);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Point|undefined} Point.\n */\nfunction readPoint(node, objectStack) {\n  const properties = pushParseAndPop(\n    {},\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\n  if (flatCoordinates) {\n    const point = new Point(flatCoordinates, 'XYZ');\n    point.setProperties(properties, true);\n    return point;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'innerBoundaryIs': innerBoundaryIsParser,\n  'outerBoundaryIs': outerBoundaryIsParser,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Polygon|undefined} Polygon.\n */\nfunction readPolygon(node, objectStack) {\n  const properties = pushParseAndPop(\n    /** @type {Object<string,*>} */ ({}),\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\n    node,\n    objectStack\n  );\n  const flatLinearRings = pushParseAndPop(\n    [null],\n    FLAT_LINEAR_RINGS_PARSERS,\n    node,\n    objectStack\n  );\n  if (flatLinearRings && flatLinearRings[0]) {\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    const polygon = new Polygon(flatCoordinates, 'XYZ', ends);\n    polygon.setProperties(properties, true);\n    return polygon;\n  }\n  return undefined;\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'IconStyle': iconStyleParser,\n  'LabelStyle': labelStyleParser,\n  'LineStyle': lineStyleParser,\n  'PolyStyle': polyStyleParser,\n});\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<Style>} Style.\n */\nfunction readStyle(node, objectStack) {\n  const styleObject = pushParseAndPop(\n    {},\n    STYLE_PARSERS,\n    node,\n    objectStack,\n    this\n  );\n  if (!styleObject) {\n    return null;\n  }\n  let fillStyle =\n    /** @type {Fill} */\n    (\n      'fillStyle' in styleObject ? styleObject['fillStyle'] : DEFAULT_FILL_STYLE\n    );\n  const fill = /** @type {boolean|undefined} */ (styleObject['fill']);\n  if (fill !== undefined && !fill) {\n    fillStyle = null;\n  }\n  let imageStyle;\n  if ('imageStyle' in styleObject) {\n    if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {\n      imageStyle = /** @type {import(\"../style/Image.js\").default} */ (\n        styleObject['imageStyle']\n      );\n    }\n  } else {\n    imageStyle = DEFAULT_IMAGE_STYLE;\n  }\n  const textStyle =\n    /** @type {Text} */\n    (\n      'textStyle' in styleObject ? styleObject['textStyle'] : DEFAULT_TEXT_STYLE\n    );\n  const strokeStyle =\n    /** @type {Stroke} */\n    (\n      'strokeStyle' in styleObject\n        ? styleObject['strokeStyle']\n        : DEFAULT_STROKE_STYLE\n    );\n  const outline = /** @type {boolean|undefined} */ (styleObject['outline']);\n  if (outline !== undefined && !outline) {\n    // if the polystyle specifies no outline two styles are needed,\n    // one for non-polygon geometries where linestrings require a stroke\n    // and one for polygons where there should be no stroke\n    return [\n      new Style({\n        geometry: function (feature) {\n          const geometry = feature.getGeometry();\n          const type = geometry.getType();\n          if (type === 'GeometryCollection') {\n            const collection =\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\n                geometry\n              );\n            return new GeometryCollection(\n              collection\n                .getGeometriesArrayRecursive()\n                .filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type !== 'Polygon' && type !== 'MultiPolygon';\n                })\n            );\n          } else if (type !== 'Polygon' && type !== 'MultiPolygon') {\n            return geometry;\n          }\n        },\n        fill: fillStyle,\n        image: imageStyle,\n        stroke: strokeStyle,\n        text: textStyle,\n        zIndex: undefined, // FIXME\n      }),\n      new Style({\n        geometry: function (feature) {\n          const geometry = feature.getGeometry();\n          const type = geometry.getType();\n          if (type === 'GeometryCollection') {\n            const collection =\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\n                geometry\n              );\n            return new GeometryCollection(\n              collection\n                .getGeometriesArrayRecursive()\n                .filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type === 'Polygon' || type === 'MultiPolygon';\n                })\n            );\n          } else if (type === 'Polygon' || type === 'MultiPolygon') {\n            return geometry;\n          }\n        },\n        fill: fillStyle,\n        stroke: null,\n        zIndex: undefined, // FIXME\n      }),\n    ];\n  }\n  return [\n    new Style({\n      fill: fillStyle,\n      image: imageStyle,\n      stroke: strokeStyle,\n      text: textStyle,\n      zIndex: undefined, // FIXME\n    }),\n  ];\n}\n\n/**\n * Reads an array of geometries and creates arrays for common geometry\n * properties. Then sets them to the multi geometry.\n * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.\n * @param {Array<import(\"../geom/Geometry.js\").default>} geometries List of geometries.\n */\nfunction setCommonGeometryProperties(multiGeometry, geometries) {\n  const ii = geometries.length;\n  const extrudes = new Array(geometries.length);\n  const tessellates = new Array(geometries.length);\n  const altitudeModes = new Array(geometries.length);\n  let hasExtrude, hasTessellate, hasAltitudeMode;\n  hasExtrude = false;\n  hasTessellate = false;\n  hasAltitudeMode = false;\n  for (let i = 0; i < ii; ++i) {\n    const geometry = geometries[i];\n    extrudes[i] = geometry.get('extrude');\n    tessellates[i] = geometry.get('tessellate');\n    altitudeModes[i] = geometry.get('altitudeMode');\n    hasExtrude = hasExtrude || extrudes[i] !== undefined;\n    hasTessellate = hasTessellate || tessellates[i] !== undefined;\n    hasAltitudeMode = hasAltitudeMode || altitudeModes[i];\n  }\n  if (hasExtrude) {\n    multiGeometry.set('extrude', extrudes);\n  }\n  if (hasTessellate) {\n    multiGeometry.set('tessellate', tessellates);\n  }\n  if (hasAltitudeMode) {\n    multiGeometry.set('altitudeMode', altitudeModes);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'displayName': makeObjectPropertySetter(readString),\n  'value': makeObjectPropertySetter(readString),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction dataParser(node, objectStack) {\n  const name = node.getAttribute('name');\n  parseNode(DATA_PARSERS, node, objectStack);\n  const featureObject = /** @type {Object} */ (\n    objectStack[objectStack.length - 1]\n  );\n  if (name && featureObject.displayName) {\n    featureObject[name] = {\n      value: featureObject.value,\n      displayName: featureObject.displayName,\n      toString: function () {\n        return featureObject.value;\n      },\n    };\n  } else if (name !== null) {\n    featureObject[name] = featureObject.value;\n  } else if (featureObject.displayName !== null) {\n    featureObject[featureObject.displayName] = featureObject.value;\n  }\n  delete featureObject['value'];\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst EXTENDED_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Data': dataParser,\n  'SchemaData': schemaDataParser,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction extendedDataParser(node, objectStack) {\n  parseNode(EXTENDED_DATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction regionParser(node, objectStack) {\n  parseNode(REGION_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PAIR_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Style': makeObjectPropertySetter(readStyle),\n  'key': makeObjectPropertySetter(readString),\n  'styleUrl': makeObjectPropertySetter(readStyleURL),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction pairDataParser(node, objectStack) {\n  const pairObject = pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);\n  if (!pairObject) {\n    return;\n  }\n  const key = /** @type {string|undefined} */ (pairObject['key']);\n  if (key && key == 'normal') {\n    const styleUrl = /** @type {string|undefined} */ (pairObject['styleUrl']);\n    if (styleUrl) {\n      objectStack[objectStack.length - 1] = styleUrl;\n    }\n    const style = /** @type {Style} */ (pairObject['Style']);\n    if (style) {\n      objectStack[objectStack.length - 1] = style;\n    }\n  }\n}\n\n/**\n * @this {KML}\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction placemarkStyleMapParser(node, objectStack) {\n  const styleMapValue = readStyleMapValue.call(this, node, objectStack);\n  if (!styleMapValue) {\n    return;\n  }\n  const placemarkObject = objectStack[objectStack.length - 1];\n  if (Array.isArray(styleMapValue)) {\n    placemarkObject['Style'] = styleMapValue;\n  } else if (typeof styleMapValue === 'string') {\n    placemarkObject['styleUrl'] = styleMapValue;\n  } else {\n    assert(false, 38); // `styleMapValue` has an unknown type\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SCHEMA_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'SimpleData': simpleDataParser,\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction schemaDataParser(node, objectStack) {\n  parseNode(SCHEMA_DATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction simpleDataParser(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (name !== null) {\n    const data = readString(node);\n    const featureObject = /** @type {Object} */ (\n      objectStack[objectStack.length - 1]\n    );\n    featureObject[name] = data;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LAT_LON_ALT_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'altitudeMode': makeObjectPropertySetter(readString),\n  'minAltitude': makeObjectPropertySetter(readDecimal),\n  'maxAltitude': makeObjectPropertySetter(readDecimal),\n  'north': makeObjectPropertySetter(readDecimal),\n  'south': makeObjectPropertySetter(readDecimal),\n  'east': makeObjectPropertySetter(readDecimal),\n  'west': makeObjectPropertySetter(readDecimal),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction latLonAltBoxParser(node, objectStack) {\n  const object = pushParseAndPop(\n    {},\n    LAT_LON_ALT_BOX_PARSERS,\n    node,\n    objectStack\n  );\n  if (!object) {\n    return;\n  }\n  const regionObject = /** @type {Object} */ (\n    objectStack[objectStack.length - 1]\n  );\n  const extent = [\n    parseFloat(object['west']),\n    parseFloat(object['south']),\n    parseFloat(object['east']),\n    parseFloat(object['north']),\n  ];\n  regionObject['extent'] = extent;\n  regionObject['altitudeMode'] = object['altitudeMode'];\n  regionObject['minAltitude'] = parseFloat(object['minAltitude']);\n  regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'minLodPixels': makeObjectPropertySetter(readDecimal),\n  'maxLodPixels': makeObjectPropertySetter(readDecimal),\n  'minFadeExtent': makeObjectPropertySetter(readDecimal),\n  'maxFadeExtent': makeObjectPropertySetter(readDecimal),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction lodParser(node, objectStack) {\n  const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);\n  if (!object) {\n    return;\n  }\n  const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);\n  lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);\n  lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);\n  lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst INNER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  // KML spec only allows one LinearRing  per innerBoundaryIs, but Google Earth\n  // allows multiple, so we parse multiple here too.\n  'LinearRing': makeArrayPusher(readFlatLinearRing),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction innerBoundaryIsParser(node, objectStack) {\n  const innerBoundaryFlatLinearRings = pushParseAndPop(\n    /** @type {Array<Array<number>>} */ ([]),\n    INNER_BOUNDARY_IS_PARSERS,\n    node,\n    objectStack\n  );\n  if (innerBoundaryFlatLinearRings.length > 0) {\n    const flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(...innerBoundaryFlatLinearRings);\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'LinearRing': makeReplacer(readFlatLinearRing),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction outerBoundaryIsParser(node, objectStack) {\n  /** @type {Array<number>|undefined} */\n  const flatLinearRing = pushParseAndPop(\n    undefined,\n    OUTER_BOUNDARY_IS_PARSERS,\n    node,\n    objectStack\n  );\n  if (flatLinearRing) {\n    const flatLinearRings =\n      /** @type {Array<Array<number>>} */\n      (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction linkParser(node, objectStack) {\n  parseNode(LINK_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction whenParser(node, objectStack) {\n  const gxTrackObject =\n    /** @type {GxTrackObject} */\n    (objectStack[objectStack.length - 1]);\n  const whens = gxTrackObject.whens;\n  const s = getAllTextContent(node, false);\n  const when = Date.parse(s);\n  whens.push(isNaN(when) ? 0 : when);\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the color to.\n * @param {import(\"../color.js\").Color|string} color Color.\n */\nfunction writeColorTextNode(node, color) {\n  const rgba = asArray(color);\n  const opacity = rgba.length == 4 ? rgba[3] : 1;\n  /** @type {Array<string|number>} */\n  const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];\n  for (let i = 0; i < 4; ++i) {\n    const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);\n    abgr[i] = hex.length == 1 ? '0' + hex : hex;\n  }\n  writeStringTextNode(node, abgr.join(''));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the coordinates to.\n * @param {Array<number>} coordinates Coordinates.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeCoordinatesTextNode(node, coordinates, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n\n  const layout = context['layout'];\n  const stride = context['stride'];\n\n  let dimension;\n  if (layout == 'XY' || layout == 'XYM') {\n    dimension = 2;\n  } else if (layout == 'XYZ' || layout == 'XYZM') {\n    dimension = 3;\n  } else {\n    assert(false, 34); // Invalid geometry layout\n  }\n\n  const ii = coordinates.length;\n  let text = '';\n  if (ii > 0) {\n    text += coordinates[0];\n    for (let d = 1; d < dimension; ++d) {\n      text += ',' + coordinates[d];\n    }\n    for (let i = stride; i < ii; i += stride) {\n      text += ' ' + coordinates[i];\n      for (let d = 1; d < dimension; ++d) {\n        text += ',' + coordinates[i + d];\n      }\n    }\n  }\n  writeStringTextNode(node, text);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Data': makeChildAppender(writeDataNode),\n  'value': makeChildAppender(writeDataNodeValue),\n  'displayName': makeChildAppender(writeDataNodeName),\n});\n\n/**\n * @param {Element} node Node.\n * @param {{name: *, value: *}} pair Name value pair.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeDataNode(node, pair, objectStack) {\n  node.setAttribute('name', pair.name);\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const value = pair.value;\n\n  if (typeof value == 'object') {\n    if (value !== null && value.displayName) {\n      pushSerializeAndPop(\n        context,\n        EXTENDEDDATA_NODE_SERIALIZERS,\n        OBJECT_PROPERTY_NODE_FACTORY,\n        [value.displayName],\n        objectStack,\n        ['displayName']\n      );\n    }\n\n    if (value !== null && value.value) {\n      pushSerializeAndPop(\n        context,\n        EXTENDEDDATA_NODE_SERIALIZERS,\n        OBJECT_PROPERTY_NODE_FACTORY,\n        [value.value],\n        objectStack,\n        ['value']\n      );\n    }\n  } else {\n    pushSerializeAndPop(\n      context,\n      EXTENDEDDATA_NODE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      [value],\n      objectStack,\n      ['value']\n    );\n  }\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the name to.\n * @param {string} name DisplayName.\n */\nfunction writeDataNodeName(node, name) {\n  writeCDATASection(node, name);\n}\n\n/**\n * @param {Node} node Node to append a CDATA Section with the value to.\n * @param {string} value Value.\n */\nfunction writeDataNodeValue(node, value) {\n  writeStringTextNode(node, value);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst DOCUMENT_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Placemark': makeChildAppender(writePlacemark),\n});\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst DOCUMENT_NODE_FACTORY = function (value, objectStack, nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return createElementNS(parentNode.namespaceURI, 'Placemark');\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<Feature>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @this {KML}\n */\nfunction writeDocument(node, features, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  pushSerializeAndPop(\n    context,\n    DOCUMENT_SERIALIZERS,\n    DOCUMENT_NODE_FACTORY,\n    features,\n    objectStack,\n    undefined,\n    this\n  );\n}\n\n/**\n * A factory for creating Data nodes.\n * @const\n * @type {function(*, Array<*>): (Node|undefined)}\n */\nconst DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');\n\n/**\n * @param {Element} node Node.\n * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeExtendedData(node, namesAndValues, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const names = namesAndValues.names;\n  const values = namesAndValues.values;\n  const length = names.length;\n\n  for (let i = 0; i < length; i++) {\n    pushSerializeAndPop(\n      context,\n      EXTENDEDDATA_NODE_SERIALIZERS,\n      DATA_NODE_FACTORY,\n      [{name: names[i], value: values[i]}],\n      objectStack\n    );\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst ICON_SEQUENCE = makeStructureNS(\n  NAMESPACE_URIS,\n  ['href'],\n  makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h'])\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst ICON_SERIALIZERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'href': makeChildAppender(writeStringTextNode),\n  },\n  makeStructureNS(GX_NAMESPACE_URIS, {\n    'x': makeChildAppender(writeDecimalTextNode),\n    'y': makeChildAppender(writeDecimalTextNode),\n    'w': makeChildAppender(writeDecimalTextNode),\n    'h': makeChildAppender(writeDecimalTextNode),\n  })\n);\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst GX_NODE_FACTORY = function (value, objectStack, nodeName) {\n  return createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + nodeName);\n};\n\n/**\n * @param {Element} node Node.\n * @param {Object} icon Icon object.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeIcon(node, icon, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const parentNode = objectStack[objectStack.length - 1].node;\n  let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];\n  let values = makeSequence(icon, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    ICON_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n  orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];\n  values = makeSequence(icon, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    ICON_SERIALIZERS,\n    GX_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst ICON_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'scale',\n  'heading',\n  'Icon',\n  'color',\n  'hotSpot',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst ICON_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'Icon': makeChildAppender(writeIcon),\n  'color': makeChildAppender(writeColorTextNode),\n  'heading': makeChildAppender(writeDecimalTextNode),\n  'hotSpot': makeChildAppender(writeVec2),\n  'scale': makeChildAppender(writeScaleTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../style/Icon.js\").default} style Icon style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeIconStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const /** @type {Object<string, any>} */ properties = {};\n  const src = style.getSrc();\n  const size = style.getSize();\n  const iconImageSize = style.getImageSize();\n  const iconProperties = {\n    'href': src,\n  };\n\n  if (size) {\n    iconProperties['w'] = size[0];\n    iconProperties['h'] = size[1];\n    const anchor = style.getAnchor(); // top-left\n    const origin = style.getOrigin(); // top-left\n\n    if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {\n      iconProperties['x'] = origin[0];\n      iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);\n    }\n\n    if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {\n      const /** @type {Vec2} */ hotSpot = {\n          x: anchor[0],\n          xunits: 'pixels',\n          y: size[1] - anchor[1],\n          yunits: 'pixels',\n        };\n      properties['hotSpot'] = hotSpot;\n    }\n  }\n\n  properties['Icon'] = iconProperties;\n\n  let scale = style.getScaleArray()[0];\n  let imageSize = size;\n  if (imageSize === null) {\n    imageSize = DEFAULT_IMAGE_STYLE_SIZE;\n  }\n  if (imageSize.length == 2) {\n    const resizeScale = scaleForSize(imageSize);\n    scale = scale / resizeScale;\n  }\n  if (scale !== 1) {\n    properties['scale'] = scale;\n  }\n\n  const rotation = style.getRotation();\n  if (rotation !== 0) {\n    properties['heading'] = rotation; // 0-360\n  }\n\n  const color = style.getColor();\n  if (color) {\n    properties['color'] = color;\n  }\n\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    ICON_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'color',\n  'scale',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LABEL_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'scale': makeChildAppender(writeScaleTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Text} style style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeLabelStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const properties = {};\n  const fill = style.getFill();\n  if (fill) {\n    properties['color'] = fill.getColor();\n  }\n  const scale = style.getScale();\n  if (scale && scale !== 1) {\n    properties['scale'] = scale;\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    LABEL_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst LINE_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'width']);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst LINE_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'width': makeChildAppender(writeDecimalTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Stroke} style style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeLineStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const properties = {\n    'color': style.getColor(),\n    'width': Number(style.getWidth()) || 1,\n  };\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    LINE_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst GEOMETRY_TYPE_TO_NODENAME = {\n  'Point': 'Point',\n  'LineString': 'LineString',\n  'LinearRing': 'LinearRing',\n  'Polygon': 'Polygon',\n  'MultiPoint': 'MultiGeometry',\n  'MultiLineString': 'MultiGeometry',\n  'MultiPolygon': 'MultiGeometry',\n  'GeometryCollection': 'MultiGeometry',\n};\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array<*>} objectStack Object stack.\n * @param {string} [nodeName] Node name.\n * @return {Node|undefined} Node.\n */\nconst GEOMETRY_NODE_FACTORY = function (value, objectStack, nodeName) {\n  if (value) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      parentNode.namespaceURI,\n      GEOMETRY_TYPE_TO_NODENAME[\n        /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType()\n      ]\n    );\n  }\n};\n\n/**\n * A factory for creating Point nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');\n\n/**\n * A factory for creating LineString nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');\n\n/**\n * A factory for creating LinearRing nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');\n\n/**\n * A factory for creating Polygon nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'LineString': makeChildAppender(writePrimitiveGeometry),\n  'Point': makeChildAppender(writePrimitiveGeometry),\n  'Polygon': makeChildAppender(writePolygon),\n  'GeometryCollection': makeChildAppender(writeMultiGeometry),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeMultiGeometry(node, geometry, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const context = {node: node};\n  const type = geometry.getType();\n  /** @type {Array<import(\"../geom/Geometry.js\").default>} */\n  let geometries = [];\n  /** @type {function(*, Array<*>, string=): (Node|undefined)} */\n  let factory;\n  if (type === 'GeometryCollection') {\n    /** @type {GeometryCollection} */ (geometry)\n      .getGeometriesArrayRecursive()\n      .forEach(function (geometry) {\n        const type = geometry.getType();\n        if (type === 'MultiPoint') {\n          geometries = geometries.concat(\n            /** @type {MultiPoint} */ (geometry).getPoints()\n          );\n        } else if (type === 'MultiLineString') {\n          geometries = geometries.concat(\n            /** @type {MultiLineString} */ (geometry).getLineStrings()\n          );\n        } else if (type === 'MultiPolygon') {\n          geometries = geometries.concat(\n            /** @type {MultiPolygon} */ (geometry).getPolygons()\n          );\n        } else if (\n          type === 'Point' ||\n          type === 'LineString' ||\n          type === 'Polygon'\n        ) {\n          geometries.push(geometry);\n        } else {\n          assert(false, 39); // Unknown geometry type\n        }\n      });\n    factory = GEOMETRY_NODE_FACTORY;\n  } else if (type === 'MultiPoint') {\n    geometries = /** @type {MultiPoint} */ (geometry).getPoints();\n    factory = POINT_NODE_FACTORY;\n  } else if (type === 'MultiLineString') {\n    geometries = /** @type {MultiLineString} */ (geometry).getLineStrings();\n    factory = LINE_STRING_NODE_FACTORY;\n  } else if (type === 'MultiPolygon') {\n    geometries = /** @type {MultiPolygon} */ (geometry).getPolygons();\n    factory = POLYGON_NODE_FACTORY;\n  } else {\n    assert(false, 39); // Unknown geometry type\n  }\n  pushSerializeAndPop(\n    context,\n    MULTI_GEOMETRY_SERIALIZERS,\n    factory,\n    geometries,\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst BOUNDARY_IS_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/LinearRing.js\").default} linearRing Linear ring.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeBoundaryIs(node, linearRing, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  pushSerializeAndPop(\n    context,\n    BOUNDARY_IS_SERIALIZERS,\n    LINEAR_RING_NODE_FACTORY,\n    [linearRing],\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst PLACEMARK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'ExtendedData': makeChildAppender(writeExtendedData),\n  'MultiGeometry': makeChildAppender(writeMultiGeometry),\n  'LineString': makeChildAppender(writePrimitiveGeometry),\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\n  'Point': makeChildAppender(writePrimitiveGeometry),\n  'Polygon': makeChildAppender(writePolygon),\n  'Style': makeChildAppender(writeStyle),\n  'address': makeChildAppender(writeStringTextNode),\n  'description': makeChildAppender(writeStringTextNode),\n  'name': makeChildAppender(writeStringTextNode),\n  'open': makeChildAppender(writeBooleanTextNode),\n  'phoneNumber': makeChildAppender(writeStringTextNode),\n  'styleUrl': makeChildAppender(writeStringTextNode),\n  'visibility': makeChildAppender(writeBooleanTextNode),\n});\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst PLACEMARK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'name',\n  'open',\n  'visibility',\n  'address',\n  'phoneNumber',\n  'description',\n  'styleUrl',\n  'Style',\n]);\n\n/**\n * A factory for creating ExtendedData nodes.\n * @const\n * @type {function(*, Array<*>): (Node|undefined)}\n */\nconst EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');\n\n/**\n * FIXME currently we do serialize arbitrary/custom feature properties\n * (ExtendedData).\n * @param {Element} node Node.\n * @param {Feature} feature Feature.\n * @param {Array<*>} objectStack Object stack.\n * @this {KML}\n */\nfunction writePlacemark(node, feature, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n\n  // set id\n  if (feature.getId()) {\n    node.setAttribute('id', /** @type {string} */ (feature.getId()));\n  }\n\n  // serialize properties (properties unknown to KML are not serialized)\n  const properties = feature.getProperties();\n\n  // don't export these to ExtendedData\n  const filter = {\n    'address': 1,\n    'description': 1,\n    'name': 1,\n    'open': 1,\n    'phoneNumber': 1,\n    'styleUrl': 1,\n    'visibility': 1,\n  };\n  filter[feature.getGeometryName()] = 1;\n  const keys = Object.keys(properties || {})\n    .sort()\n    .filter(function (v) {\n      return !filter[v];\n    });\n\n  const styleFunction = feature.getStyleFunction();\n  if (styleFunction) {\n    // FIXME the styles returned by the style function are supposed to be\n    // resolution-independent here\n    const styles = styleFunction(feature, 0);\n    if (styles) {\n      const styleArray = Array.isArray(styles) ? styles : [styles];\n      let pointStyles = styleArray;\n      if (feature.getGeometry()) {\n        pointStyles = styleArray.filter(function (style) {\n          const geometry = style.getGeometryFunction()(feature);\n          if (geometry) {\n            const type = geometry.getType();\n            if (type === 'GeometryCollection') {\n              return /** @type {GeometryCollection} */ (geometry)\n                .getGeometriesArrayRecursive()\n                .filter(function (geometry) {\n                  const type = geometry.getType();\n                  return type === 'Point' || type === 'MultiPoint';\n                }).length;\n            }\n            return type === 'Point' || type === 'MultiPoint';\n          }\n        });\n        ('Point');\n      }\n      if (this.writeStyles_) {\n        let lineStyles = styleArray;\n        let polyStyles = styleArray;\n        if (feature.getGeometry()) {\n          lineStyles = styleArray.filter(function (style) {\n            const geometry = style.getGeometryFunction()(feature);\n            if (geometry) {\n              const type = geometry.getType();\n              if (type === 'GeometryCollection') {\n                return /** @type {GeometryCollection} */ (geometry)\n                  .getGeometriesArrayRecursive()\n                  .filter(function (geometry) {\n                    const type = geometry.getType();\n                    return type === 'LineString' || type === 'MultiLineString';\n                  }).length;\n              }\n              return type === 'LineString' || type === 'MultiLineString';\n            }\n          });\n          polyStyles = styleArray.filter(function (style) {\n            const geometry = style.getGeometryFunction()(feature);\n            if (geometry) {\n              const type = geometry.getType();\n              if (type === 'GeometryCollection') {\n                return /** @type {GeometryCollection} */ (geometry)\n                  .getGeometriesArrayRecursive()\n                  .filter(function (geometry) {\n                    const type = geometry.getType();\n                    return type === 'Polygon' || type === 'MultiPolygon';\n                  }).length;\n              }\n              return type === 'Polygon' || type === 'MultiPolygon';\n            }\n          });\n        }\n        properties['Style'] = {\n          pointStyles: pointStyles,\n          lineStyles: lineStyles,\n          polyStyles: polyStyles,\n        };\n      }\n      if (pointStyles.length && properties['name'] === undefined) {\n        const textStyle = pointStyles[0].getText();\n        if (textStyle) {\n          properties['name'] = textStyle.getText();\n        }\n      }\n    }\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    PLACEMARK_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n\n  if (keys.length > 0) {\n    const sequence = makeSequence(properties, keys);\n    const namesAndValues = {names: keys, values: sequence};\n    pushSerializeAndPop(\n      context,\n      PLACEMARK_SERIALIZERS,\n      EXTENDEDDATA_NODE_FACTORY,\n      [namesAndValues],\n      objectStack\n    );\n  }\n\n  // serialize geometry\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n    objectStack[0]\n  );\n  let geometry = feature.getGeometry();\n  if (geometry) {\n    geometry = transformGeometryWithOptions(geometry, true, options);\n  }\n  pushSerializeAndPop(\n    context,\n    PLACEMARK_SERIALIZERS,\n    GEOMETRY_NODE_FACTORY,\n    [geometry],\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'extrude',\n  'tessellate',\n  'altitudeMode',\n  'coordinates',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'extrude': makeChildAppender(writeBooleanTextNode),\n  'tessellate': makeChildAppender(writeBooleanTextNode),\n  'altitudeMode': makeChildAppender(writeStringTextNode),\n  'coordinates': makeChildAppender(writeCoordinatesTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePrimitiveGeometry(node, geometry, objectStack) {\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  context['layout'] = geometry.getLayout();\n  context['stride'] = geometry.getStride();\n\n  // serialize properties (properties unknown to KML are not serialized)\n  const properties = geometry.getProperties();\n  properties.coordinates = flatCoordinates;\n\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    PRIMITIVE_GEOMETRY_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst POLY_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'color',\n  'fill',\n  'outline',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst POLYGON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'outerBoundaryIs': makeChildAppender(writeBoundaryIs),\n  'innerBoundaryIs': makeChildAppender(writeBoundaryIs),\n});\n\n/**\n * A factory for creating innerBoundaryIs nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');\n\n/**\n * A factory for creating outerBoundaryIs nodes.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nconst OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');\n\n/**\n * @param {Element} node Node.\n * @param {Polygon} polygon Polygon.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePolygon(node, polygon, objectStack) {\n  const linearRings = polygon.getLinearRings();\n  const outerRing = linearRings.shift();\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  // inner rings\n  pushSerializeAndPop(\n    context,\n    POLYGON_SERIALIZERS,\n    INNER_BOUNDARY_NODE_FACTORY,\n    linearRings,\n    objectStack\n  );\n  // outer ring\n  pushSerializeAndPop(\n    context,\n    POLYGON_SERIALIZERS,\n    OUTER_BOUNDARY_NODE_FACTORY,\n    [outerRing],\n    objectStack\n  );\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst POLY_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'color': makeChildAppender(writeColorTextNode),\n  'fill': makeChildAppender(writeBooleanTextNode),\n  'outline': makeChildAppender(writeBooleanTextNode),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Style} style Style.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writePolyStyle(node, style, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const fill = style.getFill();\n  const stroke = style.getStroke();\n  const properties = {\n    'color': fill ? fill.getColor() : undefined,\n    'fill': fill ? undefined : false,\n    'outline': stroke ? undefined : false,\n  };\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    POLY_STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the scale to.\n * @param {number|undefined} scale Scale.\n */\nfunction writeScaleTextNode(node, scale) {\n  // the Math is to remove any excess decimals created by float arithmetic\n  writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);\n}\n\n/**\n * @const\n * @type {Object<string, Array<string>>}\n */\n// @ts-ignore\nconst STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\n  'IconStyle',\n  'LabelStyle',\n  'LineStyle',\n  'PolyStyle',\n]);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n// @ts-ignore\nconst STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\n  'IconStyle': makeChildAppender(writeIconStyle),\n  'LabelStyle': makeChildAppender(writeLabelStyle),\n  'LineStyle': makeChildAppender(writeLineStyle),\n  'PolyStyle': makeChildAppender(writePolyStyle),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Object<string, Array<Style>>} styles Styles.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction writeStyle(node, styles, objectStack) {\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\n  const properties = {};\n  if (styles.pointStyles.length) {\n    const textStyle = styles.pointStyles[0].getText();\n    if (textStyle) {\n      properties['LabelStyle'] = textStyle;\n    }\n    const imageStyle = styles.pointStyles[0].getImage();\n    if (\n      imageStyle &&\n      typeof (/** @type {?} */ (imageStyle).getSrc) === 'function'\n    ) {\n      properties['IconStyle'] = imageStyle;\n    }\n  }\n  if (styles.lineStyles.length) {\n    const strokeStyle = styles.lineStyles[0].getStroke();\n    if (strokeStyle) {\n      properties['LineStyle'] = strokeStyle;\n    }\n  }\n  if (styles.polyStyles.length) {\n    const strokeStyle = styles.polyStyles[0].getStroke();\n    if (strokeStyle && !properties['LineStyle']) {\n      properties['LineStyle'] = strokeStyle;\n    }\n    properties['PolyStyle'] = styles.polyStyles[0];\n  }\n  const parentNode = objectStack[objectStack.length - 1].node;\n  const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];\n  const values = makeSequence(properties, orderedKeys);\n  pushSerializeAndPop(\n    context,\n    STYLE_SERIALIZERS,\n    OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack,\n    orderedKeys\n  );\n}\n\n/**\n * @param {Element} node Node to append a TextNode with the Vec2 to.\n * @param {Vec2} vec2 Vec2.\n */\nfunction writeVec2(node, vec2) {\n  node.setAttribute('x', String(vec2.x));\n  node.setAttribute('y', String(vec2.y));\n  node.setAttribute('xunits', vec2.xunits);\n  node.setAttribute('yunits', vec2.yunits);\n}\n\nexport default KML;\n"],"names":["GX_NAMESPACE_URIS","NAMESPACE_URIS","ICON_ANCHOR_UNITS_MAP","PLACEMARK_PARSERS","makeStructureNS","extendedDataParser","regionParser","makeObjectPropertySetter","readMultiGeometry","readLineString","readLinearRing","readPoint","readPolygon","readStyle","node","objectStack","styleMapValue","readStyleMapValue","call","this","placemarkObject","length","Array","isArray","assert","readString","readBoolean","readStyleURL","lineStrings","pushParseAndPop","GX_MULTITRACK_GEOMETRY_PARSERS","MultiLineString","readGxTrack","NETWORK_LINK_PARSERS","parseNode","LINK_PARSERS","readURI","REGION_PARSERS","object","LAT_LON_ALT_BOX_PARSERS","regionObject","extent","parseFloat","LOD_PARSERS","lodObject","KML_SEQUENCE","KML_SERIALIZERS","makeChildAppender","features","context","pushSerializeAndPop","DOCUMENT_SERIALIZERS","DOCUMENT_NODE_FACTORY","undefined","writePlacemark","DEFAULT_COLOR","DEFAULT_IMAGE_STYLE_ANCHOR","DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS","DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS","DEFAULT_IMAGE_STYLE_SIZE","DEFAULT_IMAGE_STYLE_SRC","DEFAULT_FILL_STYLE","DEFAULT_NO_IMAGE_STYLE","DEFAULT_IMAGE_STYLE","DEFAULT_TEXT_STROKE_STYLE","DEFAULT_STROKE_STYLE","DEFAULT_TEXT_STYLE","DEFAULT_STYLE","TEXTAREA","DEFAULT_STYLE_ARRAY","scaleForSize","size","Math","min","defaultIconUrlFunction","href","KML","XMLFeature","constructor","options","super","Fill","color","Icon","anchor","anchorOrigin","anchorXUnits","anchorYUnits","crossOrigin","rotation","scale","src","Stroke","width","Text","font","fill","stroke","Style","image","text","zIndex","dataProjection","getProjection","defaultStyle_","defaultStyle","extractStyles_","extractStyles","writeStyles_","writeStyles","sharedStyles_","showPointNames_","showPointNames","crossOrigin_","iconUrlFunction_","iconUrlFunction","supportedMediaTypes","readDocumentOrFolder_","parsersNS","makeArrayExtender","makeArrayPusher","readPlacemark_","readSharedStyle_","bind","readSharedStyleMap_","feature","Feature","id","getAttribute","setId","geometry","transformGeometryWithOptions","setGeometry","styleFunction","style","styleUrl","sharedStyles","resolution","drawName","name","multiGeometryPoints","getGeometry","GeometryCollection","getGeometriesArrayRecursive","filter","type","getType","get","test","document","createElement","innerHTML","value","featureStyle","findStyle","nameStyle","foundStyle","textOffset","textAlign","imageStyle","getImage","imageSize","getSize","imageScale","getScaleArray","getAnchor","textStyle","getText","clone","setFont","getFont","setScale","getScale","setFill","getFill","setStroke","getStroke","setText","setOffsetX","setOffsetY","setTextAlign","createNameStyleFunction","concat","slice","createFeatureStyleFunction","setStyle","setProperties","styleUri","baseURI","window","location","URL","readFeatureFromNode","includes","namespaceURI","getReadOptions","readFeaturesFromNode","localName","n","firstElementChild","nextElementSibling","fs","extend","readName","source","doc","parse","readNameFromDocument","isDocument","readNameFromNode","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","readNetworkLinks","networkLinks","readNetworkLinksFromDocument","readNetworkLinksFromNode","obj","push","readRegion","regions","readRegionFromDocument","readRegionFromNode","writeFeaturesNode","adaptOptions","kml","createElementNS","xmlnsUri","setAttributeNS","XML_SCHEMA_INSTANCE_URI","properties","orderedKeys","values","makeSequence","OBJECT_PROPERTY_NODE_FACTORY","styleValue","readColor","s","getAllTextContent","m","exec","hexColor","parseInt","substr","readFlatCoordinates","flatCoordinates","replace","re","x","y","z","trim","readScale","readDecimal","STYLE_MAP_PARSERS","pairObject","PAIR_PARSERS","key","ICON_STYLE_PARSERS","iconObject","ICON_PARSERS","xunits","yunits","origin","LABEL_STYLE_PARSERS","LINE_STYLE_PARSERS","POLY_STYLE_PARSERS","FLAT_LINEAR_RING_PARSERS","makeReplacer","readFlatLinearRing","GX_TRACK_PARSERS","whens","when","Date","isNaN","coordinates","gxTrackObject","i","ii","LineString","GEOMETRY_FLAT_COORDINATES_PARSERS","readFlatCoordinatesFromNode","EXTRUDE_AND_ALTITUDE_MODE_PARSERS","lineString","polygon","Polygon","MULTI_GEOMETRY_PARSERS","geometries","multiGeometry","homogeneous","layout","point","getLayout","getFlatCoordinates","MultiPoint","setCommonGeometryProperties","MultiPolygon","Point","FLAT_LINEAR_RINGS_PARSERS","innerBoundaryFlatLinearRings","INNER_BOUNDARY_IS_PARSERS","flatLinearRing","OUTER_BOUNDARY_IS_PARSERS","flatLinearRings","ends","STYLE_PARSERS","styleObject","IconObject","drawIcon","Object","keys","hotSpot","offset","w","h","heading","toRadians","offsetOrigin","imageState","getImageState","ImageState","listener","resizeScale","unlistenImageChange","listenImageChange","load","strokeStyle","fillStyle","outline","collection","extrudes","tessellates","altitudeModes","hasExtrude","hasTessellate","hasAltitudeMode","set","DATA_PARSERS","EXTENDED_DATA_PARSERS","featureObject","displayName","toString","SCHEMA_DATA_PARSERS","data","writeColorTextNode","rgba","asArray","abgr","hex","floor","writeStringTextNode","join","EXTENDEDDATA_NODE_SERIALIZERS","pair","setAttribute","writeCDATASection","nodeName","parentNode","DATA_NODE_FACTORY","makeSimpleNodeFactory","ICON_SEQUENCE","ICON_SERIALIZERS","writeDecimalTextNode","GX_NODE_FACTORY","ICON_STYLE_SEQUENCE","ICON_STYLE_SERIALIZERS","icon","vec2","String","writeScaleTextNode","LABEL_STYLE_SEQUENCE","LABEL_STYLE_SERIALIZERS","LINE_STYLE_SEQUENCE","LINE_STYLE_SERIALIZERS","GEOMETRY_TYPE_TO_NODENAME","GEOMETRY_NODE_FACTORY","POINT_NODE_FACTORY","LINE_STRING_NODE_FACTORY","LINEAR_RING_NODE_FACTORY","POLYGON_NODE_FACTORY","MULTI_GEOMETRY_SERIALIZERS","writePrimitiveGeometry","writePolygon","writeMultiGeometry","factory","forEach","getPoints","getLineStrings","getPolygons","BOUNDARY_IS_SERIALIZERS","writeBoundaryIs","linearRing","PLACEMARK_SERIALIZERS","namesAndValues","names","styles","pointStyles","getSrc","lineStyles","polyStyles","STYLE_SEQUENCE","STYLE_SERIALIZERS","writeBooleanTextNode","PLACEMARK_SEQUENCE","EXTENDEDDATA_NODE_FACTORY","getId","getProperties","getGeometryName","sort","v","getStyleFunction","styleArray","getGeometryFunction","PRIMITIVE_GEOMETRY_SEQUENCE","PRIMITIVE_GEOMETRY_SERIALIZERS","stride","dimension","d","getStride","POLY_STYLE_SEQUENCE","POLYGON_SERIALIZERS","INNER_BOUNDARY_NODE_FACTORY","OUTER_BOUNDARY_NODE_FACTORY","linearRings","getLinearRings","outerRing","shift","POLY_STYLE_SERIALIZERS","round","iconImageSize","getImageSize","iconProperties","getOrigin","getRotation","getColor","Number","getWidth"],"sourceRoot":""}
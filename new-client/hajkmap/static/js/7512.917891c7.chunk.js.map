{"version":3,"file":"static/js/7512.917891c7.chunk.js","mappings":"uMAUA,MAAMA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAgB,QAAC,MAAEE,GAAH,QAAgB,CACjDC,aAAcD,EAAME,QAAQ,GAC5BC,MAAO,QACP,CAACH,EAAMI,YAAYC,KAAK,OAAQ,CAC9BC,UAAW,OACXC,aAAc,iBACdC,aAAc,EACdC,OAAQ,EACRN,MAAO,OACPO,eAAgB,QATe,IAa7BC,GAAeb,EAAAA,EAAAA,IAAOc,EAAAA,EAAPd,EAAe,QAAC,MAAEE,GAAH,QAAgB,CAClDa,WAAYb,EAAMc,QAAQC,KAAKC,QADG,IAIpC,MAAMC,UAAaC,EAAAA,cAAqB,cAAD,yBACrCC,MAAQ,CACNC,MAAM,EACNL,KAAM,GAH6B,CAkBrCM,SACE,MAAM,SAAEC,EAAF,KAAYC,EAAZ,QAAkBC,EAAlB,MAA2BC,GAAUC,KAAKC,MAEhD,OACE,SAAC9B,EAAD,CAAY2B,QAASA,EAArB,UACE,SAAC,IAAD,WACE,SAAC,IAAD,CACEI,QAAQ,SAACjB,EAAD,UAAeY,IACvBE,MAAOA,EACPI,UAAWP,OAKpB,EAhCGL,EAaGa,aAAe,CACpBR,SAAU,qBACVG,MAAO,gBAoBX,W,sJCrDA,MAAMM,UAAyBb,EAAAA,cAU7Bc,YAAYL,GAAQ,IAAD,EACjBM,MAAMN,GADW,YAgFnBO,kBAAqBC,IACnBT,KAAKU,WAAW,CACdC,wBAAwB,EACxBC,aAAa,IAEfZ,KAAKC,MAAMY,IAAIC,eAAeC,QAAQ,8BAAtC,EArFiB,KAwFnBL,WAAa,WAAgB,IAAfM,EAAc,uDAAP,CAAC,EACpB,MAAML,EAAyBK,EAAKL,yBAA0B,EAC5DC,EAAcI,EAAKJ,cAAe,EAoBpC,GAlBA,EAAKX,MAAMY,IAAII,WAAa,EAAKC,KAGjC,EAAKjB,MAAMY,IAAIC,eAAeC,QAAQ,uBAAwB,CAC5DI,UAAW,cACXC,WAAY,EAAKF,KACjBG,UAAW,EAAKpB,MAAMY,IAAIS,OAAOD,YAInC,EAAKpB,MAAMY,IAAIU,sBAAsB,CACnCL,KAAM,EAAKA,KACXrB,KAAM,EAAKI,MAAMuB,OAAO3B,KACxBE,MAAO,EAAKA,MACZ0B,YAAa,EAAKA,eAIa,IAA7B,EAAKhC,MAAMiC,cACb,OAAO,MAGkB,IAA3Bf,GAAmC,EAAKV,MAAMY,IAAIc,aAAa,GAE/D,EAAKC,SACH,CACEF,eAAe,IAEjB,KAEE,EAAKzB,MAAMY,IAAIC,eAAeC,QAAQ,iCAGtB,IAAhBH,GAC4C,oBAAnC,EAAKX,MAAMuB,OAAOK,cACzB,EAAK5B,MAAMuB,OAAOK,cAFpB,GAKL,EAlIkB,KAoInBC,YAAc,KAGR9B,KAAKkB,OAASlB,KAAKC,MAAMY,IAAII,aAC/BjB,KAAKC,MAAMY,IAAII,gBAAac,GAE9B/B,KAAK4B,SACH,CACEF,eAAe,IAEjB,KAEE1B,KAAKC,MAAMY,IAAIC,eAAeC,QAAQ,gCAEI,oBAAnCf,KAAKC,MAAMuB,OAAOQ,cACvBhC,KAAKC,MAAMuB,OAAOQ,cADpB,GARJ,EAvIAhC,KAAKkB,KAAOjB,EAAMiB,KAAKe,oBAAiBF,EAGxC/B,KAAKyB,YAAcxB,EAAMiC,QAAQT,aAAexB,EAAMuB,OAAOC,YAG7D,MAAMU,GAC2C,IAA9CnC,KAAKC,MAAMY,IAAIS,OAAOc,UAAUC,IAAIC,QAClCC,EAAAA,SACGtC,EAAMiC,QAAQM,qBACdvC,EAAMiC,QAAQC,kBACpB,EAKEA,GACFnC,KAAKC,MAAMY,IAAIC,eAAeC,QAAQ,uBAAwB,CAC5DI,UAAW,cACXC,WAAYpB,KAAKkB,KACjBG,UAAWrB,KAAKC,MAAMY,IAAIS,OAAOD,YAMrCrB,KAAKP,MAAQ,CACXM,MAAOE,EAAMiC,QAAQnC,OAASE,EAAMuB,OAAOzB,OAAS,iBACpD0C,MAAOxC,EAAMiC,QAAQO,OAASxC,EAAMuB,OAAOiB,OAAS,KACpDf,cAAeS,GAMjBnC,KAAKD,MAAQE,EAAMiC,QAAQnC,OAASE,EAAMuB,OAAOzB,OAAS,iBAG1DC,KAAKvB,MAAQwB,EAAMiC,QAAQzD,OAASwB,EAAMuB,OAAO/C,OAAS,IAC1DuB,KAAK0C,OAASzC,EAAMiC,QAAQQ,QAAUzC,EAAMuB,OAAOkB,QAAU,OAC7D1C,KAAK2C,SAAW1C,EAAMiC,QAAQS,UAAY1C,EAAMuB,OAAOmB,UAAY,OAGnE1C,EAAMY,IAAI+B,qBAAqB5C,MAI/B,MAAMmB,EAAS,UAAMnB,KAAKkB,KAAX,eAGfjB,EAAMY,IAAIC,eAAe+B,UAAU1B,GAAYH,IAC7ChB,KAAKU,WAAWM,EAAhB,IAIF,MAAM8B,EAAc,UAAM9C,KAAKkB,KAAX,gBAEpBjB,EAAMY,IAAIC,eAAe+B,UAAUC,GAAgB,KACjD9C,KAAK8B,aAAL,GAEH,CAGDiB,mBAAmBC,GAGjBA,EAAUxB,OAAOzB,QAAUC,KAAKC,MAAMuB,OAAOzB,OAC3CC,KAAK4B,SAAS,CAAE7B,MAAOC,KAAKC,MAAMuB,OAAOzB,QAE3CiD,EAAUxB,OAAOiB,QAAUzC,KAAKC,MAAMuB,OAAOiB,OAC3CzC,KAAK4B,SAAS,CAAEa,MAAOzC,KAAKC,MAAMuB,OAAOiB,OAC5C,CAEDQ,eAAeC,GACb,MAAO,CAAC,OAAQ,SAASC,SAASD,EACnC,CAgFDE,aAAa5B,GACX,MAAM,OAAE0B,GAAWlD,KAAKC,MAAMiC,QAI9B,MAAiC,oBAA1B,OAAOV,QAAP,IAAOA,OAAP,EAAOA,EAAQ7B,QACpB6B,EAAO7B,UAKP,iCACE,SAAC,UAAD,CACEmB,eAAgBd,KAAKC,MAAMY,IAAIC,eAC/Bf,MAAOC,KAAKP,MAAMM,MAClB0C,MAAOzC,KAAKP,MAAMgD,MAClBY,QAASrD,KAAK8B,YACdpC,KAAMM,KAAKP,MAAMiC,cACjB4B,SAAUtD,KAAKC,MAAMuB,OAAO8B,SAC5BC,WAAYvD,KAAKC,MAAMuB,OAAO+B,WAC9BC,WAAYxD,KAAKC,MAAMuB,OAAOgC,WAC9BC,gBAAiBzD,KAAKC,MAAMuB,OAAOiC,gBACnCC,yBAA0B1D,KAAKC,MAAMuB,OAAOkC,yBAC5CC,gBAAiB3D,KAAKC,MAAMuB,OAAOmC,gBACnCC,WAAY5D,KAAKC,MAAMuB,OAAOoC,WAC9BC,qBAAsB7D,KAAKC,MAAMuB,OAAOqC,qBACxCC,eAAgB9D,KAAKC,MAAMuB,OAAOsC,eAClCrF,MAAOuB,KAAKvB,MACZiE,OAAQ1C,KAAK0C,OACbC,SAAU3C,KAAK2C,SACfoB,KAAK,SACLC,oBAAqBhE,KAAKC,MAAMY,IAAIS,OAAOc,UAAU6B,MAAMC,MACxDC,GAAiB,kBAAXA,EAAEjD,OApBb,SA2BG1B,EAAAA,aAAmBQ,KAAKC,MAAMmE,SAAU,CACvC1C,cAAe1B,KAAKP,MAAMiC,kBAOlB,WAAXwB,GAAuBlD,KAAKqE,qBAE5BrE,KAAKiD,eAAeC,IACnBlD,KAAKsE,mBAAL,UAA2BpB,EAA3B,YAEU,YAAXA,GAAwBlD,KAAKuE,wBAGnC,CAUDF,qBACE,OAAOG,EAAAA,EAAAA,eACL,SAAC,IAAD,CACEC,KACEzE,KAAKiD,eAAejD,KAAKC,MAAMiC,QAAQgB,SACT,YAA9BlD,KAAKC,MAAMiC,QAAQgB,OAHvB,UAME,UAAC,KAAD,CACEwB,QAAM,EACNC,SAAS,EACTC,SAAU5E,KAAKP,MAAMiC,cACrB5B,QAASE,KAAKQ,kBAJhB,WAME,SAAC,IAAD,UAAeR,KAAKC,MAAMuB,OAAO3B,QACjC,SAAC,IAAD,CAAcP,QAASU,KAAKD,aAGhC8E,SAASC,eAAe,kBAE3B,CAEDR,mBAAmBS,GACjB,OAAOP,EAAAA,EAAAA,eAEL,SAAC,IAAD,CAAQQ,QAAM,EAAd,UACE,SAAC,UAAD,CACEnF,KAAMG,KAAKC,MAAMuB,OAAO3B,KACxBC,QAASE,KAAKQ,kBACdT,MAAOC,KAAKD,MACZH,SAAUI,KAAKyB,gBAGnBoD,SAASC,eAAeC,GAE3B,CAEDR,sBACE,OAAOC,EAAAA,EAAAA,eAEL,SAAC,IAAD,CAAQQ,QAAM,EAAd,UACE,SAAC,UAAD,CACEnF,KAAMG,KAAKC,MAAMuB,OAAO3B,KACxBC,QAASE,KAAKQ,kBACdT,MAAOC,KAAKD,MACZH,SAAUI,KAAKyB,gBAGnBoD,SAASC,eAAe,0BAE3B,CAEDnF,SAEE,OACgD,IAA9CK,KAAKC,MAAMY,IAAIS,OAAOc,UAAUC,IAAIC,OACpCtC,KAAKoD,aAAapD,KAAKC,MAAMuB,OAEhC,EAGH,W,2HC9OA,UArDmBvB,IAEjB,MAAMgF,EAAgBC,MAIhBC,EAAe,IAAIC,EAAAA,QAAa,CACpCH,cAAeA,EACf5C,IAAKpC,EAAMoC,IACXH,QAASjC,EAAMiC,UAKXmD,EAAiB,IAAIC,EAAAA,QAAe,CACxCL,cAAeA,EACfpE,IAAKZ,EAAMY,IACXsE,aAAcA,EACdjD,QAASjC,EAAMiC,UAYjB,OACE,SAAC,UAAD,IACMjC,EACJiB,KAAK,YACLM,OAAQ,CACN3B,MAAM,SAAC,IAAD,IACNE,MAAO,aACP0B,YAAa,sCACbiB,OAAQ,UACRjE,MAAO,IACPuD,aAjBe,KACnBiD,EAAclE,QAAQ,wBAAyB,IAC/CkE,EAAclE,QAAQ,uBAAwB,GAA9C,GAMA,UAYE,SAAC,UAAD,CACEwE,MAAOF,EACPF,aAAcA,EACdjD,QAASjC,EAAMiC,QACf+C,cAAeA,KAjBrB,C,kiBCoVF,UA5XA,MAME3E,YAAYkF,GAAW,IAAD,6OAQtBC,mBAAqB,KACZ,OAAAzF,KAAP,MAToB,KAatB0F,WAAa,CAACC,EAAWC,IACG,KAAb,OAATD,QAAS,IAATA,OAAA,EAAAA,EAAWE,SAAwC,KAAb,OAAXD,QAAW,IAAXA,OAAA,EAAAA,EAAaC,QACnC,MAEF,OAAA7F,KAAA,MAAc8F,SAAS5B,MAAM6B,GAC3BA,EAAQC,QAAUL,GAAaI,EAAQE,OAASL,IAlBrC,KA2BtBM,UAAY,CAACP,EAAWC,EAAaO,EAAmBC,KAEtD,MAAML,EAAU/F,KAAK0F,WAAWC,EAAWC,GAM3C,MAAkB,KAAdQ,GAAoBL,EAAQM,gBACvB,OAAArG,KAAP,MAAmC+F,EAASI,EAAmBC,IAG1D,OAAApG,KAAP,MAA8B+F,EAASI,EAAvC,EAvCoB,gDA4CI,CAACJ,EAASI,EAAmBC,KAGrD,IAAIE,EAAa,2EAAuEF,EAAvE,KAEjB,IAAKpG,KAAKuG,wBAAwBR,GAAU,CAE1C,MAAMS,GAAU,OAAAxG,KAAA,MAAmByG,0BAEnCH,GAAa,UAAOP,EAAQW,aAAf,YAA+BF,EAA/B,IACd,CAKD,OAJAL,EAAkBQ,SAASC,IACzBN,GAAa,kBAAOtG,KAAP,MAAyC4G,GAAzC,IAAb,IAGKN,CAAP,IA3DoB,gDA+DUM,IAAe,IAAD,YAC5C,OAAQA,EAAU1F,MAChB,IAAK,SACL,IAAK,gBACL,IAAK,SACL,IAAK,OACL,IAAK,WAEH,MAAM,GAAN,OAAU0F,EAAUX,KAApB,gCACEW,EAAUC,aADZ,QACqBD,EAAUE,oBAD/B,QAC+C,IAEjD,IAAK,UACL,IAAK,iBAEH,MAAMC,EAAa,oBAAGH,EAAUC,aAAb,QAAsBD,EAAUE,oBAAhC,QAAgD,GAEnE,GAA6B,IAAzBC,EAAclB,OAChB,MAAM,GAAN,OAAUe,EAAUX,KAApB,KAIF,MADe,UAAMW,EAAUX,KAAhB,YAAwBc,EAAcC,KAAK,MAE5D,IAAK,eAEH,MAAM,MAAEH,GAAU7G,KAAKiH,2BAA2BL,GAClD,MAAM,GAAN,OAAUA,EAAUX,KAApB,YAA4BY,GAC9B,QAEE,2BAAOD,EAAUC,aAAjB,QAA0BD,EAAUE,oBAApC,QAAoD,GA3BxD,IAhEoB,KAkGtBP,wBAA2BR,IAEtBA,IACAA,EAAQW,cACgB,KAAzBX,EAAQW,cACiB,SAAzBX,EAAQW,aAvGU,gDA+GNQ,GAEW,IAArBA,EACK,EAIFC,OAAO,KAAD,OAAM,IAAIC,SAASF,EAAkB,SAtH9B,KA2HtBD,2BAA8BL,IAAe,IAAD,EAE1C,MAAMS,GAAI,OAAGrH,KAAH,MAAqB4G,EAAUM,kBAMzC,MAAO,CAAEL,MAHE,UACTD,EAAUC,aADD,QACU7G,KAAKsH,sBAAsBV,EAAWS,GAE3CA,OAAhB,EAnIoB,KAwItBC,sBAAwB,CAACV,EAAWS,IAC3BT,EAAUW,iBACbX,EAAUY,QAAUH,EACpBT,EAAUY,QA3IM,KAgJtBC,sBAAwB,CAACb,EAAWS,IAC3BT,EAAUc,iBACbd,EAAUe,QAAUN,EACpBT,EAAUe,QAnJM,gDAyJAf,IAAe,IAAD,YAClC,OAAQA,EAAU1F,MAChB,IAAK,SACL,IAAK,gBACL,IAAK,SACL,IAAK,OACL,IAAK,WAEH,2BAAO0F,EAAUC,aAAjB,QAA0BD,EAAUE,oBAApC,QAAoD,GACtD,IAAK,UACL,IAAK,iBAEH,2BAAOF,EAAUC,aAAjB,QAA0BD,EAAUE,oBAApC,QAAoD,GACtD,IAAK,eAEH,MAAM,MAAED,GAAU7G,KAAKiH,2BAA2BL,GAClD,OAAOC,EACT,QAEE,2BAAOD,EAAUC,aAAjB,QAA0BD,EAAUE,oBAApC,QAAoD,GAlBxD,IA1JoB,gDAkLC,CAACf,EAASI,KAE/B,MAAMyB,EAAmB,GAEzB,IAAK5H,KAAKuG,wBAAwBR,GAAU,CAE1C,MAAMS,GAAU,OAAAxG,KAAA,MAAmByG,0BAEnCmB,EAAiBC,KAAK,CAAE5B,KAAMF,EAAQW,aAAcG,MAAOL,GAC5D,CAOD,OALAL,EAAkBQ,SAASC,IACzB,MAAMC,GAAK,OAAG7G,KAAH,MAA2B4G,GACtCgB,EAAiBC,KAAK,CAAE5B,KAAMW,EAAUX,KAAMY,MAAOA,GAArD,IAGKe,CAAP,IAlMoB,KAuMtBE,sBAAwB,CAACC,EAAYpC,EAAWC,KAE9C,MAAMG,EAAU/F,KAAK0F,WAAWC,EAAWC,GAE3C,OAAKG,EAKEgC,EAAWC,QAAQpB,GACjBA,EAAUX,OAASF,EAAQW,eAL3B,EAIT,EAhNoB,KAqNtBuB,WAAa,CAACtC,EAAWC,KAAiB,IAAD,EAEvC,MAAMG,EAAU/F,KAAK0F,WAAWC,EAAWC,GAE3C,OAAKG,GAIL,UAAOA,EAAQmC,eAAf,QAHS,EAGT,EA7NoB,KAiOtBC,qBAAuB,CAACxC,EAAWC,KAEjC,MAAMG,EAAU/F,KAAK0F,WAAWC,EAAWC,GAE3C,QAAKG,GAKEA,EAAQM,cAAf,EA1OoB,KA8OtB+B,aAAgBC,IACd,GAA2B,kBAAhBA,EACT,OAAO,EAGT,MADe,eACDC,KAAKD,EAAnB,EAnPoB,KAuPtBE,qBAAuBC,MAAO7C,EAAWC,KAGvC,MAAMG,EAAU/F,KAAK0F,WAAWC,EAAWC,GAC3C,IAAKG,EACH,MAAO,CAAE0C,OAAO,EAAMV,WAAY,IAGpC,MAAMW,GAAG,OAAG1I,KAAH,MAAgC+F,GAEzC,IACE,MAAM4C,QAAiBC,EAAAA,EAAAA,QAAOF,GAE9B,MAAO,CAAED,OAAO,EAAOV,iBADJY,EAASE,OAI7B,CAFC,MAAOJ,GACP,MAAO,CAAEA,OAAO,EAAMV,WAAY,GACnC,GAvQmB,gDA6QFS,MAAOzC,EAASI,KAElC,MAAMyB,GAAgB,OAAG5H,KAAH,MACpB+F,EACAI,GAGIuC,GAAG,OAAG1I,KAAH,MAAuC+F,GAE1C+C,EAAOC,KAAKC,UAAU,CAAEC,oBAAqBrB,IAEnD,IAAK,IAAD,EACF,MAAMe,QAAiBC,EAAAA,EAAAA,QAAOF,EAAK,CACjCQ,OAAQ,OACRJ,KAAMA,EACNK,YAAa,cACbC,QAAS,CACP,eAAgB,sBAIpB,MAAO,CAAEX,OAAO,EAAOY,MAAK,iBADTV,EAASE,QACO9D,UAAP,QAAa,KAG1C,CAFC,MAAO0D,GACP,MAAO,CAAEA,OAAO,EAAMY,MAAO,KAC9B,KArSmB,gDAySGb,MAAOzC,EAASI,EAAmBC,KAE1D,MAAMkD,GAAU,OAAGtJ,KAAH,MAA+B+F,GAGzCwD,GAAgB,OAAGvJ,KAAH,MACpB+F,EACAI,EACAC,GAGF,IAAK,IAAD,IACF,MAAMuC,QAAiBC,EAAAA,EAAAA,QAAOU,EAAY,CACxCJ,OAAQ,OACRJ,KAAMS,EACNJ,YAAa,cACbC,QAAS,CACP,eAAgB,uCAGdI,QAAab,EAASE,OAC5B,MAAO,CAAEJ,OAAO,EAAOY,MAAK,iBAAEG,QAAF,IAAEA,GAAF,UAAEA,EAAMC,uBAAR,aAAE,EAAuBC,aAAzB,QAAkC,KAG/D,CAFC,MAAOjB,GACP,MAAO,CAAEA,OAAO,EAAMY,MAAO,KAC9B,KAjUmB,KAqUtBM,iBAAmBnB,UAEjB,IAAKa,EACH,MAAO,CAAEZ,OAAO,EAAMmB,OAAQ,MAGhC,MAAMlB,GAAG,OAAG1I,KAAH,MAAgCqJ,GAEzC,IAAK,IAAD,EACF,MAAMV,QAAiBC,EAAAA,EAAAA,QAAOF,GACxBc,QAAab,EAASE,OAC5B,MAAO,CAAEJ,OAAO,EAAOmB,OAAM,iBAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAMI,cAAR,QAAkB,KAGhD,CAFC,MAAOnB,GACP,MAAO,CAAEA,OAAO,EAAMmB,OAAQ,KAC/B,GAnVmB,gDAuVK7D,GACnB,GAAN,eAAU/F,KAAV,mDACE+F,EAAQ8D,WADV,kBAEU9D,EAAQ+D,UAFlB,kBAxVoB,gDA8VY/D,GAC1B,GAAN,eACE/F,KADF,6DAE+C+F,EAAQ8D,WAFvD,YAGE9D,EAAQ+D,UAHV,OA/VoB,gDAwWI/D,GAClB,GAAN,eAAU/F,KAAV,2CACE+F,EAAQ8D,WADV,YAEI9D,EAAQ+D,UAFZ,OAzWoB,gDAgXKT,GACnB,GAAN,eACErJ,KADF,8DAEgDqJ,EAFhD,QAhXA,OAAArJ,KAAA,MAAgBwF,EAAStD,SACzB,OAAAlC,KAAA,MAAuBwF,EAAS3E,IAAIS,OAAOyI,UAAUC,gBACrD,OAAAhK,KAAA,0BAAwBwF,EAAS3E,IAAIS,OAAO2I,mBAA5C,aAAwB,EAAiCC,YAAzD,QAAiE,IACjE,OAAAlK,KAAA,MAAqBwF,EAASL,YAC/B,E","sources":["components/Card.js","plugins/BaseWindowPlugin.js","plugins/FmeServer/FmeServer.js","plugins/FmeServer/models/FmeServerModel.js"],"sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Card as MUICard,\n  CardHeader,\n  CardActionArea,\n  Avatar,\n} from \"@mui/material\";\n\nconst StyledCard = styled(MUICard)(({ theme }) => ({\n  marginBottom: theme.spacing(1),\n  width: \"210px\",\n  [theme.breakpoints.down(\"sm\")]: {\n    boxShadow: \"none\",\n    borderBottom: \"1px solid #ccc\",\n    borderRadius: 0,\n    margin: 0,\n    width: \"100%\",\n    justifyContent: \"left\",\n  },\n}));\n\nconst StyledAvatar = styled(Avatar)(({ theme }) => ({\n  background: theme.palette.text.primary,\n}));\n\nclass Card extends React.PureComponent {\n  state = {\n    open: false,\n    text: \"\",\n  };\n\n  static propTypes = {\n    abstract: propTypes.string.isRequired,\n    icon: propTypes.object.isRequired,\n    onClick: propTypes.func.isRequired,\n    title: propTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    abstract: \"Beskrivning saknas\",\n    title: \"Titel saknas\",\n  };\n\n  render() {\n    const { abstract, icon, onClick, title } = this.props;\n\n    return (\n      <StyledCard onClick={onClick}>\n        <CardActionArea>\n          <CardHeader\n            avatar={<StyledAvatar>{icon}</StyledAvatar>}\n            title={title}\n            subheader={abstract}\n          />\n        </CardActionArea>\n      </StyledCard>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { isMobile } from \"./../utils/IsMobile\";\nimport { createPortal } from \"react-dom\";\nimport { Hidden, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\nimport Window from \"../components/Window.js\";\nimport Card from \"../components/Card.js\";\nimport PluginControlButton from \"../components/PluginControlButton\";\n\nclass BaseWindowPlugin extends React.PureComponent {\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    children: propTypes.object.isRequired,\n    custom: propTypes.object.isRequired,\n    map: propTypes.object.isRequired,\n    options: propTypes.object.isRequired,\n    type: propTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    // 'type' is basically a unique identifier for each plugin\n    this.type = props.type.toLowerCase() || undefined;\n\n    // There will be defaults in props.custom, so that each plugin has own default title/description\n    this.description = props.options.description || props.custom.description;\n\n    // Should Window be visible at start?\n    const visibleAtStart =\n      (this.props.app.config.mapConfig.map.clean === false && // Never show in clean mode\n        (isMobile\n          ? props.options.visibleAtStartMobile\n          : props.options.visibleAtStart)) ||\n      false;\n\n    // If plugin is shown at start, we want to register it as shown in the Analytics module too.\n    // Normally, the event would be sent when user clicks on the button that activates the plugin,\n    // but in this case there won't be any click as the window will be visible at start.\n    if (visibleAtStart) {\n      this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n        eventName: \"pluginShown\",\n        pluginName: this.type,\n        activeMap: this.props.app.config.activeMap,\n      });\n    }\n\n    // Title and Color are kept in state and not as class properties. Keeping them in state\n    // ensures re-render when new props arrive and update the state variables (see componentDidUpdate() too).\n    this.state = {\n      title: props.options.title || props.custom.title || \"Unnamed plugin\",\n      color: props.options.color || props.custom.color || null,\n      windowVisible: visibleAtStart,\n    };\n\n    // Title is a special case: we want to use the state.title and pass on to Window in order\n    // to update Window's title dynamically. At the same time, we want all other occurrences,\n    // e.g. Widget or Drawer button's label to remain the same.\n    this.title = props.options.title || props.custom.title || \"Unnamed plugin\";\n\n    // Try to get values from admin's option. Fallback to customs from Plugin defaults, or finally to hard-coded values.\n    this.width = props.options.width || props.custom.width || 400;\n    this.height = props.options.height || props.custom.height || \"auto\";\n    this.position = props.options.position || props.custom.position || \"left\";\n\n    // Register Window in our global register\n    props.app.registerWindowPlugin(this);\n\n    // Subscribe to a global event that makes it possible to show/hide Windows.\n    // First we prepare a unique event name for each plugin so it looks like '{pluginName}.showWindow'.\n    const eventName = `${this.type}.showWindow`;\n    // Next, subscribe to that event, expect 'opts' array.\n    // To find all places where this event is publish, search for 'globalObserver.publish(\"show'\n    props.app.globalObserver.subscribe(eventName, (opts) => {\n      this.showWindow(opts);\n    });\n\n    // Same as above, but to close the window.\n    const closeEventName = `${this.type}.closeWindow`;\n\n    props.app.globalObserver.subscribe(closeEventName, () => {\n      this.closeWindow();\n    });\n  }\n\n  // Does not run on initial render, but runs on subsequential re-renders.\n  componentDidUpdate(prevProps) {\n    // Window's title and color can be updated on-the-flight, so we keep them\n    // in state and ensure that state is updated when new props arrive.\n    prevProps.custom.title !== this.props.custom.title &&\n      this.setState({ title: this.props.custom.title });\n\n    prevProps.custom.color !== this.props.custom.color &&\n      this.setState({ color: this.props.custom.color });\n  }\n\n  pluginIsWidget(target) {\n    return [\"left\", \"right\"].includes(target);\n  }\n\n  handleButtonClick = (e) => {\n    this.showWindow({\n      hideOtherPluginWindows: true,\n      runCallback: true,\n    });\n    this.props.app.globalObserver.publish(\"core.onlyHideDrawerIfNeeded\");\n  };\n\n  showWindow = (opts = {}) => {\n    const hideOtherPluginWindows = opts.hideOtherPluginWindows || true,\n      runCallback = opts.runCallback || true;\n    // Let the App know which tool is currently active\n    this.props.app.activeTool = this.type;\n\n    // Tell the Analytics model about this\n    this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n      eventName: \"pluginShown\",\n      pluginName: this.type,\n      activeMap: this.props.app.config.activeMap,\n    });\n\n    // AppModel keeps track of recently shown plugins.\n    this.props.app.pushPluginIntoHistory({\n      type: this.type,\n      icon: this.props.custom.icon,\n      title: this.title,\n      description: this.description,\n    });\n\n    // Don't continue if visibility hasn't changed\n    if (this.state.windowVisible === true) {\n      return null;\n    }\n\n    hideOtherPluginWindows === true && this.props.app.onWindowOpen(this);\n\n    this.setState(\n      {\n        windowVisible: true,\n      },\n      () => {\n        // Notify the app that a plugin's visibility has changed\n        this.props.app.globalObserver.publish(\"core.pluginVisibilityChanged\");\n\n        // If there's a callback defined in custom, run it\n        runCallback === true &&\n          typeof this.props.custom.onWindowShow === \"function\" &&\n          this.props.custom.onWindowShow();\n      }\n    );\n  };\n\n  closeWindow = () => {\n    // If closeWindow was initiated by the tool that is currently\n    // active, we should unset the activeTool property\n    if (this.type === this.props.app.activeTool)\n      this.props.app.activeTool = undefined;\n\n    this.setState(\n      {\n        windowVisible: false,\n      },\n      () => {\n        // Notify the app that a plugin's visibility has changed\n        this.props.app.globalObserver.publish(\"core.pluginVisibilityChanged\");\n\n        typeof this.props.custom.onWindowHide === \"function\" &&\n          this.props.custom.onWindowHide();\n      }\n    );\n  };\n  /**\n   * @summary Render the plugin and its buttons according to settings in admin.\n   * @description See comments in code to follow the rendering logic.\n   * @param {*} custom\n   * @returns {object} React.Component\n   * @memberof BaseWindowPlugin\n   */\n  renderWindow(custom) {\n    const { target } = this.props.options;\n    // BaseWindowPlugin, which calls this method, will supply an object.\n    // If that object contains a render() function, we want to call it\n    // and bypass any other functionality from this method.\n    return typeof custom?.render === \"function\" ? (\n      custom.render()\n    ) : (\n      // If there was not custom render method, we do \"normal\" rendering.\n      // That includes rendering the plugin Window itself, as well as a\n      // button (that will trigger opening of the plugin Window).\n      <>\n        <Window\n          globalObserver={this.props.app.globalObserver}\n          title={this.state.title}\n          color={this.state.color}\n          onClose={this.closeWindow}\n          open={this.state.windowVisible}\n          onResize={this.props.custom.onResize}\n          onMaximize={this.props.custom.onMaximize}\n          onMinimize={this.props.custom.onMinimize}\n          draggingEnabled={this.props.custom.draggingEnabled}\n          customPanelHeaderButtons={this.props.custom.customPanelHeaderButtons}\n          resizingEnabled={this.props.custom.resizingEnabled}\n          scrollable={this.props.custom.scrollable}\n          allowMaximizedWindow={this.props.custom.allowMaximizedWindow}\n          disablePadding={this.props.custom.disablePadding}\n          width={this.width}\n          height={this.height}\n          position={this.position}\n          mode=\"window\"\n          layerswitcherConfig={this.props.app.config.mapConfig.tools.find(\n            (t) => t.type === \"layerswitcher\"\n          )}\n        >\n          {/* We have to pass windowVisible down to the children so that we can conditionally render\n          the <Tabs /> component, since it does not accept components with display: \"none\". We use the\n          windowVisible-prop to make sure that we don't render the <Tabs /> when the window\n          is not visible.*/}\n          {React.cloneElement(this.props.children, {\n            windowVisible: this.state.windowVisible,\n          })}\n        </Window>\n        {/* Always render a Drawer button unless its target is \"hidden\". \n              It's a backup for plugins render elsewhere: we hide \n              Widget and Control buttons on small screens and fall \n              back to Drawer button). */}\n        {target !== \"hidden\" && this.renderDrawerButton()}\n        {/* Widget buttons must also render a Widget */}\n        {this.pluginIsWidget(target) &&\n          this.renderWidgetButton(`${target}-column`)}\n        {/* Finally, render a Control button if target has that value */}\n        {target === \"control\" && this.renderControlButton()}\n      </>\n    );\n  }\n\n  /**\n   * This is a bit of a special case. This method will render\n   * not only plugins specified as Drawer plugins (target===toolbar),\n   * but it will also render Widget and Control plugins - given some special condition.\n   *\n   * Those special conditions are small screens, where there's no screen\n   * estate to render the Widget button in Map Overlay.\n   */\n  renderDrawerButton() {\n    return createPortal(\n      <Hidden\n        mdUp={\n          this.pluginIsWidget(this.props.options.target) ||\n          this.props.options.target === \"control\"\n        }\n      >\n        <ListItem\n          button\n          divider={true}\n          selected={this.state.windowVisible}\n          onClick={this.handleButtonClick}\n        >\n          <ListItemIcon>{this.props.custom.icon}</ListItemIcon>\n          <ListItemText primary={this.title} />\n        </ListItem>\n      </Hidden>,\n      document.getElementById(\"plugin-buttons\")\n    );\n  }\n\n  renderWidgetButton(id) {\n    return createPortal(\n      // Hide Widget button on small screens, see renderDrawerButton too\n      <Hidden mdDown>\n        <Card\n          icon={this.props.custom.icon}\n          onClick={this.handleButtonClick}\n          title={this.title}\n          abstract={this.description}\n        />\n      </Hidden>,\n      document.getElementById(id)\n    );\n  }\n\n  renderControlButton() {\n    return createPortal(\n      // Hide Control button on small screens, see renderDrawerButton too\n      <Hidden mdDown>\n        <PluginControlButton\n          icon={this.props.custom.icon}\n          onClick={this.handleButtonClick}\n          title={this.title}\n          abstract={this.description}\n        />\n      </Hidden>,\n      document.getElementById(\"plugin-control-buttons\")\n    );\n  }\n\n  render() {\n    // Don't render if \"clean\" query param is specified, otherwise go on\n    return (\n      this.props.app.config.mapConfig.map.clean !== true &&\n      this.renderWindow(this.props.custom)\n    );\n  }\n}\n\nexport default BaseWindowPlugin;\n","import React from \"react\";\nimport Observer from \"react-event-observer\";\nimport FmeIcon from \"@mui/icons-material/BrokenImage\";\n\n// Views\nimport BaseWindowPlugin from \"../BaseWindowPlugin\";\nimport FmeView from \"./FmeServerView\";\n\n// Models\nimport FmeServerModel from \"./models/FmeServerModel\";\nimport MapViewModel from \"./models/MapViewModel\";\n\nconst FmeServer = (props) => {\n  // The local observer will handle the communication between models and views.\n  const localObserver = Observer();\n\n  // A model used to interact with the map. We want to keep the view free\n  // from direct map interactions.\n  const mapViewModel = new MapViewModel({\n    localObserver: localObserver,\n    map: props.map,\n    options: props.options,\n  });\n\n  // A model used to interact with the FME-server instance etc. We want to\n  // keep the view free from direct interactions with the server.\n  const fmeServerModel = new FmeServerModel({\n    localObserver: localObserver,\n    app: props.app,\n    mapViewModel: mapViewModel,\n    options: props.options,\n  });\n\n  // We're gonna need to catch if the user closes the window, and make sure to\n  // disable the draw interaction if it is active. Let's publish a couple events.\n  const onWindowHide = () => {\n    localObserver.publish(\"view.toggleDrawMethod\", \"\");\n    localObserver.publish(\"map.toggleDrawMethod\", \"\");\n  };\n\n  // We're rendering the view in a BaseWindowPlugin, since this is a\n  // \"standard\" plugin.\n  return (\n    <BaseWindowPlugin\n      {...props}\n      type=\"FmeServer\"\n      custom={{\n        icon: <FmeIcon />,\n        title: \"FME-server\",\n        description: \"Beställ jobb från FME-server.\",\n        height: \"dynamic\",\n        width: 400,\n        onWindowHide: onWindowHide,\n      }}\n    >\n      <FmeView\n        model={fmeServerModel}\n        mapViewModel={mapViewModel}\n        options={props.options}\n        localObserver={localObserver}\n      />\n    </BaseWindowPlugin>\n  );\n};\n\nexport default FmeServer;\n","import { hfetch } from \"../../../utils/FetchWrapper\";\n\nclass FmeServerModel {\n  #options;\n  #mapServiceBase;\n  #mapViewModel;\n  #activeUserEmail;\n\n  constructor(settings) {\n    this.#options = settings.options;\n    this.#mapServiceBase = settings.app.config.appConfig.mapserviceBase;\n    this.#activeUserEmail = settings.app.config.userDetails?.mail ?? \"\";\n    this.#mapViewModel = settings.mapViewModel;\n  }\n\n  // A get:er to return the active user:s email.\n  getActiveUserEmail = () => {\n    return this.#activeUserEmail;\n  };\n\n  // Returns the product matching the group and product name.\n  getProduct = (groupName, productName) => {\n    if (groupName?.length === 0 || productName?.length === 0) {\n      return null;\n    }\n    return this.#options.products.find((product) => {\n      return product.group === groupName && product.name === productName;\n    });\n  };\n\n  // Entry point for when user clicks the \"Order\" button.\n  // We're targeting different FME-server endpoints determined by wether\n  // The userEmail has been supplied or not. (If the userEmail is supplied\n  // it means that the admin has registered the product as an data-download\n  // product rather than a product that should target the regular FME-server REST-API).\n  makeOrder = (groupName, productName, productParameters, userEmail) => {\n    // We're gonna need the product\n    const product = this.getProduct(groupName, productName);\n    // If user email is supplied and prompted for, it means that we are dealing\n    // with data-download, not the ordinary REST-api.\n    // The user email might not be an empty string if AD-lookup is enabled\n    // and user-details are exposed to the client, which means that we must\n    // check that the product is set to prompt for email as well.\n    if (userEmail !== \"\" && product.promptForEmail) {\n      return this.#makeDataDownloadOrder(product, productParameters, userEmail);\n    }\n    // If it is not, we're dealing with the regular REST-application\n    return this.#makeRestApiOrder(product, productParameters);\n  };\n\n  // Creates a string to be used for the data-download request\n  // Built upon the userEmail and the parameterValues.\n  #createRequestUrlString = (product, productParameters, userEmail) => {\n    // We're gonna need some base information in the request string, let's add\n    // that first.\n    let requestString = `opt_servicemode=async&opt_responseformat=json&opt_requesteremail=${userEmail}&`;\n    // Let's check wether their will be a geometry to send\n    if (!this.noGeomAttributeSupplied(product)) {\n      // If there is, we get the geometries as GeoJSON\n      const geoJson = this.#mapViewModel.getAllFeaturesAsGeoJson();\n      // And add it to the request string.\n      requestString += `${product.geoAttribute}=${geoJson}&`;\n    }\n    productParameters.forEach((parameter) => {\n      requestString += `${this.#getParameterNameValueString(parameter)}&`;\n    });\n    // Then we return the string!\n    return requestString;\n  };\n\n  // Returns a name value string for the supplied parameter\n  #getParameterNameValueString = (parameter) => {\n    switch (parameter.type) {\n      case \"CHOICE\":\n      case \"LOOKUP_CHOICE\":\n      case \"STRING\":\n      case \"TEXT\":\n      case \"PASSWORD\":\n        // All above should be clean strings... TODO: Tests!\n        return `${parameter.name}=${\n          parameter.value ?? parameter.defaultValue ?? \"\"\n        }`;\n      case \"LISTBOX\":\n      case \"LOOKUP_LISTBOX\":\n        // These should be array of strings...\n        const selectedArray = parameter.value ?? parameter.defaultValue ?? [];\n        // If the array is empty, we can return an empty string\n        if (selectedArray.length === 0) {\n          return `${parameter.name}=`;\n        }\n        // Otherwise we concatenate a string with all selected values.\n        const urlString = `${parameter.name}=${selectedArray.join(\",\")}`;\n        return urlString;\n      case \"RANGE_SLIDER\":\n        // This one expects a number\n        const { value } = this.getRangeSliderValueAndStep(parameter);\n        return `${parameter.name}=${value}`;\n      default:\n        // Let's default to a string.\n        return parameter.value ?? parameter.defaultValue ?? \"\";\n    }\n  };\n\n  // Checks wether the geoAttribute contains a valid value.\n  // (An empty string or \"none\" is to be considered as no geoAttribute\n  // wa supplied).\n  noGeomAttributeSupplied = (product) => {\n    return (\n      !product ||\n      !product.geoAttribute ||\n      product.geoAttribute === \"\" ||\n      product.geoAttribute === \"none\"\n    );\n  };\n\n  // Returns a stepSize that corresponds to the supplied decimalPrecision\n  // E.g. decimalPrecision: 0 => step: 1,\n  //      decimalPrecision: 1 => step: 0.1,\n  //      decimalPrecision: 2 => step: 0.01\n  #getStepSize = (decimalPrecision) => {\n    // Special case, 0 precision should just return 1\n    if (decimalPrecision === 0) {\n      return 1;\n    }\n    // Otherwise we use the padStart string function to create\n    // a float with a fitting number of decimals.\n    return Number(`0.${\"1\".padStart(decimalPrecision, \"0\")}`);\n  };\n\n  // Calculates a fitting stepSize and fetches the current value for\n  // the range slider.\n  getRangeSliderValueAndStep = (parameter) => {\n    // First we get a stepSize that fits the decimalPrecision supplied\n    const step = this.#getStepSize(parameter.decimalPrecision);\n    // Then we get the parameter value (that might be set) or return the\n    // minimum (or the step over the minimum if that should be excluded).\n    const value =\n      parameter.value ?? this.getRangeSliderMinimum(parameter, step);\n    // And return everything\n    return { value, step };\n  };\n\n  // Returns the range slider minimum or the step above if\n  // minimum should be excluded.\n  getRangeSliderMinimum = (parameter, step) => {\n    return parameter.minimumExclusive\n      ? parameter.minimum + step\n      : parameter.minimum;\n  };\n\n  // Returns the range slider maximum or the step below if\n  // minimum should be excluded.\n  getRangeSliderMaximum = (parameter, step) => {\n    return parameter.maximumExclusive\n      ? parameter.maximum - step\n      : parameter.maximum;\n  };\n\n  // Returns the value of the parameter supplied.\n  // Since the parameter types expects different fallback values\n  // we'll have to handle them differently.\n  #getParameterValue = (parameter) => {\n    switch (parameter.type) {\n      case \"CHOICE\":\n      case \"LOOKUP_CHOICE\":\n      case \"STRING\":\n      case \"TEXT\":\n      case \"PASSWORD\":\n        // All of the above expects a single string\n        return parameter.value ?? parameter.defaultValue ?? \"\";\n      case \"LISTBOX\":\n      case \"LOOKUP_LISTBOX\":\n        // These expect an array of strings\n        return parameter.value ?? parameter.defaultValue ?? [];\n      case \"RANGE_SLIDER\":\n        // This one expects a number\n        const { value } = this.getRangeSliderValueAndStep(parameter);\n        return value;\n      default:\n        // Let's default to a string.\n        return parameter.value ?? parameter.defaultValue ?? \"\";\n    }\n  };\n\n  // Returns all parameters with their values in the format that\n  // FME-server expects.\n  #getParametersToSend = (product, productParameters) => {\n    // Initiate an array where all parameter objects will be pushed\n    const parametersToSend = [];\n    // Let's check wether their will be a geometry to send\n    if (!this.noGeomAttributeSupplied(product)) {\n      // If there is, we get the geometries as GeoJSON\n      const geoJson = this.#mapViewModel.getAllFeaturesAsGeoJson();\n      // And add the geoAttribute with it's GeoJSON to the array\n      parametersToSend.push({ name: product.geoAttribute, value: geoJson });\n    }\n    // Then we get all other values and add them to the array\n    productParameters.forEach((parameter) => {\n      const value = this.#getParameterValue(parameter);\n      parametersToSend.push({ name: parameter.name, value: value });\n    });\n    // And return the array.\n    return parametersToSend;\n  };\n\n  // Returns all parameters except the one parameter stated\n  // to be the one containing the geometry.\n  getParametersToRender = (parameters, groupName, productName) => {\n    // We must fetch the product\n    const product = this.getProduct(groupName, productName);\n    // And make sure it exists. If it doesn't we return an empty array\n    if (!product) {\n      return [];\n    }\n    // Otherwise we return the filtered parameters, where the parameter\n    // with the geomAttribute as name is removed.\n    return parameters.filter((parameter) => {\n      return parameter.name !== product.geoAttribute;\n    });\n  };\n\n  getInfoUrl = (groupName, productName) => {\n    // We must fetch the product\n    const product = this.getProduct(groupName, productName);\n    // And make sure it exists. If it doesn't we return an empty string\n    if (!product) {\n      return \"\";\n    }\n    // Then we'll return the infoUrl, or an empty string if it's missing.\n    return product.infoUrl ?? \"\";\n  };\n\n  // Checks wether we should prompt the user for their email or not\n  shouldPromptForEmail = (groupName, productName) => {\n    // We must fetch the product\n    const product = this.getProduct(groupName, productName);\n    // And make sure it exists. If it doesn't we return false\n    if (!product) {\n      return false;\n    }\n    // Otherwise we return the parameter containing information regarding\n    // email prompting\n    return product.promptForEmail;\n  };\n\n  // Check wethers the provided string is a valid email\n  isValidEmail = (emailString) => {\n    if (typeof emailString !== \"string\") {\n      return false;\n    }\n    const regExp = /\\S+@\\S+\\.\\S+/;\n    return regExp.test(emailString);\n  };\n\n  // Fetches all product parameters from FME-server\n  getProductParameters = async (groupName, productName) => {\n    // If the product is missing for some reason, we return an\n    // error and an empty array.\n    const product = this.getProduct(groupName, productName);\n    if (!product) {\n      return { error: true, parameters: [] };\n    }\n    // If not, let's create the url used to fetch the parameters.\n    const url = this.#createGetParametersUrl(product);\n    // And then try to fetch the parameters using the url...\n    try {\n      const response = await hfetch(url);\n      const data = await response.json();\n      return { error: false, parameters: data };\n    } catch (error) {\n      return { error: true, parameters: [] };\n    }\n  };\n\n  // Posts a request to run a workspace on FME-server via the REST-API.\n  // Returns an object containing eventual error and eventual\n  // jobId which can be used to check the status of the job.\n  #makeRestApiOrder = async (product, productParameters) => {\n    // First, we're gonna have to prepare the parameters to send.\n    const parametersToSend = this.#getParametersToSend(\n      product,\n      productParameters\n    );\n    // Let's create the request url\n    const url = this.#createSubmitProductRequestUrl(product);\n    // And the body containing all the parameters\n    const body = JSON.stringify({ publishedParameters: parametersToSend });\n    // And then try to submit the job using that url...\n    try {\n      const response = await hfetch(url, {\n        method: \"POST\",\n        body: body,\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      return { error: false, jobId: data.id ?? null };\n    } catch (error) {\n      return { error: true, jobId: null };\n    }\n  };\n\n  // Handles the data-download order\n  #makeDataDownloadOrder = async (product, productParameters, userEmail) => {\n    // Let's create the base-url for the request.\n    const requestUrl = this.#createDataDownloadUrl(product);\n    // The data-download does not expect the parameters to be be sent\n    // as json. So let's create a string instead TODO: Is this really true?\n    const requestUrlString = this.#createRequestUrlString(\n      product,\n      productParameters,\n      userEmail\n    );\n    // Then we try to fetch with this information\n    try {\n      const response = await hfetch(requestUrl, {\n        method: \"POST\",\n        body: requestUrlString,\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n      });\n      const data = await response.json();\n      return { error: false, jobId: data?.serviceResponse?.jobID ?? null };\n    } catch (error) {\n      return { error: true, jobId: null };\n    }\n  };\n\n  // Fetches the status for a submitted job\n  getJobStatusById = async (jobId) => {\n    // If the jobId is missing, we return an error.\n    if (!jobId) {\n      return { error: true, status: null };\n    }\n    // If not, let's create the url used to fetch the parameters.\n    const url = this.#createProductStatusUrl(jobId);\n    // And then try to fetch the status with the url...\n    try {\n      const response = await hfetch(url);\n      const data = await response.json();\n      return { error: false, status: data?.status ?? null };\n    } catch (error) {\n      return { error: true, status: null };\n    }\n  };\n\n  // Returns the url needed to fetch the product parameters from FME-server.\n  #createGetParametersUrl = (product) => {\n    return `${this.#mapServiceBase}/fmeproxy/fmerest/v3/repositories/${\n      product.repository\n    }/items/${product.workspace}/parameters/`;\n  };\n\n  // Returns the url needed to post a request to start a workspace.\n  #createSubmitProductRequestUrl = (product) => {\n    return `${\n      this.#mapServiceBase\n    }/fmeproxy/fmerest/v3/transformations/submit/${product.repository}/${\n      product.workspace\n    }/`;\n  };\n\n  // Returns the base url used to post a request to submit a\n  // data-download job.\n  #createDataDownloadUrl = (product) => {\n    return `${this.#mapServiceBase}/fmeproxy/fmedatadownload/${\n      product.repository\n    }/${product.workspace}/`;\n  };\n\n  // Returns the url needed to fetch information about a submitted job.\n  // The required parameter, jobId is a string returned when queuing a job.\n  #createProductStatusUrl = (jobId) => {\n    return `${\n      this.#mapServiceBase\n    }/fmeproxy/fmerest/v3/transformations/jobs/id/${jobId}/`;\n  };\n}\nexport default FmeServerModel;\n"],"names":["StyledCard","styled","MUICard","theme","marginBottom","spacing","width","breakpoints","down","boxShadow","borderBottom","borderRadius","margin","justifyContent","StyledAvatar","Avatar","background","palette","text","primary","Card","React","state","open","render","abstract","icon","onClick","title","this","props","avatar","subheader","defaultProps","BaseWindowPlugin","constructor","super","handleButtonClick","e","showWindow","hideOtherPluginWindows","runCallback","app","globalObserver","publish","opts","activeTool","type","eventName","pluginName","activeMap","config","pushPluginIntoHistory","custom","description","windowVisible","onWindowOpen","setState","onWindowShow","closeWindow","undefined","onWindowHide","toLowerCase","options","visibleAtStart","mapConfig","map","clean","isMobile","visibleAtStartMobile","color","height","position","registerWindowPlugin","subscribe","closeEventName","componentDidUpdate","prevProps","pluginIsWidget","target","includes","renderWindow","onClose","onResize","onMaximize","onMinimize","draggingEnabled","customPanelHeaderButtons","resizingEnabled","scrollable","allowMaximizedWindow","disablePadding","mode","layerswitcherConfig","tools","find","t","children","renderDrawerButton","renderWidgetButton","renderControlButton","createPortal","mdUp","button","divider","selected","document","getElementById","id","mdDown","localObserver","Observer","mapViewModel","MapViewModel","fmeServerModel","FmeServerModel","model","settings","getActiveUserEmail","getProduct","groupName","productName","length","products","product","group","name","makeOrder","productParameters","userEmail","promptForEmail","requestString","noGeomAttributeSupplied","geoJson","getAllFeaturesAsGeoJson","geoAttribute","forEach","parameter","value","defaultValue","selectedArray","join","getRangeSliderValueAndStep","decimalPrecision","Number","padStart","step","getRangeSliderMinimum","minimumExclusive","minimum","getRangeSliderMaximum","maximumExclusive","maximum","parametersToSend","push","getParametersToRender","parameters","filter","getInfoUrl","infoUrl","shouldPromptForEmail","isValidEmail","emailString","test","getProductParameters","async","error","url","response","hfetch","json","body","JSON","stringify","publishedParameters","method","credentials","headers","jobId","requestUrl","requestUrlString","data","serviceResponse","jobID","getJobStatusById","status","repository","workspace","appConfig","mapserviceBase","userDetails","mail"],"sourceRoot":""}
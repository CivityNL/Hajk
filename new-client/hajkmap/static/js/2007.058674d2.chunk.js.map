{"version":3,"file":"static/js/2007.058674d2.chunk.js","mappings":"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","sources":["plugins/Draw/components/Symbology.js","../node_modules/@mui/material/NativeSelect/NativeSelect.js"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport { CompactPicker as ColorPicker } from \"react-color\";\nimport NativeSelect from \"@mui/material/NativeSelect\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Input from \"@mui/material/Input\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\n\nconst StyledFormControl = styled(FormControl)(({ theme }) => ({\n  width: \"100%\",\n  marginBottom: theme.spacing(1),\n}));\n\nconst Row = styled(\"div\")(({ theme }) => ({\n  width: \"100%\",\n  marginBottom: theme.spacing(1),\n}));\n\nclass Symbology extends React.PureComponent {\n  state = {\n    shape: \"LineString\",\n  };\n\n  componentDidMount() {\n    const { model } = this.props;\n    this.setState({\n      fontSize: model.fontSize,\n      fontTextColor: model.fontTextColor,\n      fontBackColor: model.fontBackColor,\n      fontStroke: model.fontStroke,\n      pointText: model.pointText,\n      pointColor: model.pointColor,\n      pointRadius: model.pointRadius,\n      lineColor: model.lineColor,\n      lineWidth: model.lineWidth,\n      lineStyle: model.lineStyle,\n      circleFillColor: model.circleFillColor,\n      circleLineColor: model.circleLineColor,\n      circleFillOpacity: model.circleFillOpacity,\n      circleLineStyle: model.circleLineStyle,\n      circleLineWidth: model.circleLineWidth,\n      circleRadius: model.circleRadius,\n      polygonLineColor: model.polygonLineColor,\n      polygonLineWidth: model.polygonLineWidth,\n      polygonLineStyle: model.polygonLineStyle,\n      polygonFillColor: model.polygonFillColor,\n      polygonFillOpacity: model.polygonFillOpacity,\n      squareFillColor: model.squareFillColor,\n      squareLineColor: model.squareLineColor,\n      squareFillOpacity: model.squareFillOpacity,\n      squareLineStyle: model.squareLineStyle,\n      squareLineWidth: model.squareLineWidth,\n      pointSettings: model.pointSettings,\n    });\n  }\n\n  update = (prop) => (e) => {\n    var value = e.hex ? e.hex : e.target.value,\n      state = {};\n\n    if (e.target && e.target.type === \"checkbox\") {\n      value = e.target.checked;\n    }\n\n    if (typeof value === \"string\") {\n      value = !Number.isNaN(parseFloat(value))\n        ? parseFloat(value)\n        : !Number.isNaN(parseInt(value))\n        ? parseInt(value)\n        : value;\n    }\n    state[prop] = value;\n    this.setState(state);\n    this.props.model[prop] = value;\n  };\n\n  renderPointSettings() {\n    switch (this.state.pointSettings) {\n      case \"point\":\n        return (\n          <Row>\n            <StyledFormControl>\n              <div>Färg</div>\n              <ColorPicker\n                color={this.state.pointColor}\n                onChange={this.update(\"pointColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Storlek</InputLabel>\n              <NativeSelect\n                value={this.state.pointRadius}\n                onChange={this.update(\"pointRadius\")}\n              >\n                <option value=\"4\">Liten</option>\n                <option value=\"7\">Normal</option>\n                <option value=\"14\">Stor</option>\n                <option value=\"20\">Större</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </Row>\n        );\n      case \"symbol\":\n        return <Row>Val av ikon är ännu inte tillgängligt.</Row>;\n      default:\n        return undefined;\n    }\n  }\n\n  render() {\n    const { type } = this.props;\n    switch (type) {\n      case \"Text\":\n        if (this.state.fontStroke === undefined) {\n          return <Row />;\n        }\n        return (\n          <div>\n            <Row>\n              <StyledFormControl>\n                <InputLabel variant=\"standard\">Textstorlek</InputLabel>\n                <NativeSelect\n                  value={this.state.fontSize}\n                  onChange={this.update(\"fontSize\")}\n                >\n                  <option value=\"8\">8</option>\n                  <option value=\"10\">10</option>\n                  <option value=\"12\">12</option>\n                  <option value=\"14\">14</option>\n                  <option value=\"16\">16</option>\n                  <option value=\"18\">18</option>\n                  <option value=\"20\">20</option>\n                  <option value=\"30\">30</option>\n                  <option value=\"40\">40</option>\n                  <option value=\"60\">60</option>\n                  <option value=\"80\">100</option>\n                </NativeSelect>\n              </StyledFormControl>\n            </Row>\n            <Row>\n              <StyledFormControl>\n                <div>Textfärg</div>\n                <ColorPicker\n                  color={this.state.fontTextColor}\n                  onChange={this.update(\"fontTextColor\")}\n                />\n              </StyledFormControl>\n            </Row>\n            <Row>\n              <StyledFormControl>\n                <div>Bakgrundsfärg text</div>\n                <ColorPicker\n                  color={this.state.fontBackColor}\n                  onChange={this.update(\"fontBackColor\")}\n                />\n              </StyledFormControl>\n            </Row>\n            <Row>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={this.state.fontStroke}\n                    onChange={this.update(\"fontStroke\")}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Ingen bakgrundsfärg\"\n              />\n            </Row>\n          </div>\n        );\n      case \"Point\":\n        return (\n          <div>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Välj typ</InputLabel>\n              <NativeSelect\n                value={this.state.pointSettings}\n                onChange={this.update(\"pointSettings\")}\n              >\n                <option key=\"point\" value=\"point\">\n                  Punkt\n                </option>\n                <option key=\"symbol\" value=\"symbol\">\n                  Symbol\n                </option>\n              </NativeSelect>\n            </StyledFormControl>\n            {this.renderPointSettings()}\n          </div>\n        );\n      case \"LineString\":\n        return (\n          <div>\n            <StyledFormControl>\n              <div>Färg</div>\n              <ColorPicker\n                color={this.state.lineColor}\n                onChange={this.update(\"lineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Tjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.lineWidth}\n                onChange={this.update(\"lineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Stil</InputLabel>\n              <NativeSelect\n                value={this.state.lineStyle}\n                onChange={this.update(\"lineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      case \"Circle\":\n        if (this.state.circleRadius === undefined) {\n          return <div />;\n        }\n        return (\n          <div>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Ange radie: </InputLabel>\n              <Input\n                type=\"text\"\n                value={this.state.circleRadius}\n                onChange={this.update(\"circleRadius\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Linjefärg</div>\n              <ColorPicker\n                color={this.state.circleLineColor}\n                onChange={this.update(\"circleLineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Fyllnadsfärg</div>\n              <ColorPicker\n                color={this.state.circleFillColor}\n                onChange={this.update(\"circleFillColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Opacitet</InputLabel>\n              <NativeSelect\n                value={this.state.circleFillOpacity}\n                onChange={this.update(\"circleFillOpacity\")}\n              >\n                <option value=\"0\">0% (genomskinlig)</option>\n                <option value=\"0.25\">25%</option>\n                <option value=\"0.5\">50%</option>\n                <option value=\"0.75\">75%</option>\n                <option value=\"1\">100% (fylld)</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjetjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.circleLineWidth}\n                onChange={this.update(\"circleLineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjestil</InputLabel>\n              <NativeSelect\n                value={this.state.circleLineStyle}\n                onChange={this.update(\"circleLineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      case \"Polygon\":\n        return (\n          <div>\n            <StyledFormControl>\n              <div>Linjefärg</div>\n              <ColorPicker\n                color={this.state.polygonLineColor}\n                onChange={this.update(\"polygonLineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Fyllnadsfärg</div>\n              <ColorPicker\n                color={this.state.polygonFillColor}\n                onChange={this.update(\"polygonFillColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Opacitet</InputLabel>\n              <NativeSelect\n                value={this.state.polygonFillOpacity}\n                onChange={this.update(\"polygonFillOpacity\")}\n              >\n                <option value=\"0\">0% (genomskinlig)</option>\n                <option value=\"0.25\">25%</option>\n                <option value=\"0.5\">50%</option>\n                <option value=\"0.75\">75%</option>\n                <option value=\"1\">100% (fylld)</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjetjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.polygonLineWidth}\n                onChange={this.update(\"polygonLineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjestil</InputLabel>\n              <NativeSelect\n                value={this.state.polygonLineStyle}\n                onChange={this.update(\"polygonLineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      case \"Square\":\n        return (\n          <div>\n            <StyledFormControl>\n              <div>Linjefärg</div>\n              <ColorPicker\n                color={this.state.squareLineColor}\n                onChange={this.update(\"squareLineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Fyllnadsfärg</div>\n              <ColorPicker\n                color={this.state.squareFillColor}\n                onChange={this.update(\"squareFillColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Opacitet</InputLabel>\n              <NativeSelect\n                value={this.state.squareFillOpacity}\n                onChange={this.update(\"squareFillOpacity\")}\n              >\n                <option value=\"0\">0% (genomskinlig)</option>\n                <option value=\"0.25\">25%</option>\n                <option value=\"0.5\">50%</option>\n                <option value=\"0.75\">75%</option>\n                <option value=\"1\">100% (fylld)</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjetjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.squareLineWidth}\n                onChange={this.update(\"squareLineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjestil</InputLabel>\n              <NativeSelect\n                value={this.state.squareLineStyle}\n                onChange={this.update(\"squareLineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      default:\n        return <div />;\n    }\n  }\n}\n\nexport default Symbology;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n  _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n  const {\n      className,\n      children,\n      classes: classesProp = {},\n      IconComponent = ArrowDropDownIcon,\n      input = defaultInput,\n      inputProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n  const classes = useUtilityClasses(ownerState);\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, _extends({\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: _extends({\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined\n      }, inputProps, input ? input.props.inputProps : {}),\n      ref\n    }, other, {\n      className: clsx(classes.root, input.props.className, className)\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;"],"names":["StyledFormControl","styled","FormControl","theme","width","marginBottom","spacing","Row","Symbology","React","state","shape","update","prop","e","value","hex","target","type","checked","Number","isNaN","parseFloat","parseInt","this","setState","props","model","componentDidMount","fontSize","fontTextColor","fontBackColor","fontStroke","pointText","pointColor","pointRadius","lineColor","lineWidth","lineStyle","circleFillColor","circleLineColor","circleFillOpacity","circleLineStyle","circleLineWidth","circleRadius","polygonLineColor","polygonLineWidth","polygonLineStyle","polygonFillColor","polygonFillOpacity","squareFillColor","squareLineColor","squareFillOpacity","squareLineStyle","squareLineWidth","pointSettings","renderPointSettings","color","onChange","variant","render","undefined","control","label","_excluded","_excluded2","defaultInput","_jsx","Input","NativeSelect","inProps","ref","useThemeProps","name","className","children","classes","classesProp","IconComponent","ArrowDropDownIcon","input","inputProps","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","getNativeSelectUtilityClasses","useUtilityClasses","_extends","otherClasses","inputComponent","NativeSelectInput","clsx","muiName"],"sourceRoot":""}
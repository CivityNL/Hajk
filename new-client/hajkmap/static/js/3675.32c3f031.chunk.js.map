{"version":3,"file":"static/js/3675.32c3f031.chunk.js","mappings":"4OAqPA,UA7OA,MACEA,YAAYC,GAAW,IAAD,SAmFtBC,UAAaC,IAEX,MAAMC,EAAU,IAAIC,EAAAA,EAAQ,CAC1BC,SAAU,IAAIC,EAAAA,EAAMJ,KAIhBK,EAAc,IAAIC,EAAAA,GAAM,CAC5BC,MAAO,IAAIC,EAAAA,EAAK,CACdC,OAAQ,CAAC,GAAK,GACdC,MAAO,IACPC,IAAK,iBAGTV,EAAQW,SAASP,GAGjBQ,KAAKC,OAAOC,YAAYC,QAGxBH,KAAKI,OAAOC,WAAWjB,EAAvB,EAvGoB,KA6GtBkB,eAAiB,KACXN,KAAKC,OAAOC,YAAYK,cAAcC,OAAS,GACjDR,KAAKS,IACFC,UACAC,UACCX,KAAKC,OACFC,YACAK,cAAc,GACdK,cACAC,iBAER,EAxHmB,KA8HtBC,aAAe,KACTd,KAAKC,OAAOC,YAAYK,cAAcC,OAAS,GACjDR,KAAKS,IACFC,UACAK,IAAIf,KAAKC,OAAOC,YAAYK,cAAc,GAAGK,cACjD,EAnImB,KAyItBI,iBAAmB,KACjB,GAAIC,UAAUC,YAAa,CACzB,MAAMC,EAAU,CACdC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,KAGdL,UAAUC,YAAYK,oBACnBC,IACC,MAAMC,EAAQ,IAAIlC,EAAAA,EAAM,CAACiC,EAAIE,OAAOC,UAAWH,EAAIE,OAAOE,WAC1DH,EAAMI,UACJ,YACA7B,KAAKS,IAAIC,UAAUoB,gBAAgBC,WAErC/B,KAAKb,YAAcsC,EAAMZ,iBACzBb,KAAKgC,cAAcC,QAAQ,iBAAkB,CAC3C9C,YAAaa,KAAKb,YAClB+C,KAAMlC,KAAKS,IAAIC,UAAUoB,gBAAgBC,UACzCI,OAAO,IAETnC,KAAKS,IAAIC,UAAUC,UAAUc,EAAMZ,iBAAnC,IAEDuB,IAEoB,IAAfA,EAAMC,MACRrC,KAAKgC,cAAcC,QAAQ,8BAC5B,GAEHd,EAEH,GAxKmB,KAgLtBmB,YAAc,KACZtC,KAAKC,OAAOC,YAAYC,QACxBH,KAAKgC,cAAcC,QAAQ,oBAC3BjC,KAAKb,iBAAcoD,CAAnB,EAnLoB,KA4LtBC,cAAiBC,IAEfzC,KAAKb,YAAcsD,EAAErD,QAAQwB,cAAcC,iBAC3Cb,KAAKd,UAAUc,KAAKb,aAEpBa,KAAKgC,cAAcC,QAAQ,iBAAkB,CAC3C9C,YAAaa,KAAKb,YAClB+C,KAAMlC,KAAKS,IAAIC,UAAUoB,gBACzBK,OAAO,GAHT,EAhMAnC,KAAK0C,IAAMzD,EAASyD,IACpB1C,KAAKS,IAAMxB,EAASwB,IACpBT,KAAKgC,cAAgB/C,EAAS+C,cAC9BhC,KAAK2C,kBAAL,UAAyB1D,EAASkC,QAAQwB,yBAA1C,SACA3C,KAAK4C,kBAAL,UAAyB3D,EAASkC,QAAQyB,yBAA1C,SAEA5C,KAAKb,iBAAcoD,EACnBvC,KAAK6C,gBAAkB5D,EAASkC,QAAQ0B,gBACnC7C,KAAK6C,iBAAmD,IAAhC7C,KAAK6C,gBAAgBrC,OAehDR,KAAK6C,gBAAgBC,SAASC,IAAO,IAAD,gBAClCA,EAAEV,KAAF,UAASU,EAAEV,YAAX,QAAmB,GACnBU,EAAEC,UAAF,UAAcD,EAAEC,iBAAhB,QAA6B,EAC7BD,EAAEE,QAAF,UAAYF,EAAEE,eAAd,SACAF,EAAEG,MAAF,UAAUH,EAAEG,aAAZ,QAAqB,GACrBH,EAAEI,OAAF,UAAWJ,EAAEI,cAAb,QAAuB,GACvBJ,EAAEK,OAAF,UAAWL,EAAEK,cAAb,QAAuB,GACvBL,EAAEM,YAAF,UAAgBN,EAAEM,mBAAlB,QAAiC,GACjCN,EAAE5D,YAAF,UAAgB4D,EAAE5D,mBAAlB,QAAiC,EAAjC,IAtBFa,KAAK6C,gBAAkB,CACrB,CACER,KAAM,YACNW,UAAW,EACXC,SAAS,EACTK,KAAM,GACNJ,MAAO,QACPC,OAAQ,MACRC,OAAQ,MACRC,aAAa,IAiBnBrD,KAAKI,OAAS,IAAImD,EAAAA,EAClBvD,KAAKC,OAAS,IAAIuD,EAAAA,EAAO,CACvBC,UAAW,SACXC,OAAQ,IACRC,KAAM,mBACNC,QAAS,mBACTxD,OAAQJ,KAAKI,SAEfJ,KAAKS,IAAIoD,SAAS7D,KAAKC,QACvBD,KAAKgC,cAAc8B,UAAU,kBAAmBC,IAC9C,IAAIC,EAAoBD,EAAc,YAEpCA,EAAc,OAAa/D,KAAKS,IAAIC,UAAUoB,gBAAgBC,YAE9DiC,GAAoBnC,EAAAA,EAAAA,IAClBkC,EAAc,YACdA,EAAc,KACd/D,KAAKS,IAAIC,UAAUoB,gBAAgBC,YAGvC/B,KAAKd,UAAU8E,EAAf,GAEH,CAEDC,WACEjE,KAAKkE,iBACLlE,KAAKgC,cAAcC,QAAQ,gBACvBjC,KAAK4C,mBACP5C,KAAKgC,cAAcC,QAAQ,iBAAkB,CAC3C9C,YAAaa,KAAKS,IAAIC,UAAUyD,YAChCjC,KAAMlC,KAAKS,IAAIC,UAAUoB,gBAAgBC,UACzCI,OAAO,GAGZ,CAEDiC,aACEpE,KAAKqE,oBACLrE,KAAKC,OAAOC,YAAYC,QAExBH,KAAKgC,cAAcC,QAAQ,eAC5B,CA2HDiC,iBACElE,KAAKsE,KAAO,IAAIC,EAAAA,GAAK,CACnBnE,OAAQJ,KAAKI,OACboE,KAAM,QACNC,MAAO,IAAIhF,EAAAA,GAAM,CACfC,MAAO,IAAIgF,EAAAA,EAAY,CACrBC,OAAQ,EACRC,OAAQ,IAAIC,EAAAA,EAAO,CACjBC,MAAO,uBAETC,KAAM,IAAIC,EAAAA,EAAK,CACbF,MAAO,mCAKf9E,KAAKsE,KAAKW,GAAG,UAAWjF,KAAKwC,eAC7BxC,KAAKS,IAAIyD,eAAelE,KAAKsE,MAC7BtE,KAAKS,IAAIyE,UAAUC,IAAI,eAIvBnF,KAAKS,IAAI2E,WAAWD,IAAI,cACzB,CAEDd,oBACErE,KAAKS,IAAI2E,WAAWC,OAAO,eAC3BrF,KAAKS,IAAI4D,kBAAkBrE,KAAKsE,MAChCtE,KAAKS,IAAIyE,UAAUG,OAAO,cAC3B,CAEDC,gBACEtF,KAAKgC,cAAcC,QAAQ,eAC5B,E","sources":["plugins/Coordinates/CoordinatesModel.js"],"sourcesContent":["import { transform } from \"ol/proj\";\nimport Feature from \"ol/Feature\";\nimport Vector from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport Point from \"ol/geom/Point.js\";\nimport Draw from \"ol/interaction/Draw.js\";\nimport { Circle as CircleStyle, Fill, Stroke, Style, Icon } from \"ol/style\";\n\nclass CoordinatesModel {\n  constructor(settings) {\n    this.app = settings.app;\n    this.map = settings.map;\n    this.localObserver = settings.localObserver;\n    this.thousandSeparator = settings.options.thousandSeparator ?? false;\n    this.showFieldsOnStart = settings.options.showFieldsOnStart ?? false;\n\n    this.coordinates = undefined;\n    this.transformations = settings.options.transformations;\n    if (!this.transformations || this.transformations.length === 0) {\n      this.transformations = [\n        {\n          code: \"EPSG:4326\",\n          precision: 3,\n          default: false,\n          hint: \"\",\n          title: \"WGS84\",\n          xtitle: \"Lng\",\n          ytitle: \"Lat\",\n          inverseAxis: true,\n        },\n      ];\n    } else {\n      // Give default values in case none is set\n      this.transformations.forEach((t) => {\n        t.code = t.code ?? \"\";\n        t.precision = t.precision ?? 3;\n        t.default = t.default ?? false;\n        t.title = t.title ?? \"\";\n        t.xtitle = t.xtitle ?? \"\";\n        t.ytitle = t.ytitle ?? \"\";\n        t.inverseAxis = t.inverseAxis ?? \"\";\n        t.coordinates = t.coordinates ?? \"\";\n      });\n    }\n\n    this.source = new VectorSource();\n    this.vector = new Vector({\n      layerType: \"system\",\n      zIndex: 5000,\n      name: \"pluginCoordinate\",\n      caption: \"Coordinate layer\",\n      source: this.source,\n    });\n    this.map.addLayer(this.vector);\n    this.localObserver.subscribe(\"newCoordinates\", (incomingCoords) => {\n      let transformedCoords = incomingCoords[\"coordinates\"];\n      if (\n        incomingCoords[\"proj\"] !== this.map.getView().getProjection().getCode()\n      ) {\n        transformedCoords = transform(\n          incomingCoords[\"coordinates\"],\n          incomingCoords[\"proj\"],\n          this.map.getView().getProjection().getCode()\n        );\n      }\n      this.addMarker(transformedCoords);\n    });\n  }\n\n  activate() {\n    this.addInteraction();\n    this.localObserver.publish(\"showSnackbar\");\n    if (this.showFieldsOnStart) {\n      this.localObserver.publish(\"newCoordinates\", {\n        coordinates: this.map.getView().getCenter(),\n        proj: this.map.getView().getProjection().getCode(),\n        force: true,\n      });\n    }\n  }\n\n  deactivate() {\n    this.removeInteraction();\n    this.vector.getSource().clear();\n\n    this.localObserver.publish(\"hideSnackbar\");\n  }\n\n  /**\n   * @summary Removes any previous markers and adds a new one to the given coordinates.\n   * @memberof CoordinatesModel\n   */\n  addMarker = (coordinates) => {\n    // Prepare the feature\n    const feature = new Feature({\n      geometry: new Point(coordinates),\n    });\n\n    // Style it with a nice icon\n    const styleMarker = new Style({\n      image: new Icon({\n        anchor: [0.5, 1],\n        scale: 0.15,\n        src: \"marker.png\",\n      }),\n    });\n    feature.setStyle(styleMarker);\n\n    // Remove any previous markers\n    this.vector.getSource().clear();\n\n    // Add the new marker\n    this.source.addFeature(feature);\n  };\n\n  /**\n   * @summary Pans so the marker is at the center of the view\n   */\n  centerOnMarker = () => {\n    if (this.vector.getSource().getFeatures().length > 0) {\n      this.map\n        .getView()\n        .setCenter(\n          this.vector\n            .getSource()\n            .getFeatures()[0]\n            .getGeometry()\n            .getCoordinates()\n        );\n    }\n  };\n\n  /**\n   * @summary Zooms in on and centers on the marker\n   */\n  zoomOnMarker = () => {\n    if (this.vector.getSource().getFeatures().length > 0) {\n      this.map\n        .getView()\n        .fit(this.vector.getSource().getFeatures()[0].getGeometry());\n    }\n  };\n\n  /**\n   * @summary Gets the user's position and puts the marker there\n   */\n  goToUserLocation = () => {\n    if (navigator.geolocation) {\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 30000,\n      };\n\n      navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          const point = new Point([pos.coords.longitude, pos.coords.latitude]);\n          point.transform(\n            \"EPSG:4326\",\n            this.map.getView().getProjection().getCode()\n          );\n          this.coordinates = point.getCoordinates();\n          this.localObserver.publish(\"newCoordinates\", {\n            coordinates: this.coordinates,\n            proj: this.map.getView().getProjection().getCode(),\n            force: true,\n          });\n          this.map.getView().setCenter(point.getCoordinates());\n        },\n        (error) => {\n          // If error code is 1 (User denied Geolocation), show Snackbar with instructions to enable it again\n          if (error.code === 1) {\n            this.localObserver.publish(\"location-permissions-denied\");\n          }\n        },\n        options\n      );\n    }\n  };\n\n  /**\n   * @summary Executed when the reset button is pressed and sends a request\n   * to all transformations to reset their values to empty strings.\n   * Also removes the marker\n   */\n  resetCoords = () => {\n    this.vector.getSource().clear();\n    this.localObserver.publish(\"resetCoordinates\");\n    this.coordinates = undefined;\n  };\n\n  /**\n   * @summary When draw has ended, get the coordinates for the point\n   * drawn and add a marker to those coordinates.\n   *\n   * @memberof CoordinatesModel\n   */\n  handleDrawEnd = (e) => {\n    // Grab coordinates from the Point that has been drawn\n    this.coordinates = e.feature.getGeometry().getCoordinates();\n    this.addMarker(this.coordinates);\n\n    this.localObserver.publish(\"newCoordinates\", {\n      coordinates: this.coordinates,\n      proj: this.map.getView().getProjection(),\n      force: true,\n    });\n  };\n\n  addInteraction() {\n    this.draw = new Draw({\n      source: this.source,\n      type: \"Point\",\n      style: new Style({\n        image: new CircleStyle({\n          radius: 5,\n          stroke: new Stroke({\n            color: \"rgba(0, 0, 0, 0.7)\",\n          }),\n          fill: new Fill({\n            color: \"rgba(255, 255, 255, 0.2)\",\n          }),\n        }),\n      }),\n    });\n    this.draw.on(\"drawend\", this.handleDrawEnd);\n    this.map.addInteraction(this.draw);\n    this.map.clickLock.add(\"coordinates\");\n\n    // Add snap interactions AFTER measure source has been added\n    // this will allow us to snap to the newly added source too\n    this.map.snapHelper.add(\"coordinates\");\n  }\n\n  removeInteraction() {\n    this.map.snapHelper.delete(\"coordinates\");\n    this.map.removeInteraction(this.draw);\n    this.map.clickLock.delete(\"coordinates\");\n  }\n\n  closeSnackbar() {\n    this.localObserver.publish(\"hideSnackbar\");\n  }\n}\n\nexport default CoordinatesModel;\n"],"names":["constructor","settings","addMarker","coordinates","feature","Feature","geometry","Point","styleMarker","Style","image","Icon","anchor","scale","src","setStyle","this","vector","getSource","clear","source","addFeature","centerOnMarker","getFeatures","length","map","getView","setCenter","getGeometry","getCoordinates","zoomOnMarker","fit","goToUserLocation","navigator","geolocation","options","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","pos","point","coords","longitude","latitude","transform","getProjection","getCode","localObserver","publish","proj","force","error","code","resetCoords","undefined","handleDrawEnd","e","app","thousandSeparator","showFieldsOnStart","transformations","forEach","t","precision","default","title","xtitle","ytitle","inverseAxis","hint","VectorSource","Vector","layerType","zIndex","name","caption","addLayer","subscribe","incomingCoords","transformedCoords","activate","addInteraction","getCenter","deactivate","removeInteraction","draw","Draw","type","style","CircleStyle","radius","stroke","Stroke","color","fill","Fill","on","clickLock","add","snapHelper","delete","closeSnackbar"],"sourceRoot":""}
{"version":3,"file":"static/js/6187.8e09bcea.chunk.js","mappings":"inBAQO,MAAMA,EAAa,CACxB,CACEC,GAAI,MACJC,QAAS,4BACTC,YACE,uHAEFC,MAAM,SAAC,IAAD,KAER,CACEH,GAAI,OACJC,QAAS,6BACTC,YACE,kFAEFC,MAAM,SAAC,IAAD,KAER,CACEH,GAAI,OACJC,QAAS,gCACTC,YACE,kJAGFC,MAAM,SAAC,IAAD,KAER,CACEH,GAAI,SACJC,QAAS,sBACTC,YACE,6GAEFC,MAAM,SAAC,IAAD,KAER,CACEH,GAAI,OACJC,QAAS,oBACTC,YACE,sIAEFC,MAAM,SAAC,IAAD,KAER,CACEH,GAAI,SACJC,QAAS,8BACTC,YACE,sIAGFC,MAAM,SAAC,IAAD,KAER,CACEH,GAAI,WACJC,QAAS,gBACTC,YAAa,8DACbC,MAAM,SAAC,IAAD,MAIGC,EAAc,CACzB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGWC,EAAa,CACxB,CACEC,KAAM,SACNC,MAAO,SACPN,QACE,4JAGJ,CACEK,KAAM,aACNC,MAAO,OACPN,QACE,mGAGJ,CACEK,KAAM,YACNC,MAAO,YACPN,QACE,mJAGJ,CACEK,KAAM,QACNC,MAAO,OACPN,QACE,uGAGJ,CACEK,KAAM,SACNC,MAAO,wBACPN,QACE,6EAEJ,CACEK,KAAM,UACNC,MAAO,UACPN,QACE,2GAGJ,CACEK,KAAM,QACNC,MAAO,OACPN,QACE,wFAGJ,CACEK,KAAM,OACNC,MAAO,QACPN,QACE,sFAKOO,EAAuB,EACvBC,EAAgB,GAEhBC,EAAe,CAC1B,CACEJ,KAAM,QACNC,MAAO,gBACPN,QAAS,uBAEX,CACEK,KAAM,SACNC,MAAO,cACPN,QAAS,0BAEX,CACEK,KAAM,SACNC,MAAO,cACPN,QAAS,2BAIAU,EAAgB,IAAIC,IAAI,CACnC,CAAC,QAAS,MACV,CAAC,SAAU,CAAC,EAAG,IACf,CAAC,SAAU,CAAC,GAAI,MAILC,EAAe,EAEfC,EAA+B,CAC1CC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,eAAe,EACfC,SAAU,OACVC,WAAY,OACZC,UAAW,GAGAC,EAAc,SAGdC,EAAe,IAEfC,EAAe,CAC1BC,aACE,yEACFC,eAAgB,sDAChBC,YAAa,kDACbC,WACE,oHAEFC,eACE,6FAEFC,cACE,2HAEFC,UACE,6GAEFC,WACE,4EACFC,YACE,oGAEFC,UAAW,4DACXC,SAAU,6CACVC,SACE,uEACFC,SAAU,4CACVC,WAAY,0DACZC,SACE,qIAISC,EAAyB,CACpC,CAAElC,KAAM,OAAQmC,KAAM,eACtB,CAAEnC,KAAM,KAAMmC,KAAM,2BACpB,CAAEnC,KAAM,MAAOmC,KAAM,gCACrB,CAAEnC,KAAM,UAAWmC,KAAM,iBAGdC,EAA2B,CACtC,CAAEpC,KAAM,OAAQmC,KAAM,eACtB,CAAEnC,KAAM,IAAKmC,KAAM,aACnB,CAAEnC,KAAM,KAAMmC,KAAM,mBAGTE,EAAyB,CACpC,CAAEC,MAAO,EAAGH,KAAM,eAClB,CAAEG,MAAO,EAAGH,KAAM,cAClB,CAAEG,MAAO,EAAGH,KAAM,eAClB,CAAEG,MAAO,EAAGH,KAAM,gBAGPI,EAA8B,CACzCC,YAAa,CAAEC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GACvCC,UAAW,CAAEJ,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,IACrCE,WAAY,QACZC,YAAa,GAGFC,EAA8B,CACzCC,gBAAiB,UACjBC,gBAAiB,UACjBC,KAAM,G,4rBCuQR,UA/eA,MAOEC,YAAYC,GAAW,IAAD,oVAiBQ,KAAO,IAAD,EAElC,iBADkBC,EAAAA,QAAAA,KAAA,OAAuBC,KAAvB,OACF,wBAAhB,YAnBoB,gDAsBG,CAACC,EAAKlB,KAC7BgB,EAAAA,QAAAA,KAAA,OAAuBC,KAAvB,MAAyC,IACpCD,EAAAA,QAAAA,KAAA,OAAuBC,KAAvB,OACH,CAACC,GAAMlB,GAFT,IAvBoB,gDA8BOmB,KAC3B,OAAAF,KAAA,MAA4B,kBAAmBE,EAA/C,IA/BoB,gDAmCAC,KACpB,OAAAH,KAAA,MAA4B,WAAYG,EAAxC,IApCoB,KAyCtBC,2BAA8BN,KAC5B,OAAAE,KAAA,MAA4B,oBAAqBF,EAAjD,EA1CoB,KA+CtBO,2BAA8BP,KAC5B,OAAAE,KAAA,MAA4B,oBAAqBF,EAAjD,EAhDoB,gDAqDCQ,IACd,IACFA,EACHnE,GAAI6D,KAAKO,uBACTC,KAAMR,KAAKS,oBACXC,UAAU,OAAAV,KAAA,MACPW,sBACAC,QAAQC,IAA0B,IAApBA,EAAEC,IAAI,YACpBC,KAAKF,IAAD,OAAOb,KAAP,MAAsCa,SA7D3B,gDAqEOA,IAE3BA,EAAEG,IAAI,mBAAmB,OAAAhB,KAAA,MAAgBiB,wBAAwBJ,IAG7DA,EAAEK,wBAAyBC,EAAAA,IAC7B,OAAAnB,KAAA,MAA+Ba,IAG1B,OAAAb,KAAA,MAAoBoB,aAAaP,MA9EpB,KAkFtBQ,mBAAqB,CAACC,EAAUC,KAGzB,OAAAvB,KAAD,MAKG,QADCsB,EAIG3D,EAAAA,aAAa,GAAD,OAAI4D,EAAJ,SAIZ5D,EAAAA,aAAa,GAAD,OAAI2D,EAAJ,SAXd,KAtFW,KAsGtBE,qBAAuB,IACHzB,EAAAA,QAAAA,KAAA,OAAuBC,KAAvB,OACF,mBAAyBhB,EAAAA,4BAxGrB,KA4GtByC,qBAAuB,IACH1B,EAAAA,QAAAA,KAAA,OAAuBC,KAAvB,OACF,mBAAyBP,EAAAA,4BA9GrB,KAkHtBiC,kBAAqBvF,GACZD,EAAAA,WAAAA,MAAiBoF,GACfA,EAASnF,KAAOA,IApHL,KAyHtBsE,kBAAqBkB,IACN,IAAIC,MACLC,eAAe,UAAWF,IAAO,OAAI3B,KAAJ,OA3HzB,KA+HtBO,qBAAuB,IACduB,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAG,GAhIvB,gDAqIJC,IAChB,IAAK,MAAOjC,EAAKlB,KAAUjC,EAAAA,cAAAA,UAAyB,CAGlD,GAAIiC,IAAUmD,EACZ,OAAOjC,EAKT,GACEkC,MAAMC,QAAQrD,IACdoD,MAAMC,QAAQF,IACdnD,EAAMsD,OAAOC,GAAMJ,EAASK,SAASD,KAErC,OAAOrC,CAEV,CAKD,OAHAuC,QAAQC,MAAR,wGACmGP,IAE5F,IAAP,IA3JoB,gDAgKGpC,IACvB,MAAM,YAAEb,EAAF,UAAeK,EAAf,YAA0BE,EAA1B,SAAuC0C,GAAapC,EAG1D,MAAO,CACLb,aAHwB,OAAAe,KAAA,MAAgB0C,cAAczD,GAItDK,WAHsB,OAAAU,KAAA,MAAgB0C,cAAcpD,GAIpDE,cACA0C,WAJF,IApKoB,gDA6KDpC,GACZ,IAAI6C,EAAAA,EAAO,CAChBC,OAAQ,EACRC,OAAQ,IAAIC,EAAAA,EAAO,CACjBC,MAAOjD,EAASb,YAChB+D,MAAOlD,EAASN,YAChB0C,SAAUpC,EAASoC,WAErBe,KAAM,IAAIC,EAAAA,EAAK,CACbH,MAAOjD,EAASR,gBAtLA,gDA2LE,IACf,IAAI6D,EAAAA,GAAM,CACfN,OAAQ,IAAIC,EAAAA,EAAO,CACjBC,MAAO,qBACPC,MAAO,IAETC,KAAM,IAAIC,EAAAA,EAAK,CACbH,MAAO,6BAlMS,gDA2MOK,IAC3B,IACE,MAAMC,EAAWD,EAAQlC,cACnBoC,EAASD,EAASE,YAClBX,EAASS,EAASG,YACxBJ,EAAQpC,IAAI,gBAAiB4B,GAC7BQ,EAAQpC,IAAI,gBAAiByC,KAAKC,UAAUJ,IAC5CF,EAAQO,YAAY,IAAIC,EAAAA,EAAMN,GAK/B,CAJC,MAAOb,GACPD,QAAQC,MAAR,sEACiEA,GAElE,KAvNmB,gDA6NDoB,IACnB,IAKE,OAHqBJ,KAAKC,UAAUG,GAAQC,OAGtBpG,EAAAA,YAIvB,CAHC,MAAO+E,GAEP,OADAD,QAAQC,MAAR,kDAAyDA,KAClD,CACR,KAvOmB,KA2OtBsB,gBAAmBX,IACjB,IAEE,MAAMY,GAAmB,OAAAhE,KAAA,MAAgBiB,wBAAwBmC,GAG3Da,EAAmBb,EAAQtC,IAAI,iBAErC,MAAO,CACL7B,aAAa,OAAAe,KAAA,MAAgBkE,iBAAhB,OACXF,QADW,IACXA,OADW,EACXA,EAAkBG,YAAYpB,OAEhCb,SAAQ,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAkBG,YAAYC,KACxC5E,YAAW,OAAEwE,QAAF,IAAEA,OAAF,EAAEA,EAAkBG,YAAYnB,MAC3CzD,YAAW,OAACS,KAAF,aAAsBgE,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAkBG,YAAYC,MAC9D9E,WAAW,OAAAU,KAAA,MAAgBkE,iBAAhB,OACTF,QADS,IACTA,OADS,EACTA,EAAkBK,UAAUtB,OAE9BuB,oBAAmB,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAkBvE,gBACvC6E,oBAAmB,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAkBtE,gBACvC6E,SAAQ,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAkBrE,KAK/B,CAHC,MAAO6C,GAEP,OADAD,QAAQC,MAAR,8CAAqDA,IAC9C,IACR,GApQmB,KAwQtBgC,gBAAkB,CAACrB,EAASsB,KAC1B,IAIE,MAAMC,EAAexC,MAAMC,QAAQgB,EAAQwB,YACvCxB,EAAQwB,WAAW,GACnBxB,EAAQwB,WAENP,EAAYM,EAAaE,UACzBV,EAAcQ,EAAaG,YAC3BC,EAAaJ,EAAaK,YAE1B,UAAE1F,EAAF,YAAaL,EAAb,YAA0BO,EAA1B,SAAuC0C,IAAvC,OACJlC,KADI,MACuB0E,GAE7BL,EAAUY,SAAS3F,GACnB6E,EAAYc,SAAShG,GACrBkF,EAAYe,SAAS1F,GACrB2E,EAAYgB,YAAYjD,GAIxB6C,GACEJ,EAAaS,UAAb,OACEpF,KADF,MACyB,CACrBV,YACAL,cACAO,cACA0C,cAK6B,SAA/BkB,EAAQtC,IAAI,gBACdsC,EAAQpC,IAAI,gBAAiB,CAC3BpB,KAAM8E,EAAcF,SACpB9E,gBAAiBgF,EAAcJ,oBAC/B3E,gBAAiB+E,EAAcH,qBAKpC,CAFC,MAAO9B,GACPD,QAAQC,MAAR,qDAA4DA,GAC7D,GAnTmB,KA4TtB4C,8BAAiCjC,KAEI,SAA/BA,EAAQtC,IAAI,iBAA8BsC,EAAQtC,IAAI,gBAC9B,IAA1BsC,EAAQtC,IAAI,UA/TM,KAsUtBwE,gBAAmBlC,IACjBA,EAAQpC,IACN,mBACA,OAAAhB,KAAA,MAAgBiB,wBAAwBmC,IAE1CA,EAAQpC,IAAI,aAAchB,KAAKS,qBAC/B2C,EAAQpC,IAAI,aAAchB,KAAKO,wBAG3B6C,EAAQlC,wBAAyBC,EAAAA,IACnC,OAAAnB,KAAA,MAA+BoD,EAChC,EAjVmB,KAuVtBmC,8BAAgC,WAA8B,IAA7BC,EAA4B,uDAAf,WAC5C,MAAMC,EAAY1F,EAAAA,QAAAA,KAAA,OAAuB,EAAvB,OACZ2F,EAAiBD,EAAS,iBAAuB,GACvD,MAAsB,aAAfD,EACHE,EAAe3E,KAAK4E,IAClB,SAAI,GAAJ,GAAoBC,YAAYD,KAElCD,CACL,EA/VqB,KAkWtBG,uBAAyB,IACL9F,EAAAA,QAAAA,KAAA,OAAuBC,KAAvB,OACc,UAAgB,GApW5B,KA0WtB8F,oBAAuB1C,IACrB,MAAMlD,EAAkBF,KAAKuF,8BAA8B,WACrDI,GAAgB,OAAA3F,KAAA,MAAoBoB,aAAagC,IACvD,OAAApD,KAAA,MAA+B,CAC7B2F,KACGzF,EAAgB+B,MAAM,EAAGtF,EAAAA,qBAAuB,IAFrD,EA7WoB,KAsXtBoJ,0BAA6BC,IAG3B,MAAMnC,GAAM,OAAG7D,KAAH,MAA4BgG,IAGlC,SAAEtF,GAAamD,EACrB,IAAKnD,GAAgC,IAApBA,EAASoD,OACxB,MAAO,CACLmC,OAAQ,SACRC,QAASvI,EAAAA,aAAAA,gBAOb,KAFmB,OAAGqC,KAAH,MAA0B6D,GAG3C,MAAO,CACLoC,OAAQ,SACRC,QAASvI,EAAAA,aAAAA,cAKbqC,KAAKmG,wBAAwBH,GAE7B,MAAMI,EAAiBpG,KAAK6F,yBAO5B,OALA,OAAA7F,KAAA,MAAwB,CAAC6D,KAAWuC,KAGpC,OAAApG,KAAA,MAAgBqG,sBAChBrG,KAAKsG,eAAezC,GACb,CAAEoC,OAAQ,UAAWC,QAASvI,EAAAA,aAAAA,YAArC,EAxZoB,KA6ZtB2I,eAAkBzC,IAChBA,EAAOnD,SAAS6F,SAAS1F,KACvB,OAAAb,KAAA,MAAgBwG,YAAW,OAAAxG,KAAA,MAAoB4F,YAAY/E,GAA3D,GADF,EA9ZoB,KAoatB4F,yBAA4BtK,IAC1B,MAAMuJ,EAAiB1F,KAAKuF,8BAA8B,YAC1D,OAAAvF,KAAA,MACE0F,EAAe9E,QAAQC,IAAOA,EAAE0B,SAASpG,KAD3C,EAtaoB,KA+atBgK,wBAA2BtC,IACzB,MAAMuC,EAAiBpG,KAAK6F,0BAC5B,OAAA7F,KAAA,MACEoG,EAAexF,QACZ8F,IAAO1G,KAAK2G,mBAAmBD,EAAEE,MAAO/C,EAAO+C,SAFpD,EAjboB,KAybtBD,mBAAqB,CAACE,EAAIC,IAEN,kBAAPD,GAAiC,kBAAPC,GAI9BD,EAAGE,gBAAkBD,EAAGC,cA/bX,KAoctBC,uBAA0B5D,IAExB,GAAIA,GAAWA,EAAQlC,cAAe,CAEpC,MAAM+F,EAAmB,IAAIC,EAAAA,EAAQ,CACnC7D,SAAUD,EAAQlC,cAAciG,UAMlC,OAHAF,EAAiBG,MAAMpH,KAAKO,wBAC5B0G,EAAiBI,UAAjB,OAA0BrH,KAA1B,SAEOiH,CACR,GAhdmB,KAodtBK,oBAAsB,KACb,OAAAtH,KAAP,MArdoB,KAydtBuH,oBAAuBC,KACrB,OAAAxH,KAAA,MAAyBwH,CAAzB,EA1doB,KA8dtBC,gBAAmBrE,IAAa,IAAD,EAG7B,OAAMA,aAAmB8D,EAAAA,GAIzB,UAAO9D,EAAQtC,IAAI,wBAAnB,QAHS,EAGT,GApeA,OAAAd,KAAA,MAAsB,IAAI0H,EAAAA,GAC1B,OAAA1H,KAAA,MAAmBF,EAAS6H,YAAc,UAC1C,OAAA3H,KAAA,MAAwB,CACtB4H,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,YAEV,OAAAjI,KAAA,MAAkBF,EAASoI,WAC3B,OAAAlI,KAAA,cAAyBA,KAAzB,OACD,E,sBCjCCmI,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,kPACD,gBACJN,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,0EACD,gBACJN,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,6GACD,YACJN,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,mJACD,QACJN,EAAQ,EAAUG,C","sources":["plugins/Sketch/constants/index.js","plugins/Sketch/models/SketchModel.js","../node_modules/@mui/icons-material/FormatShapes.js","../node_modules/@mui/icons-material/ImportExport.js","../node_modules/@mui/icons-material/OpenWith.js","../node_modules/@mui/icons-material/Save.js"],"sourcesContent":["import EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FormatShapesIcon from \"@mui/icons-material/FormatShapes\";\nimport OpenWithIcon from \"@mui/icons-material/OpenWith\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport ImportExportIcon from \"@mui/icons-material/ImportExport\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\n\nexport const ACTIVITIES = [\n  {\n    id: \"ADD\",\n    tooltip: \"Voeg nieuwe objecten toe.\",\n    information:\n      \"Voeg objecten toe door op de kaart te tekenen. Begin hieronder met het\" +\n      \"kiezen van het type object dat u wilt tekenen.\",\n    icon: <EditIcon />,\n  },\n  {\n    id: \"EDIT\",\n    tooltip: \"Bewerk bestaande objecten.\",\n    information:\n      \"Bewerk nodes, wijzig de tekenvolgorde of wijzig de kleur van getekende\" +\n      \"objecten.\",\n    icon: <FormatShapesIcon />,\n  },\n  {\n    id: \"MOVE\",\n    tooltip: \"Verplaats bestaande objecten.\",\n    information:\n      \"Klik op het object op de kaart dat u wilt verplaatsen om de \" +\n      \"verplaatsingmodus te activeren. Sleep het object vervolgens naar de \" +\n      \"juiste locatie.\",\n    icon: <OpenWithIcon />,\n  },\n  {\n    id: \"DELETE\",\n    tooltip: \"Verwijder objecten.\",\n    information:\n      \"Klik op het object dat u wilt verwijderen, of klik op de onderstaande\" +\n      \"knop om alle objecten te verwijderen.\",\n    icon: <DeleteIcon />,\n  },\n  {\n    id: \"SAVE\",\n    tooltip: \"Objecten bewaren.\",\n    information:\n      \"Bewaar de objecten en ga later verder. Houd er rekening mee dat alleen \" +\n      \"objecten die zichtbaar zijn op d ekaart worden opgeslagen. .\",\n    icon: <SaveIcon />,\n  },\n  {\n    id: \"UPLOAD\",\n    tooltip: \"Download of upload objecten\",\n    information:\n      \"Download of upload objecten in .KML-formaat. Gebruik de \" +\n      \"onderstaande knoppen of sleep een .KML-bestand rechtstreeks naar de \" +\n      \"kaart. \",\n    icon: <ImportExportIcon />,\n  },\n  {\n    id: \"SETTINGS\",\n    tooltip: \"Instellingen.\",\n    information: \"Hier kunt u de instellingen van het de teken-tool wijzigen.\",\n    icon: <SettingsIcon />,\n  },\n];\n\nexport const DRAW_COLORS = [\n  \"#FF6900\",\n  \"#FCB900\",\n  \"#7BDCB5\",\n  \"#00D084\",\n  \"#8ED1FC\",\n  \"#0693E3\",\n  \"#ABB8C3\",\n  \"#EB144C\",\n  \"#F78DA7\",\n  \"#9900EF\",\n  \"#354FAD\",\n];\n\nexport const DRAW_TYPES = [\n  {\n    type: \"Circle\",\n    label: \"Cirkel\",\n    tooltip:\n      \"Teken een circel op de kaart door één keer te klikken waar de circel moet\" +\n      \" beginnen, vervolgens naar de gewenste grootte te slepen en los te laten.\",\n  },\n  {\n    type: \"LineString\",\n    label: \"Lijn\",\n    tooltip:\n      \"Teken een lijn in de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig een dubbelklik.\",\n  },\n  {\n    type: \"Rectangle\",\n    label: \"Rechthoek\",\n    tooltip:\n      \"Teken een rechthoek op de kaart door eenmaal te klikken waar de rechthoek\" +\n      \" moet beginnen, sleep vervolgens naar de gewenste grootte en laat los.\",\n  },\n  {\n    type: \"Arrow\",\n    label: \"Pijl\",\n    tooltip:\n      \"Teken een pijl in de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig met een dubbelklik.\",\n  },\n  {\n    type: \"Select\",\n    label: \"Selecteer op de kaart\",\n    tooltip:\n      \"Klik op een bestaand object op de kaart en kopieer het naar de tekenlaag.\",\n  },\n  {\n    type: \"Polygon\",\n    label: \"Polygon\",\n    tooltip:\n      \"Teken een polygoon op de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig met een dubbelklik.\",\n  },\n  {\n    type: \"Point\",\n    label: \"Punt\",\n    tooltip:\n      \"Voeg een punt in de kaart in door te klikken op de plek waar u het punt \" +\n      \"wilt hebben.\",\n  },\n  {\n    type: \"Text\",\n    label: \"Tekst\",\n    tooltip:\n      \"Voeg tekst in de kaart in door te klikken op de plek waar u de \" +\n      \"tekst wilt hebben.\",\n  },\n];\n\nexport const MAX_REMOVED_FEATURES = 4;\nexport const PLUGIN_MARGIN = 10;\n\nexport const STROKE_TYPES = [\n  {\n    type: \"solid\",\n    label: \"Ononderbroken\",\n    tooltip: \"Ononderbroken lijn.\",\n  },\n  {\n    type: \"dotted\",\n    label: \"Stippellijn\",\n    tooltip: \"Stippellijn (stippen).\",\n  },\n  {\n    type: \"dashed\",\n    label: \"Stippellijn\",\n    tooltip: \"Stippellijn (strepen).\",\n  },\n];\n\nexport const STROKE_DASHES = new Map([\n  [\"solid\", null],\n  [\"dotted\", [2, 7]],\n  [\"dashed\", [12, 7]],\n]);\n\n// A constant stating how many sketches we're allowed to save in local-storage.\nexport const MAX_SKETCHES = 3;\n\nexport const DEFAULT_MEASUREMENT_SETTINGS = {\n  showText: false,\n  showArea: false,\n  showLength: false,\n  showPerimeter: false,\n  areaUnit: \"AUTO\",\n  lengthUnit: \"AUTO\",\n  precision: 0,\n};\n\nexport const STORAGE_KEY = \"sketch\";\n\n// How many characters we allow the user to save in LS.\nexport const MAX_LS_CHARS = 1e6;\n\nexport const PROMPT_TEXTS = {\n  saveOverflow:\n    \"De items konden niet worden opgeslagen. Werkruimte voor veel objecten.\",\n  saveNoFeatures: \"Kan canvas niet maken, geen tekenobjecten gevonden.\",\n  saveSuccess: \"De werkruimte werd zonder problemen opgeslagen.\",\n  CircleHelp:\n    \"U kunt een cirkel maken door met een ingestelde straal te klikken, of te \" +\n    \"slepen om de gewenste straal te krijgen.\",\n  LineStringHelp:\n    \"Maak lijnen door voor elk knooppunt op een positie te klikken en eindig met\" +\n    \" dubbelklikken.\",\n  RectangleHelp:\n    \"Maak een rechthoek door met de linkermuisknop te klikken en over een gebied\" +\n    \" te slepen om de gewenste grootte te krijgen.\",\n  ArrowHelp:\n    \"Er wordt een pijl gemaakt door voor elk knooppunt op een positie te \" +\n    \"klikken, en eindig met een dubbelklik.\",\n  SelectHelp:\n    \"Klik op een bestaand object op de kaart en kopieer het naar de tekenlaag.\",\n  PolygonHelp:\n    \"Maak een polygoon door voor elk knooppunt op een positie te klikken en \" +\n    \"eindig met een dubbelklik.\",\n  PointHelp: \"Klik op een positie om een ​​punt in te voegen.\",\n  TextHelp: \"Klik op een positie om tekst in te voegen.\",\n  EDITHelp:\n    \"Klik op een object om het uiterlijk of de tekenvolgorde te wijzigen.\",\n  MOVEHelp: \"Klik op een object om het te verplaatsen.\",\n  DELETEHelp: \"Klik op een object om het uit uw schets te verwijderen.\",\n  SAVEHelp:\n    \"Hier kunt u een werkruimte opslaan om later verder te werken. Als u een \" +\n    \"oudere werkruimte wilt opslaan, voert u dezelfde naam in.\",\n};\n\nexport const AREA_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisch\" },\n  { type: \"M2\", name: \"Vierkante meter (m²)\" },\n  { type: \"KM2\", name: \"Vierkante kilometer (km²)\" },\n  { type: \"HECTARE\", name: \"Hactare (ha)\" },\n];\n\nexport const LENGTH_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisch\" },\n  { type: \"M\", name: \"Meter (m)\" },\n  { type: \"KM\", name: \"Kilometer (km)\" },\n];\n\nexport const MEASUREMENT_PRECISIONS = [\n  { value: 0, name: \"0 decimalen\" },\n  { value: 1, name: \"1 decimaal\" },\n  { value: 2, name: \"2 decimalen\" },\n  { value: 3, name: \"3 decimalen\" },\n];\n\nexport const DEFAULT_DRAW_STYLE_SETTINGS = {\n  strokeColor: { r: 10, g: 10, b: 10, a: 1 },\n  fillColor: { r: 60, g: 60, b: 60, a: 0.3 },\n  strokeType: \"solid\",\n  strokeWidth: 1,\n};\n\nexport const DEFAULT_TEXT_STYLE_SETTINGS = {\n  foregroundColor: \"#FFFFFF\",\n  backgroundColor: \"#000000\",\n  size: 14,\n};\n","import { ACTIVITIES, MAX_REMOVED_FEATURES } from \"../constants\";\nimport LocalStorageHelper from \"../../../utils/LocalStorageHelper\";\nimport { Circle, Fill, Stroke, Style } from \"ol/style\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport { Circle as CircleGeometry, Point } from \"ol/geom\";\nimport { Feature } from \"ol\";\n\nimport {\n  DEFAULT_DRAW_STYLE_SETTINGS,\n  DEFAULT_TEXT_STYLE_SETTINGS,\n  STROKE_DASHES,\n  MAX_LS_CHARS,\n  PROMPT_TEXTS,\n} from \"../constants\";\n\nclass SketchModel {\n  #geoJSONParser;\n  #storageKey;\n  #dateTimeOptions;\n  #drawModel;\n  #showHelperSnacks;\n\n  constructor(settings) {\n    this.#geoJSONParser = new GeoJSON();\n    this.#storageKey = settings.storageKey || \"sketch\";\n    this.#dateTimeOptions = {\n      day: \"numeric\",\n      month: \"numeric\",\n      year: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n    };\n    this.#drawModel = settings.drawModel;\n    this.#showHelperSnacks = this.#getDefaultShowHelperSnacks();\n  }\n\n  // Returns the default value regarding wether helper-snacks should be shown or not.\n  // (Value from LS or defaults to true).\n  #getDefaultShowHelperSnacks = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"showHelperSnacks\"] ?? true;\n  };\n\n  #setSketchKeyInStorage = (key, value) => {\n    LocalStorageHelper.set(this.#storageKey, {\n      ...LocalStorageHelper.get(this.#storageKey),\n      [key]: value,\n    });\n  };\n\n  // Updates the removed features in the local-storage\n  #setStoredRemovedFeatures = (removedFeatures) => {\n    this.#setSketchKeyInStorage(\"removedFeatures\", removedFeatures);\n  };\n\n  // Updates the stored sketches in the local-storage\n  #setStoredSketches = (sketches) => {\n    this.#setSketchKeyInStorage(\"sketches\", sketches);\n  };\n\n  // Updates the stored draw-style-settings in the local-storage.\n  // Exposed so direct calls from view is possible.\n  setStoredDrawStyleSettings = (settings) => {\n    this.#setSketchKeyInStorage(\"drawStyleSettings\", settings);\n  };\n\n  // Updates the stored text-style-settings in the local-storage\n  // Exposed so direct calls from view is possible.\n  setStoredTextStyleSettings = (settings) => {\n    this.#setSketchKeyInStorage(\"textStyleSettings\", settings);\n  };\n\n  // Creates an object containing all the supplied properties along with\n  // all the (not currently hidden) features currently in the sketch-layer.\n  #createSketchObject = (sketchInformation) => {\n    return {\n      ...sketchInformation,\n      id: this.generateRandomString(),\n      date: this.getDateTimeString(),\n      features: this.#drawModel\n        .getAllDrawnFeatures()\n        .filter((f) => f.get(\"HIDDEN\") !== true)\n        .map((f) => this.#prepareFeatureForStorage(f)),\n    };\n  };\n\n  // Since we cannot save the OL-features directly in local-storage without\n  // loosing some information, we'll have to parse the feature to a geoJSON\n  // before we store it. We also have to decorate the feature with some style-information\n  // so that we can extract the style when adding the feature to the map again;\n  #prepareFeatureForStorage = (f) => {\n    // So first, we'll decorate the feature with its style-information\n    f.set(\"EXTRACTED_STYLE\", this.#drawModel.extractFeatureStyleInfo(f));\n    // If the feature to be saved consists of a Circle-geometry we have to\n    // update the geometry to something that geoJSON can handle.\n    if (f.getGeometry() instanceof CircleGeometry) {\n      this.#createFriendlyCircleGeom(f);\n    }\n    // Then we'll create the geoJSON, and return that.\n    return this.#geoJSONParser.writeFeature(f);\n  };\n\n  // Returns the helper text for the supplied activity and draw-type\n  getHelperSnackText = (activity, drawType) => {\n    // If we're nto supposed to show helper-snacks, let's return null so\n    // that no snack will be shown.\n    if (!this.#showHelperSnacks) {\n      return null;\n    }\n    // Otherwise we'll check the current activity and so on...\n    switch (activity) {\n      case \"ADD\":\n        // If we're in the add-view, we want to prompt the user with\n        // information regarding the current draw-type.\n        return PROMPT_TEXTS[`${drawType}Help`];\n      default:\n        // If we're not in the add-view, we want to prompt the user\n        // with information regarding the current view (activity).\n        return PROMPT_TEXTS[`${activity}Help`];\n    }\n  };\n\n  // Returns the draw-style-settings stored in LS, or the default draw-style-settings.\n  getDrawStyleSettings = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"drawStyleSettings\"] || DEFAULT_DRAW_STYLE_SETTINGS;\n  };\n\n  // Returns the text-style-settings stored in LS, or the default text-style-settings.\n  getTextStyleSettings = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"textStyleSettings\"] || DEFAULT_TEXT_STYLE_SETTINGS;\n  };\n\n  // Returns the activity-object connected to the supplied id\n  getActivityFromId = (id) => {\n    return ACTIVITIES.find((activity) => {\n      return activity.id === id;\n    });\n  };\n\n  // Returns the current date and time on YYYY-MM-DD HH:MM:SS\n  getDateTimeString = (options) => {\n    const date = new Date();\n    return date.toLocaleString(\"default\", options || this.#dateTimeOptions);\n  };\n\n  // Generates a random string that can be used as an ID.\n  generateRandomString = () => {\n    return Math.random().toString(36).slice(2, 9);\n  };\n\n  // Accepts an array containing the line-dash, and returns the line (stroke) type\n  // that corresponds to that value.\n  #getStrokeType = (lineDash) => {\n    for (const [key, value] of STROKE_DASHES.entries()) {\n      // The value and actual line-dash might be null, lets check if they\n      // both are: (If they are, the line-type is \"solid\").\n      if (value === lineDash) {\n        return key;\n      }\n      // The value might also be an array, and \"===\" will therefore check for reference equality.\n      // Which will obviously not work, since they are not pointing to the same object. Instead,\n      // let's check if the arrays has the same content. (We don't care about the array order).\n      if (\n        Array.isArray(value) &&\n        Array.isArray(lineDash) &&\n        value.every((v) => lineDash.includes(v))\n      ) {\n        return key;\n      }\n    }\n    // If it wasn't found, we'll log an error and return null.\n    console.error(\n      `Could not find corresponding stroke-type from supplied line-dash. The supplied line-dash was: ${lineDash}`\n    );\n    return null;\n  };\n\n  // Extract the style settings from the supplied object and returns an object\n  // with the color settings converted to string to comply with OL.\n  #extractStyleSettings = (settings) => {\n    const { strokeColor, fillColor, strokeWidth, lineDash } = settings;\n    const strokeColorString = this.#drawModel.getRGBAString(strokeColor);\n    const fillColorString = this.#drawModel.getRGBAString(fillColor);\n    return {\n      strokeColor: strokeColorString,\n      fillColor: fillColorString,\n      strokeWidth,\n      lineDash,\n    };\n  };\n\n  // Creates a circle-style that can be used within an image-style.\n  #createImageStyle = (settings) => {\n    return new Circle({\n      radius: 6,\n      stroke: new Stroke({\n        color: settings.strokeColor,\n        width: settings.strokeWidth,\n        lineDash: settings.lineDash,\n      }),\n      fill: new Fill({\n        color: settings.fillColor,\n      }),\n    });\n  };\n\n  #createHighlightStyle = () => {\n    return new Style({\n      stroke: new Stroke({\n        color: \"rgba(255, 0, 0, 1)\",\n        width: 3,\n      }),\n      fill: new Fill({\n        color: \"rgba(255, 0, 0, 0.1)\",\n      }),\n    });\n  };\n\n  // Accepts a feature with a Circle-geometry and updates the feature-geometry\n  // to a Point-geometry along with an additional property (\"CIRCLE_RADIUS\") that can\n  // be used to construct a \"real\" Circle-geometry when the feature is to be added to\n  // a map. This is done since the geoJSON-standard does not accept Circle-geometries.\n  #createFriendlyCircleGeom = (feature) => {\n    try {\n      const geometry = feature.getGeometry();\n      const center = geometry.getCenter();\n      const radius = geometry.getRadius();\n      feature.set(\"CIRCLE_RADIUS\", radius);\n      feature.set(\"CIRCLE_CENTER\", JSON.stringify(center));\n      feature.setGeometry(new Point(center));\n    } catch (error) {\n      console.error(\n        `Could not create a geoJSON-friendly circle-geometry. Error: ${error}`\n      );\n    }\n  };\n\n  // Returns wether the supplied sketch is OK to save in LS. There is a possibility\n  // that the supplied sketch is too complex (meaning that the resulting object will\n  // be too large to save).\n  #getSketchOkForLS = (sketch) => {\n    try {\n      // First we'll stringify the supplied sketch (an object).\n      const stringLength = JSON.stringify(sketch).length;\n      // And make sure the resulting string contains less characters\n      // than what is allowed in the LS.\n      return stringLength < MAX_LS_CHARS;\n    } catch (error) {\n      console.error(`Failed to parse supplied sketch. Error: ${error}`);\n      return false;\n    }\n  };\n\n  // Returns the feature-style in a form that fits the feature-style-editor\n  getFeatureStyle = (feature) => {\n    try {\n      // We're gonna need the base-style of the feature\n      const featureBaseStyle = this.#drawModel.extractFeatureStyleInfo(feature);\n      // Then we'll extract the text-settings. (These might be undefined, and\n      // are only set if we are dealing with a text-feature).\n      const featureTextStyle = feature.get(\"TEXT_SETTINGS\");\n      // Then we'll construct the feature-style-object and return it.\n      return {\n        strokeColor: this.#drawModel.parseColorString(\n          featureBaseStyle?.strokeStyle.color\n        ),\n        lineDash: featureBaseStyle?.strokeStyle.dash,\n        strokeWidth: featureBaseStyle?.strokeStyle.width,\n        strokeType: this.#getStrokeType(featureBaseStyle?.strokeStyle.dash),\n        fillColor: this.#drawModel.parseColorString(\n          featureBaseStyle?.fillStyle.color\n        ),\n        textForegroundColor: featureTextStyle?.foregroundColor,\n        textBackgroundColor: featureTextStyle?.backgroundColor,\n        textSize: featureTextStyle?.size,\n      };\n    } catch (error) {\n      console.error(`Failed to get feature-style: Error: ${error}`);\n      return null;\n    }\n  };\n\n  // Applies the supplied style on the supplied feature.\n  setFeatureStyle = (feature, styleSettings) => {\n    try {\n      // First we'll have to get the base-style. (If we're dealing\n      // with an arrow-feature, the base-style is the first element of the array\n      // returned from the getStyle-method).\n      const featureStyle = Array.isArray(feature.getStyle())\n        ? feature.getStyle()[0]\n        : feature.getStyle();\n      // Then we'll get the stroke and text-style\n      const fillStyle = featureStyle.getFill();\n      const strokeStyle = featureStyle.getStroke();\n      const imageStyle = featureStyle.getImage();\n\n      const { fillColor, strokeColor, strokeWidth, lineDash } =\n        this.#extractStyleSettings(styleSettings);\n\n      fillStyle.setColor(fillColor);\n      strokeStyle.setColor(strokeColor);\n      strokeStyle.setWidth(strokeWidth);\n      strokeStyle.setLineDash(lineDash);\n      // Unfortunately, the feature-image-style does not update by re-setting the\n      // stroke- and fill-settings within the image-style. Instead, a new image-style\n      // has to be created.\n      imageStyle &&\n        featureStyle.setImage(\n          this.#createImageStyle({\n            fillColor,\n            strokeColor,\n            strokeWidth,\n            lineDash,\n          })\n        );\n\n      // If we're dealing with a text.feature, the text-style-settings must be updated as well.\n      if (feature.get(\"DRAW_METHOD\") === \"Text\") {\n        feature.set(\"TEXT_SETTINGS\", {\n          size: styleSettings.textSize,\n          foregroundColor: styleSettings.textForegroundColor,\n          backgroundColor: styleSettings.textBackgroundColor,\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to apply the supplied style. Error: ${error}`);\n    }\n  };\n\n  // When a feature is removed, we should usually add it to the list of\n  // removed features. However, there are a couple of cases where we should not!\n  // -1: If we've added a text-feature, and the user has chosen to abort the\n  // input of text to apply to the feature, we make sure to remove it, and\n  // that removed feature should not be shown in the list of removed features.\n  // -2: If the feature is currently hidden, we shouldn't add it to the storage.\n  featureShouldBeAddedToStorage = (feature) => {\n    return (\n      !(feature.get(\"DRAW_METHOD\") === \"Text\" && !feature.get(\"USER_TEXT\")) ||\n      feature.get(\"HIDDEN\") === true\n    );\n  };\n\n  // We're gonna need to set some properties on the handled feature so that we can keep\n  // track of it. (The \"HANDLED_AT\" prop will show the user at what time the feature was\n  // removed, and the \"HANDLED_ID\" will be used if the user choses to restore the feature).\n  decorateFeature = (feature) => {\n    feature.set(\n      \"EXTRACTED_STYLE\",\n      this.#drawModel.extractFeatureStyleInfo(feature)\n    );\n    feature.set(\"HANDLED_AT\", this.getDateTimeString());\n    feature.set(\"HANDLED_ID\", this.generateRandomString());\n    // If the feature to be saved consists of a Circle-geometry we have to\n    // update the geometry to something that geoJSON can handle.\n    if (feature.getGeometry() instanceof CircleGeometry) {\n      this.#createFriendlyCircleGeom(feature);\n    }\n  };\n\n  // Returns the earlier removed features which are stored in local-storage\n  // If the first parameter is omitted, the method will return parsed OL-features,\n  // otherwise, it will return the actual local-storage value.\n  getRemovedFeaturesFromStorage = (returnType = \"FEATURES\") => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    const storedFeatures = inStorage[\"removedFeatures\"] || [];\n    return returnType === \"FEATURES\"\n      ? storedFeatures.map((parsedFeature) =>\n          this.#geoJSONParser.readFeature(parsedFeature)\n        )\n      : storedFeatures;\n  };\n\n  // Returns sketches that has been saved to local-storage.\n  getSketchesFromStorage = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    const storedSketches = inStorage[\"sketches\"] || [];\n    return storedSketches;\n  };\n\n  // Updates the local-storage by adding the removed feature and potentially\n  // removing old removed features. (We want to keep a maximum of MAX_REMOVED_FEATURES).\n  addFeatureToStorage = (feature) => {\n    const removedFeatures = this.getRemovedFeaturesFromStorage(\"STRINGS\");\n    const parsedFeature = this.#geoJSONParser.writeFeature(feature);\n    this.#setStoredRemovedFeatures([\n      parsedFeature,\n      ...removedFeatures.slice(0, MAX_REMOVED_FEATURES - 1),\n    ]);\n  };\n\n  // Updates the local-storage by adding a new sketch containing all the features currently\n  // in the the sketch-layer. If a sketch with the same id as the one supplied one already exist,\n  // the already stored sketch will be over-written.\n  addCurrentSketchToStorage = (sketchInfo) => {\n    // First we'll create a sketch (an object containing the supplied sketch-information along with the\n    // features currently existing in the sketch-layer).\n    const sketch = this.#createSketchObject(sketchInfo);\n    // Then we'll make sure there are some features to save. (If no features\n    // are present in the sketch, theres no point in saving a sketch).\n    const { features } = sketch;\n    if (!features || features.length === 0) {\n      return {\n        status: \"FAILED\",\n        message: PROMPT_TEXTS.saveNoFeatures,\n      };\n    }\n    // Then we have to make sure that the sketch is not to big (complex)\n    // for storage in the LS.\n    const sketchOkForLS = this.#getSketchOkForLS(sketch);\n    // If the sketch is not OK to save, we abort.\n    if (!sketchOkForLS) {\n      return {\n        status: \"FAILED\",\n        message: PROMPT_TEXTS.saveOverflow,\n      };\n    }\n    // Then we'll make sure to remove any potential sketch (with same title) already in storage.\n    // We do this since we don't allow for multiple sketches with the same title.\n    this.removeSketchFromStorage(sketchInfo);\n    // Then we'll get all the currently stored sketches.\n    const storedSketches = this.getSketchesFromStorage();\n    // Then we'll update the stored sketches with the supplied one.\n    this.#setStoredSketches([sketch, ...storedSketches]);\n    // Finally, we'll make sure to refresh the map by removing all drawn features,\n    // and re-add the current sketch.\n    this.#drawModel.removeDrawnFeatures();\n    this.addSketchToMap(sketch);\n    return { status: \"SUCCESS\", message: PROMPT_TEXTS.saveSuccess };\n  };\n\n  // Adds the features in the supplied sketch to the map by first parsing them\n  // (they are stored as geoJSON, and we want to add them as OL-features).\n  addSketchToMap = (sketch) => {\n    sketch.features.forEach((f) => {\n      this.#drawModel.addFeature(this.#geoJSONParser.readFeature(f));\n    });\n  };\n\n  // Updates the local-storage by removing the feature corresponding to the supplied id\n  removeFeatureFromStorage = (id) => {\n    const storedFeatures = this.getRemovedFeaturesFromStorage(\"STRINGS\");\n    this.#setStoredRemovedFeatures(\n      storedFeatures.filter((f) => !f.includes(id))\n    );\n  };\n\n  // Updates the local-storage by removing the sketch corresponding to the supplied title.\n  // Why title and not an id? Since we dont allow for multiple sketches with the same title, we can\n  // use the title as an id. Another reason is that in some cases, we generate an id after we've made sure\n  // to remove potential sketches with the same title.\n  removeSketchFromStorage = (sketch) => {\n    const storedSketches = this.getSketchesFromStorage();\n    this.#setStoredSketches(\n      storedSketches.filter(\n        (s) => !this.equalsIgnoringCase(s.title, sketch.title)\n      )\n    );\n  };\n\n  // Checks if two strings are equal, ignoring case.\n  equalsIgnoringCase = (s1, s2) => {\n    // If two strings were not supplied, we'll return false.\n    if (typeof s1 !== \"string\" || typeof s2 !== \"string\") {\n      return false;\n    }\n    // Otherwise we'll return the result of a lowercase-compare.\n    return s1.toLowerCase() === s2.toLowerCase();\n  };\n\n  // Creates a new feature with the same geometry as the supplied one. The new\n  // feature can be used an an highlight, to show where the supplied feature is.\n  createHighlightFeature = (feature) => {\n    // If no feature (or a feature with no get-geometry) is supplied, we abort.\n    if (feature && feature.getGeometry()) {\n      // Otherwise we create a new feature...\n      const highlightFeature = new Feature({\n        geometry: feature.getGeometry().clone(),\n      });\n      // ...set an id and a highlight-style...\n      highlightFeature.setId(this.generateRandomString());\n      highlightFeature.setStyle(this.#createHighlightStyle());\n      // Finally we return the feature so that we can add it to the map etc.\n      return highlightFeature;\n    }\n  };\n\n  // Returns wether helper-snacks should be shown or not\n  getShowHelperSnacks = () => {\n    return this.#showHelperSnacks;\n  };\n\n  // Set wether helper-snacks should be shown or not.\n  setShowHelperSnacks = (showSnacks) => {\n    this.#showHelperSnacks = showSnacks;\n  };\n\n  // Returns the value of the FEATURE_TITLE-attribute (or an empty string if the attribute is not set).\n  getFeatureTitle = (feature) => {\n    // If no feature was supplied, or if the supplied 'feature' is not\n    // a feature, we'll return an empty string.\n    if (!(feature instanceof Feature)) {\n      return \"\";\n    }\n    // Otherwise well return the value or an empty string.\n    return feature.get(\"FEATURE_TITLE\") ?? \"\";\n  };\n}\nexport default SketchModel;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M23 7V1h-6v2H7V1H1v6h2v10H1v6h6v-2h10v2h6v-6h-2V7h2zM3 3h2v2H3V3zm2 18H3v-2h2v2zm12-2H7v-2H5V7h2V5h10v2h2v10h-2v2zm4 2h-2v-2h2v2zM19 5V3h2v2h-2zm-5.27 9h-3.49l-.73 2H7.89l3.4-9h1.4l3.41 9h-1.63l-.74-2zm-3.04-1.26h2.61L12 8.91l-1.31 3.83z\"\n}), 'FormatShapes');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z\"\n}), 'OpenWith');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\nexports.default = _default;"],"names":["ACTIVITIES","id","tooltip","information","icon","DRAW_COLORS","DRAW_TYPES","type","label","MAX_REMOVED_FEATURES","PLUGIN_MARGIN","STROKE_TYPES","STROKE_DASHES","Map","MAX_SKETCHES","DEFAULT_MEASUREMENT_SETTINGS","showText","showArea","showLength","showPerimeter","areaUnit","lengthUnit","precision","STORAGE_KEY","MAX_LS_CHARS","PROMPT_TEXTS","saveOverflow","saveNoFeatures","saveSuccess","CircleHelp","LineStringHelp","RectangleHelp","ArrowHelp","SelectHelp","PolygonHelp","PointHelp","TextHelp","EDITHelp","MOVEHelp","DELETEHelp","SAVEHelp","AREA_MEASUREMENT_UNITS","name","LENGTH_MEASUREMENT_UNITS","MEASUREMENT_PRECISIONS","value","DEFAULT_DRAW_STYLE_SETTINGS","strokeColor","r","g","b","a","fillColor","strokeType","strokeWidth","DEFAULT_TEXT_STYLE_SETTINGS","foregroundColor","backgroundColor","size","constructor","settings","LocalStorageHelper","this","key","removedFeatures","sketches","setStoredDrawStyleSettings","setStoredTextStyleSettings","sketchInformation","generateRandomString","date","getDateTimeString","features","getAllDrawnFeatures","filter","f","get","map","set","extractFeatureStyleInfo","getGeometry","CircleGeometry","writeFeature","getHelperSnackText","activity","drawType","getDrawStyleSettings","getTextStyleSettings","getActivityFromId","options","Date","toLocaleString","Math","random","toString","slice","lineDash","Array","isArray","every","v","includes","console","error","getRGBAString","Circle","radius","stroke","Stroke","color","width","fill","Fill","Style","feature","geometry","center","getCenter","getRadius","JSON","stringify","setGeometry","Point","sketch","length","getFeatureStyle","featureBaseStyle","featureTextStyle","parseColorString","strokeStyle","dash","fillStyle","textForegroundColor","textBackgroundColor","textSize","setFeatureStyle","styleSettings","featureStyle","getStyle","getFill","getStroke","imageStyle","getImage","setColor","setWidth","setLineDash","setImage","featureShouldBeAddedToStorage","decorateFeature","getRemovedFeaturesFromStorage","returnType","inStorage","storedFeatures","parsedFeature","readFeature","getSketchesFromStorage","addFeatureToStorage","addCurrentSketchToStorage","sketchInfo","status","message","removeSketchFromStorage","storedSketches","removeDrawnFeatures","addSketchToMap","forEach","addFeature","removeFeatureFromStorage","s","equalsIgnoringCase","title","s1","s2","toLowerCase","createHighlightFeature","highlightFeature","Feature","clone","setId","setStyle","getShowHelperSnacks","setShowHelperSnacks","showSnacks","getFeatureTitle","GeoJSON","storageKey","day","month","year","hour","minute","second","drawModel","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}
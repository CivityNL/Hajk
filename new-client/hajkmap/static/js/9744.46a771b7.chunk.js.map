{"version":3,"file":"static/js/9744.46a771b7.chunk.js","mappings":"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","sources":["plugins/LayerSwitcher/components/DrawOrderOptions.js","../node_modules/@mui/icons-material/FolderOpen.js","../node_modules/@mui/icons-material/GppMaybe.js","../node_modules/@mui/icons-material/KeyboardArrowDown.js","../node_modules/@mui/icons-material/Save.js"],"sourcesContent":["import * as React from \"react\";\nimport { useSnackbar } from \"notistack\";\n\nimport LocalStorageHelper from \"utils/LocalStorageHelper\";\n\nimport {\n  Button,\n  Divider,\n  ListItemIcon,\n  ListItemText,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport FolderOpen from \"@mui/icons-material/FolderOpen\";\nimport GppMaybeIcon from \"@mui/icons-material/GppMaybe\";\nimport Save from \"@mui/icons-material/Save\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\n\nexport default function DrawOrderOptions({\n  app,\n  filterList,\n  setFilterList,\n  map,\n}) {\n  // Prepare the Snackbar - we want to display nice messages when\n  // user saves/restores layers.\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Element that we will anchor the options menu to is\n  // held in state. If it's null (unanchored), we can tell\n  // that the menu should be hidden.\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const optionsMenuIsOpen = Boolean(anchorEl);\n\n  // Show the options menu by setting an anchor element\n  const handleShowMoreOptionsClick = (e) => {\n    setAnchorEl(e.currentTarget);\n  };\n\n  // Hides the options menu by resetting the anchor element\n  const handleCloseOptionsMenu = () => {\n    setAnchorEl(null);\n  };\n\n  /**\n   * Take care of saving active layers so that they can be restored layer.\n   * For time being we're only saving in local storage, but this may change\n   * in the future.\n   * We take care of saving **all non-system layers**.\n   * We save the opacity as well as the layers' internal order (by reading\n   * the value of zIndex).\n   */\n  const handleSave = () => {\n    // Grab layers to be saved by…\n    const layers = map\n      .getAllLayers() //\n      .filter((l) => l.getVisible() === true && l.get(\"layerType\") !== \"system\") // …filtering out system layers.\n      .map((l) => {\n        // Create an array of objects. For each layer, we want to read its…\n        return { i: l.get(\"name\"), z: l.getZIndex(), o: l.getOpacity() }; // …name, zIndex and opacity.\n      });\n\n    // Let's create some metadata about our saved layers. User might want to know\n    // how many layers are saved and when they were saved.\n    // First, we try to get the map's name. We can't be certain that this exists (not\n    // all maps have the userSpecificMaps property), so we must be careful.\n    const mapName =\n      Array.isArray(app.config.userSpecificMaps) &&\n      app.config.userSpecificMaps.find(\n        (m) => m.mapConfigurationName === app.config.activeMap\n      )?.mapConfigurationTitle;\n\n    // Next, let's put together the metadata object…\n    const metadata = {\n      savedAt: new Date(),\n      numberOfLayers: layers.length,\n      ...(mapName && { mapName }), // …if we have a map name, let's add it too.\n    };\n\n    // Let's combine it all to an object that will be saved.\n    const objectToSave = { layers, metadata };\n\n    const currentLsSettings = LocalStorageHelper.get(\"layerswitcher\");\n\n    // TODO: Determine whether this should be a functional or required cookie,\n    // add the appropriate hook and describe here https://github.com/hajkmap/Hajk/wiki/Cookies-in-Hajk.\n    LocalStorageHelper.set(\"layerswitcher\", {\n      ...currentLsSettings,\n      savedLayers: objectToSave,\n    });\n\n    enqueueSnackbar(`${metadata.numberOfLayers} lager sparades utan problem`, {\n      variant: \"success\",\n    });\n  };\n\n  const handleRestore = () => {\n    // Let's be safe about parsing JSON\n    try {\n      const { metadata, layers } = LocalStorageHelper._experimentalGet(\n        \"layerswitcher.savedLayers\"\n      );\n\n      map\n        .getAllLayers() // Traverse all layers…\n        .filter((l) => l.get(\"layerType\") !== \"system\") // …ignore system layers.\n        .forEach((l) => {\n          // See if the current layer is in the list of saved layers.\n          const match = layers.find((rl) => rl.i === l.get(\"name\"));\n          // If yes…\n          if (match) {\n            // …read and set some options.\n            l.setZIndex(match.z);\n            l.setOpacity(match.o);\n            l.setVisible(true);\n          } else {\n            // If not, ensure that the layer is hidden.\n            l.setVisible(false);\n          }\n        });\n\n      enqueueSnackbar(\n        `${metadata.numberOfLayers} lager återställdes från tidigare session`,\n        {\n          variant: \"success\",\n        }\n      );\n    } catch (error) {\n      enqueueSnackbar(\n        \"Innan du kan återställa måste du spara dina befintliga lager först.\"\n      );\n    }\n  };\n\n  // Handler function for the show/hide system layers toggle\n  const handleSystemLayerSwitchChange = () => {\n    if (filterList.has(\"system\")) {\n      filterList.delete(\"system\");\n      setFilterList(new Set(filterList));\n    } else {\n      filterList.add(\"system\");\n      setFilterList(new Set(filterList));\n    }\n  };\n\n  return (\n    <>\n      <Button\n        aria-controls={optionsMenuIsOpen ? \"basic-menu\" : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={optionsMenuIsOpen ? \"true\" : undefined}\n        onClick={handleShowMoreOptionsClick}\n        endIcon={<KeyboardArrowDownIcon />}\n      >\n        Fler alternativ\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={optionsMenuIsOpen}\n        onClose={handleCloseOptionsMenu}\n      >\n        <MenuItem\n          onClick={() => {\n            handleSave();\n            handleCloseOptionsMenu();\n          }}\n        >\n          <ListItemIcon>\n            <Save fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Spara aktiva lager</ListItemText>\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            handleRestore();\n            handleCloseOptionsMenu();\n          }}\n        >\n          <ListItemIcon>\n            <FolderOpen fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Återställ sparade lager</ListItemText>\n        </MenuItem>\n        <Divider />\n        <MenuItem\n          onClick={() => {\n            handleSystemLayerSwitchChange();\n            handleCloseOptionsMenu();\n          }}\n        >\n          <ListItemIcon>\n            <GppMaybeIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>{`${\n            filterList.has(\"system\") ? \"Dölj\" : \"Visa\"\n          } systemlager`}</ListItemText>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z\"\n}), 'FolderOpen');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5l-8-3zm1 14h-2v-2h2v2zm0-4h-2V7h2v5z\"\n}), 'GppMaybe');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\n}), 'KeyboardArrowDown');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\nexports.default = _default;"],"names":["DrawOrderOptions","app","filterList","setFilterList","map","enqueueSnackbar","useSnackbar","anchorEl","setAnchorEl","React","optionsMenuIsOpen","Boolean","handleCloseOptionsMenu","undefined","onClick","e","currentTarget","endIcon","open","onClose","layers","getAllLayers","filter","l","getVisible","get","i","z","getZIndex","o","getOpacity","mapName","Array","isArray","config","userSpecificMaps","find","m","mapConfigurationName","activeMap","mapConfigurationTitle","metadata","savedAt","Date","numberOfLayers","length","objectToSave","currentLsSettings","LocalStorageHelper","savedLayers","variant","handleSave","fontSize","forEach","match","rl","setZIndex","setOpacity","setVisible","error","handleRestore","has","delete","Set","add","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}
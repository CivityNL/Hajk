{"version":3,"file":"static/js/5959.674b0cd9.chunk.js","mappings":"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","sources":["plugins/LayerComparer/CustomOLControl.js","plugins/LayerComparer/LayerComparer.js","plugins/LayerComparer/SelectDropdown.js","../node_modules/@mui/icons-material/Compare.js"],"sourcesContent":["import Control from \"ol/control/Control\";\nimport { getRenderPixel } from \"ol/render\";\nimport \"./index.css\";\n\nexport default class OlSideBySideControl extends Control {\n  #container = null;\n  #divider = null;\n  #range = null;\n\n  constructor() {\n    const container = document.createElement(\"div\");\n\n    const divider = document.createElement(\"div\");\n    divider.className = \"ol-side-by-side-divider\";\n\n    const range = document.createElement(\"input\");\n    range.type = \"range\";\n    range.min = 0;\n    range.max = 1;\n    range.step = \"any\";\n    range.value = 0.5;\n    range.className = \"ol-side-by-side-range\";\n\n    super({\n      element: container,\n    });\n\n    this.#container = container;\n    this.#divider = divider;\n    this.#range = range;\n  }\n\n  #addEvents() {\n    this.#range.addEventListener(\"input\", () => {\n      this.updateClip();\n    });\n  }\n\n  updateClip() {\n    this.#divider.style.left = this.#getPosition() + \"px\";\n    this.getMap().render();\n  }\n\n  #getPosition() {\n    const rangeValue = this.#range.value;\n    const offset = (0.5 - rangeValue) * (2 * 0 + 42);\n    const size = this.getMap().getSize();\n    return size[0] * Number(rangeValue) + offset;\n  }\n\n  #prerenderLeft = (event) => {\n    const ctx = event.context;\n    const mapSize = this.getMap().getSize();\n    const width = this.#getPosition();\n\n    const tl = getRenderPixel(event, [0, 0]);\n    const tr = getRenderPixel(event, [width, 0]);\n    const bl = getRenderPixel(event, [width, mapSize[1]]);\n    const br = getRenderPixel(event, [0, mapSize[1]]);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(tl[0], tl[1]);\n    ctx.lineTo(tr[0], tr[1]);\n    ctx.lineTo(bl[0], bl[1]);\n    ctx.lineTo(br[0], br[1]);\n    ctx.closePath();\n    ctx.clip();\n  };\n\n  #prerenderRight = (event) => {\n    const ctx = event.context;\n    const mapSize = this.getMap().getSize();\n    const width = this.#getPosition();\n\n    const tl = getRenderPixel(event, [width, 0]);\n    const tr = getRenderPixel(event, [mapSize[0], 0]);\n    const bl = getRenderPixel(event, mapSize);\n    const br = getRenderPixel(event, [width, mapSize[1]]);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(tl[0], tl[1]);\n    ctx.lineTo(tr[0], tr[1]);\n    ctx.lineTo(bl[0], bl[1]);\n    ctx.lineTo(br[0], br[1]);\n    ctx.closePath();\n    ctx.clip();\n  };\n\n  #postrender(event) {\n    const ctx = event.context;\n    ctx.restore();\n  }\n\n  #unsetLayers = () => {\n    // Grab previous compare layer and hide them\n    this.getMap()\n      .getLayers()\n      .getArray()\n      .filter(\n        (l) =>\n          l.get(\"isLeftCompareLayer\") === true ||\n          l.get(\"isRightCompareLayer\") === true\n      )\n      .forEach((l) => {\n        l.set(\"visible\", false, true);\n        if (l.get(\"isLeftCompareLayer\") === true) {\n          l.set(\"isLeftCompareLayer\", false);\n          l.un(\"prerender\", this.#prerenderLeft);\n        } else {\n          l.set(\"isRightCompareLayer\", false);\n          l.un(\"prerender\", this.#prerenderRight);\n        }\n        l.un(\"postrender\", this.#postrender);\n      });\n  };\n\n  setCompareLayers(leftLayer, rightLayer) {\n    // Unset possible previous compare layers\n    this.#unsetLayers();\n\n    // Set visibility, silently (don't trigger a map render at this time)\n    leftLayer.set(\"visible\", true, true);\n\n    // Set a unique flag - used later\n    leftLayer.set(\"isLeftCompareLayer\", true);\n\n    // Add the render event handler that will split the screen in two\n    leftLayer.on(\"prerender\", this.#prerenderLeft);\n    leftLayer.on(\"postrender\", this.#postrender);\n\n    // Do the same for the other side of the screen\n    rightLayer.set(\"visible\", true, true);\n    rightLayer.set(\"isRightCompareLayer\", true);\n    rightLayer.on(\"prerender\", this.#prerenderRight);\n    rightLayer.on(\"postrender\", this.#postrender);\n  }\n\n  remove() {\n    // Hide previous compare layers and remove custom render handlers\n    this.#unsetLayers();\n\n    // Remove the DIV. Do it in a try/catch, else the DOM will throw\n    // an error if element can't be found.\n    try {\n      this.#container.removeChild(this.#divider);\n      this.#container.removeChild(this.#range);\n    } catch (error) {}\n  }\n\n  open() {\n    this.#container.appendChild(this.#divider);\n    this.#container.appendChild(this.#range);\n    this.#addEvents();\n  }\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Alert, Button, Stack } from \"@mui/material\";\nimport DialogWindowPlugin from \"plugins/DialogWindowPlugin\";\nimport CompareIcon from \"@mui/icons-material/Compare\";\nimport { useSnackbar } from \"notistack\";\n\nimport SelectDropdown from \"./SelectDropdown.js\";\nimport SDSControl from \"./CustomOLControl.js\";\n\nconst LayerComparer = (props) => {\n  const [layer1, setLayer1] = useState(\"\");\n  const [layer2, setLayer2] = useState(\"\");\n\n  const [layers, setLayers] = useState([]);\n  const [baseLayers, setBaseLayers] = useState([]);\n\n  // Prepare a ref that will hold our map control\n  const sds = useRef();\n\n  // Prepare a ref that will hold the ID of the original\n  // background layer. This makes it possible to restore\n  // to the same background when user closes the comparer.\n  const oldBackgroundLayer = useRef();\n\n  // When compare mode is active, we want to show a snackbar that\n  // allows user to simply disable the comparer.\n  const { closeSnackbar, enqueueSnackbar } = useSnackbar();\n  // We don't want to prompt the user with more than one snack, so lets track the current one,\n  // so that we can close it when another one is about to open.\n  const helperSnack = React.useRef(null);\n\n  // Prepare layers that will be available in the comparer.\n  // By doing it in this useEffect, we do it once and for all,\n  // which is a good idea, as such filter/map can be considered\n  // an expensive operation.\n  useEffect(() => {\n    const allLayers = props.map.getAllLayers();\n    const baseLayers = allLayers\n      .filter((l) => l.get(\"layerType\") === \"base\")\n      .map((l) => {\n        return { id: l.ol_uid, label: l.get(\"caption\") };\n      });\n\n    if (props.options.showNonBaseLayersInSelect) {\n      const layers = allLayers\n        .filter((l) => [\"layer\", \"group\"].includes(l.get(\"layerType\")))\n        .map((l) => {\n          return { id: l.ol_uid, label: l.get(\"caption\") };\n        });\n      setLayers(layers);\n    }\n\n    setBaseLayers(baseLayers);\n  }, [props.map, props.options.showNonBaseLayersInSelect]);\n\n  // Create a new SDSControl, add to a ref and add the ref to our map.\n  useEffect(() => {\n    sds.current = new SDSControl();\n    props.map.addControl(sds.current);\n  }, [props.map]);\n\n  // When Hajk Drawer is toggled the map's view (canvas's) size\n  // changes too. We must update the clipper's position accordingly.\n  useEffect(() => {\n    props.app.globalObserver.on(\"core.drawerToggled\", () => {\n      sds.current.updateClip();\n    });\n  }, [props.app.globalObserver]);\n\n  // The main action happens in this useEffect. When both compare layers\n  // are set we initialize the comparer control and make it visible.\n  // If both compare layers are empty, we do the contrary and remove the control\n  // and restore the original background layer.\n  useEffect(() => {\n    if (layer1 === \"\" || layer2 === \"\") {\n      // Show previous background\n      oldBackgroundLayer.current?.setVisible(true);\n\n      // Remove the slider as soon as one of the compare layers is not selected\n      sds.current.remove();\n\n      // Close the snackbar\n      closeSnackbar(helperSnack.current);\n    } else {\n      const l1 = props.map.getAllLayers().find((l) => l.ol_uid === layer1);\n      const l2 = props.map.getAllLayers().find((l) => l.ol_uid === layer2);\n\n      // Hide old background layers\n      oldBackgroundLayer.current = props.map\n        .getAllLayers()\n        .find((l) => l.getVisible() === true && l.get(\"layerType\") === \"base\");\n      oldBackgroundLayer.current?.setVisible(false);\n\n      sds.current.open();\n      sds.current.setCompareLayers(l1, l2);\n\n      // Show the snackbar, but ensure that only one snackbar exists\n      closeSnackbar(helperSnack.current);\n      helperSnack.current = enqueueSnackbar(\n        \"Avsluta jämföringsläget genom att trycka på knappen\",\n        {\n          variant: \"default\",\n          persist: true,\n          anchorOrigin: { vertical: \"bottom\", horizontal: \"center\" },\n          sx: {\n            // Custom styling to follow Material Design guidelines for Snackbar.\n            // Placing the close button to the right of the text.\n            \".SnackbarItem-contentRoot\": {\n              flexWrap: \"inherit !important\",\n            },\n          },\n          action: (key) => (\n            <Button\n              variant=\"contained\"\n              color=\"error\"\n              onClick={() => {\n                onAbort();\n                closeSnackbar(key);\n              }}\n            >\n              Sluta jämföra\n            </Button>\n          ),\n        }\n      );\n    }\n  }, [layer1, layer2, props.map, closeSnackbar, enqueueSnackbar]);\n\n  // User can at any time abort the comparer, here's a handler\n  // that resets the UI.\n  const onAbort = () => {\n    sds.current.remove();\n    oldBackgroundLayer.current?.setVisible(true);\n    setLayer1(\"\");\n    setLayer2(\"\");\n  };\n\n  return (\n    <DialogWindowPlugin\n      options={props.options} // Supply the unique instance's options…\n      map={props.map} // …but the shared map…\n      app={props.app} // …and app.\n      type=\"LayerComparer\" // Unique name - each plugin needs one. Upper-case first letter, must be valid JS variable name.\n      defaults={{\n        // Some defaults to fall back to in case instanceOptions doesn't provide them.\n        icon: <CompareIcon />, // Default icon for this plugin\n        title: \"Lagerjämförare\",\n        description: \"Jämför lager sida vid sida\", // Shown on Widget button as well as Tooltip for Control button\n        headerText: \"Jämför lager sida vid sida\",\n        buttonText: \"Jämför\",\n        primaryButtonVariant: \"contained\",\n        abortText: \"Nollställ & stäng\",\n        onAbort: onAbort,\n      }}\n    >\n      <Stack spacing={2}>\n        <Alert icon={<CompareIcon />} variant=\"info\">\n          Välj två lager att jämföra och tryck på <i>Jämför</i>.\n        </Alert>\n\n        <SelectDropdown\n          setter={setLayer1}\n          value={layer1}\n          counterValue={layer2}\n          baseLayers={baseLayers}\n          layers={layers}\n          label=\"Vänster sida\"\n        />\n        <SelectDropdown\n          setter={setLayer2}\n          value={layer2}\n          counterValue={layer1}\n          baseLayers={baseLayers}\n          layers={layers}\n          label=\"Höger sida\"\n        />\n      </Stack>\n    </DialogWindowPlugin>\n  );\n};\n\nexport default LayerComparer;\n","import React from \"react\";\n\nimport {\n  Box,\n  FormControl,\n  InputLabel,\n  ListSubheader,\n  Select,\n  MenuItem,\n} from \"@mui/material\";\n\nconst SelectDropdown = (props) => {\n  const { setter, value, counterValue, baseLayers, layers, label } = props;\n\n  const handleChange = (setter, value) => {\n    setter(value);\n  };\n\n  return (\n    <Box sx={{ minWidth: 120 }}>\n      <FormControl fullWidth>\n        <InputLabel id=\"layer-1-label\">{label}</InputLabel>\n        <Select\n          labelId=\"layer-1-label\"\n          id=\"layer-1-select\"\n          label=\"Lager 1\"\n          value={value}\n          onChange={(e) => handleChange(setter, e.target.value)}\n        >\n          <MenuItem value=\"\">Inget lager valt</MenuItem>\n          {baseLayers.length > 0 && layers.length > 0 && (\n            <ListSubheader>Bakgrundslager</ListSubheader>\n          )}\n          {baseLayers.map((l, i) => {\n            return (\n              <MenuItem key={i} value={l.id} disabled={l.id === counterValue}>\n                {l.label}\n              </MenuItem>\n            );\n          })}\n          {baseLayers.length > 0 && layers.length > 0 && (\n            <ListSubheader>Lager</ListSubheader>\n          )}\n          {layers.map((l, i) => {\n            return (\n              <MenuItem key={i} value={l.id}>\n                {l.label}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SelectDropdown;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h5v2h2V1h-2v2zm0 15H5l5-6v6zm9-15h-5v2h5v13l-5-6v9h5c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'Compare');\nexports.default = _default;"],"names":["OlSideBySideControl","Control","constructor","container","document","createElement","divider","className","range","type","min","max","step","value","super","element","event","ctx","context","mapSize","this","getMap","getSize","width","tl","getRenderPixel","tr","bl","br","save","beginPath","moveTo","lineTo","closePath","clip","getLayers","getArray","filter","l","get","forEach","set","un","updateClip","style","left","render","setCompareLayers","leftLayer","rightLayer","on","remove","removeChild","error","open","appendChild","addEventListener","rangeValue","offset","Number","restore","props","layer1","setLayer1","useState","layer2","setLayer2","layers","setLayers","baseLayers","setBaseLayers","sds","useRef","oldBackgroundLayer","closeSnackbar","enqueueSnackbar","useSnackbar","helperSnack","React","useEffect","allLayers","map","getAllLayers","id","ol_uid","label","options","showNonBaseLayersInSelect","includes","current","SDSControl","addControl","app","globalObserver","setVisible","l1","find","l2","getVisible","variant","persist","anchorOrigin","vertical","horizontal","sx","flexWrap","action","key","color","onClick","onAbort","defaults","icon","title","description","headerText","buttonText","primaryButtonVariant","abortText","spacing","setter","counterValue","minWidth","fullWidth","labelId","onChange","e","handleChange","target","length","i","disabled","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}
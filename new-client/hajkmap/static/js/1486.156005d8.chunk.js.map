{"version":3,"file":"static/js/1486.156005d8.chunk.js","mappings":"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","sources":["plugins/Bookmarks/BookmarksModel.js"],"sourcesContent":["/**\n * @summary Handles the users bookmarks in localStorage\n * @description  Read/Writes bookmarks\n *\n * @class BookmarksModel\n */\n\n/**\n * Store bookmarks using a key with version.\n * In future we might want to create backwardcompatibility if we add functionality.\n */\n\nimport { isValidLayerId } from \"../../utils/Validator\";\nimport LocalStorageHelper from \"../../utils/LocalStorageHelper\";\n\nclass BookmarksModel {\n  #storageKey;\n\n  constructor(settings) {\n    this.map = settings.map;\n    this.app = settings.app;\n    this.globalObserver = settings.app.globalObserver;\n    this.bookmarks = this.readFromStorage() || {};\n    this.#storageKey = settings.storageKey || \"bookmarks\";\n  }\n\n  getVisibleLayers() {\n    return this.map\n      .getLayers()\n      .getArray()\n      .filter(\n        (layer) =>\n          layer.getVisible() &&\n          layer.getProperties().name &&\n          isValidLayerId(layer.getProperties().name)\n      )\n      .map((layer) => layer.getProperties().name)\n      .join(\",\");\n  }\n\n  setVisibleLayers(strLayers) {\n    let layers = strLayers.split(\",\");\n    this.map\n      .getLayers()\n      .getArray()\n      .filter(\n        (layer) =>\n          layer.getProperties().name &&\n          isValidLayerId(layer.getProperties().name)\n      )\n      .forEach((layer) => {\n        layer.setVisible(layers.indexOf(layer.getProperties().name) > -1);\n      });\n  }\n\n  getMapState() {\n    const view = this.map.getView();\n    const viewCenter = view.getCenter();\n    const pos = {\n      x: viewCenter[0],\n      y: viewCenter[1],\n      z: view.getZoom(),\n    };\n\n    return {\n      m: this.app.config.activeMap,\n      l: this.getVisibleLayers(),\n      ...pos,\n    };\n  }\n\n  setMapState(bookmark) {\n    if (!bookmark) {\n      return;\n    }\n    bookmark = this.getDecodedBookmark(bookmark);\n    this.setVisibleLayers(bookmark.settings.l);\n    let view = this.map.getView();\n    view.setCenter([bookmark.settings.x, bookmark.settings.y]);\n    view.setZoom(bookmark.settings.z);\n    bookmark = null;\n  }\n\n  readFromStorage() {\n    // Check if we have legacy bookmarks in localStorage.\n    if (localStorage.getItem(\"bookmarks_v1.0\")) {\n      // TODO: Describe in https://github.com/hajkmap/Hajk/wiki/Cookies-in-Hajk and add the functionalOk() hook\n      const legacyBookmarks = JSON.parse(\n        localStorage.getItem(\"bookmarks_v1.0\")\n      );\n      const newBookmarks = {};\n      legacyBookmarks.forEach((bookmark) => {\n        const decodedBookmark = this.getDecodedBookmark(bookmark);\n        if (!decodedBookmark) return;\n        const keyName = decodedBookmark.settings.m || this.app.config.activeMap;\n        try {\n          LocalStorageHelper.setKeyName(keyName);\n        } catch (error) {\n          console.log(\n            `An error occurred while trying to set the bookmarks in localStorage: ${error}`\n          );\n        }\n\n        const inStorage = LocalStorageHelper.get(\n          this.#storageKey || \"bookmarks\"\n        );\n        newBookmarks[keyName] = inStorage || {};\n        newBookmarks[keyName][decodedBookmark.name] = {\n          settings: bookmark.settings,\n        };\n\n        LocalStorageHelper.set(\n          this.#storageKey || \"bookmarks\",\n          newBookmarks[keyName]\n        );\n      });\n\n      localStorage.removeItem(\"bookmarks_v1.0\");\n\n      // Change back to current map.\n      LocalStorageHelper.setKeyName(this.app.config.activeMap);\n    }\n\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    this.bookmarks = inStorage || {};\n  }\n\n  writeToStorage() {\n    // TODO: Describe in https://github.com/hajkmap/Hajk/wiki/Cookies-in-Hajk and add the functionalOk() hook\n    LocalStorageHelper.set(this.#storageKey, this.bookmarks);\n  }\n\n  getDecodedBookmark(bookmark) {\n    let decoded = null;\n    if (bookmark) {\n      decoded = { ...bookmark };\n      decoded.settings = JSON.parse(atob(bookmark.settings));\n    }\n    return decoded;\n  }\n\n  bookmarkWithNameExists(name) {\n    return Object.keys(this.bookmarks).includes(name);\n  }\n\n  replaceBookmark(bookmark) {\n    if (bookmark) {\n      bookmark.settings = btoa(JSON.stringify(this.getMapState()));\n      this.writeToStorage();\n    }\n  }\n\n  addBookmark(name, allowReplace = false) {\n    // Check if bookmark exist and if we should replace it.\n    if (this.bookmarkWithNameExists(name) && allowReplace) {\n      this.replaceBookmark(this.bookmarks[name]);\n      return;\n    }\n\n    this.bookmarks[name] = {\n      settings: btoa(JSON.stringify(this.getMapState())),\n    };\n    this.writeToStorage();\n  }\n\n  deleteBookmark(name) {\n    delete this.bookmarks[name];\n    this.writeToStorage();\n  }\n\n  handleChangeCookieSettingsClick = () => {\n    this.globalObserver.publish(\"core.showCookieBanner\");\n  };\n}\n\nexport default BookmarksModel;\n"],"names":["constructor","settings","handleChangeCookieSettingsClick","this","globalObserver","publish","map","app","bookmarks","readFromStorage","storageKey","getVisibleLayers","getLayers","getArray","filter","layer","getVisible","getProperties","name","isValidLayerId","join","setVisibleLayers","strLayers","layers","split","forEach","setVisible","indexOf","getMapState","view","getView","viewCenter","getCenter","pos","x","y","z","getZoom","m","config","activeMap","l","setMapState","bookmark","getDecodedBookmark","setCenter","setZoom","localStorage","getItem","legacyBookmarks","JSON","parse","newBookmarks","decodedBookmark","keyName","LocalStorageHelper","error","console","log","inStorage","removeItem","writeToStorage","decoded","atob","bookmarkWithNameExists","Object","keys","includes","replaceBookmark","btoa","stringify","addBookmark","allowReplace","deleteBookmark"],"sourceRoot":""}
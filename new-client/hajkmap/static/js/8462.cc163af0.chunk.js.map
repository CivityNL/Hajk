{"version":3,"file":"static/js/8462.cc163af0.chunk.js","mappings":"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","sources":["plugins/Sketch/components/featureStyle/FeatureStyleAccordion.js","plugins/Sketch/components/featureStyle/FeatureStyleEditor.js","plugins/Sketch/components/featureStyle/FeatureStyleSelector.js","plugins/Sketch/components/featureStyle/StrokeTypeSelector.js","plugins/Sketch/constants/index.js"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport { TwitterPicker } from \"react-color\";\n\nimport { Box, Grid, Typography, Tooltip } from \"@mui/material\";\nimport { Paper, Slider } from \"@mui/material\";\n\nimport { Accordion, AccordionDetails, AccordionSummary } from \"@mui/material\";\n\nimport { DRAW_COLORS } from \"../../constants\";\nimport StrokeTypeSelector from \"./StrokeTypeSelector\";\n\nconst StyledAccordionSummary = styled(AccordionSummary)(() => ({\n  minHeight: 35,\n  \"&.MuiAccordionSummary-root.Mui-expanded\": {\n    minHeight: 35,\n  },\n  \"& .MuiAccordionSummary-content\": {\n    transition: \"inherit !important\",\n    marginTop: 0,\n    marginBottom: 0,\n    \"&.Mui-expanded\": {\n      marginTop: 0,\n      marginBottom: 0,\n    },\n  },\n}));\n\n// We want to be able to display the current color. Let's create\n// a color-badge component.\nconst ColorBadge = ({ color }) => {\n  return (\n    <Box\n      style={{\n        height: \"1.1rem\",\n        width: \"1.1rem\",\n        backgroundColor: color,\n        borderRadius: \"10%\",\n        marginLeft: 4,\n        border: color.toLowerCase() === \"#ffffff\" ? \"1px solid black\" : null,\n      }}\n    />\n  );\n};\n\n// We want to be able to change the opacity of the fill color. Let's\n// create a slider that can be used to change the value.\nconst OpacitySlider = ({ opacity, handleOpacityChange }) => {\n  return (\n    <Grid item xs={12}>\n      <Paper style={{ padding: 8, marginTop: 8 }}>\n        <Typography variant=\"caption\">{`Opacitet: ${Math.floor(\n          opacity * 100\n        )}%`}</Typography>\n        <Slider\n          size=\"small\"\n          min={0}\n          max={1}\n          value={opacity}\n          step={0.01}\n          onChange={handleOpacityChange}\n          valueLabelFormat={(value) => `${Math.floor(value * 100)}%`}\n          valueLabelDisplay=\"auto\"\n        />\n      </Paper>\n    </Grid>\n  );\n};\n\n// We want to be able to change the opacity of the fill color. Let's\n// create a slider that can be used to change the value.\nconst StrokeWidthSlider = ({ strokeWidth, handleStrokeWidthChange }) => {\n  return (\n    <Grid item xs={12}>\n      <Paper style={{ padding: 8, marginTop: 8 }}>\n        <Typography variant=\"caption\">{`Linjebredd: ${strokeWidth}px`}</Typography>\n        <Slider\n          size=\"small\"\n          min={1}\n          max={5}\n          value={strokeWidth}\n          step={0.5}\n          onChange={handleStrokeWidthChange}\n          valueLabelFormat={(value) => `${value}`}\n          valueLabelDisplay=\"auto\"\n        />\n      </Paper>\n    </Grid>\n  );\n};\n\nconst AccordionSummaryContents = (props) => {\n  // We need to get the string-representation of the supplied color-object\n  // to be used in the color badge... (If it not already a string).\n  const colorString =\n    typeof props.color === \"string\"\n      ? props.color\n      : props.drawModel.getRGBAString(props.color);\n  // Then we'll render everything!\n  return (\n    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n      <Typography variant=\"button\">{props.title}</Typography>\n      <Grid container item xs={4} justifyContent=\"flex-end\" alignItems=\"center\">\n        {props.showOpacitySlider && (\n          <Typography variant=\"caption\">{`${\n            typeof props.color === \"string\"\n              ? 100\n              : Math.floor(\n                  (!isNaN(props.color?.a) ? props.color?.a : 100) * 100\n                )\n          }%`}</Typography>\n        )}\n        {typeof props.strokeWidth === \"number\" && (\n          <Typography variant=\"caption\">{`${props.strokeWidth}px`}</Typography>\n        )}\n        <ColorBadge color={colorString} />\n      </Grid>\n    </Grid>\n  );\n};\n\n// The draw-style-accordion includes a summary showing the current draw-style-settings.\n// It also includes tools to update the current style.\nconst FeatureStyleAccordion = (props) => {\n  return (\n    <Accordion size=\"small\" style={{ marginBottom: 8 }}>\n      <Tooltip\n        disableInteractive\n        title={`Klicka här för att ändra ${props.title.toLowerCase()}.`}\n      >\n        <StyledAccordionSummary>\n          <AccordionSummaryContents\n            title={props.title}\n            color={props.color}\n            showOpacitySlider={props.showOpacitySlider}\n            strokeWidth={props.strokeWidth}\n            drawModel={props.drawModel}\n          />\n        </StyledAccordionSummary>\n      </Tooltip>\n      <AccordionDetails style={{ maxWidth: \"100%\" }}>\n        <Grid container>\n          <Grid item xs={12}>\n            <TwitterPicker\n              colors={DRAW_COLORS}\n              triangle=\"hide\"\n              onChange={props.handleColorChange}\n              styles={{\n                default: {\n                  card: {\n                    maxWidth: \"100%\",\n                    background: \"unset\", // Hard-coded to white, we don't want that.\n                  },\n                },\n              }}\n              color={props.color}\n            />\n          </Grid>\n          {props.showOpacitySlider && (\n            <OpacitySlider\n              handleOpacityChange={props.handleOpacityChange}\n              opacity={isNaN(props.color?.a) ? 1 : props.color.a}\n            />\n          )}\n          {props.showStrokeWidthSlider && (\n            <StrokeWidthSlider\n              handleStrokeWidthChange={props.handleStrokeWidthChange}\n              strokeWidth={props.strokeWidth}\n            />\n          )}\n          {props.showStrokeTypeSelector && (\n            <Grid item xs={12} style={{ marginTop: 8 }}>\n              <StrokeTypeSelector\n                handleStrokeTypeChange={props.handleStrokeTypeChange}\n                strokeType={props.strokeType}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default FeatureStyleAccordion;\n","import React from \"react\";\nimport FeatureStyleSelector from \"./FeatureStyleSelector\";\nimport { Grid, TextField, Typography } from \"@mui/material\";\n\nconst FeatureTextEditor = ({ text, onChange }) => {\n  return (\n    <Grid item xs={12} style={{ marginTop: 16 }}>\n      <Grid item xs={12} style={{ marginBottom: 4 }}>\n        <Typography align=\"center\">Text</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          fullWidth\n          value={text}\n          onChange={onChange}\n          variant=\"outlined\"\n          size=\"small\"\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\n// This is used to update the style on the supplied feature\nconst FeatureStyleEditor = ({ feature, model, drawModel }) => {\n  // We're gonna need to keep track of the feature-style\n  const [featureStyle, setFeatureStyle] = React.useState(\n    model.getFeatureStyle(feature)\n  );\n  // We're gonna need to keep track of the eventual feature-text.\n  // This only applies to text-features obviously.\n  const [featureText, setFeatureText] = React.useState(null);\n\n  // Effect to make sure we set the feature-style-state to the actual style.\n  React.useEffect(() => {\n    if (feature) {\n      setFeatureStyle(model.getFeatureStyle(feature));\n    } else {\n      setFeatureStyle(null);\n    }\n  }, [feature, model]);\n\n  // Effect that makes sure to update the feature style when the style-state changes.\n  React.useEffect(() => {\n    if (feature) {\n      model.setFeatureStyle(feature, featureStyle);\n      drawModel.refreshDrawLayer();\n    }\n  }, [featureStyle, feature, drawModel, model]);\n\n  // Effect making sure the feature-text is set to the actual text of the feature.\n  React.useEffect(() => {\n    // First we'll get the text from the feature\n    const text = feature.get(\"USER_TEXT\");\n    // If the text us null(ish) we set the state to null\n    if (!text) {\n      setFeatureText(null);\n      // Otherwise we set it to the actual value\n    } else {\n      setFeatureText(text);\n    }\n  }, [feature]);\n\n  // Effect making sure the updated feature-text is applied to the feature\n  React.useEffect(() => {\n    feature.set(\"USER_TEXT\", featureText);\n    drawModel.refreshDrawLayer();\n  }, [drawModel, feature, featureText]);\n\n  // Since the <FeatureStyleSelector /> expects the draw-style, the text-style,\n  // and their set:ers to be separate, we have to create a set:er for the text-style\n  // since we'ce chosen to combine the styles in one object here.\n  const setTextStyle = (newTextStyle) => {\n    setFeatureStyle({\n      ...featureStyle,\n      textForegroundColor: newTextStyle.foregroundColor,\n      textBackgroundColor: newTextStyle.backgroundColor,\n      textSize: newTextStyle.size,\n    });\n  };\n\n  // The same applies here as above. The <FeatureStyleSelector /> expects separated\n  // text-style, so let's create one.\n  const textStyle = {\n    foregroundColor: featureStyle.textForegroundColor,\n    backgroundColor: featureStyle.textBackgroundColor,\n    size: featureStyle.textSize,\n  };\n\n  return (\n    <Grid container>\n      {featureText !== null && (\n        <FeatureTextEditor\n          text={featureText}\n          onChange={(e) => setFeatureText(e.target.value)}\n        />\n      )}\n      <FeatureStyleSelector\n        isEdit={true}\n        activeDrawType={feature.get(\"DRAW_METHOD\")}\n        drawStyle={featureStyle}\n        textStyle={textStyle}\n        drawModel={drawModel}\n        setDrawStyle={setFeatureStyle}\n        setTextStyle={setTextStyle}\n      />\n    </Grid>\n  );\n};\n\nexport default FeatureStyleEditor;\n","import React from \"react\";\nimport { Grid, Typography, TextField } from \"@mui/material\";\nimport { STROKE_DASHES } from \"plugins/Sketch/constants\";\n\nimport FeatureStyleAccordion from \"./FeatureStyleAccordion\";\nimport StrokeTypeSelector from \"./StrokeTypeSelector\";\n\nexport default function FeatureStyleSelector(props) {\n  // We need a handler that can update the stroke-dash setting\n  const handleStrokeTypeChange = (e) => {\n    // We are storing both the stroke-type (e.g. \"dashed\", \"dotted\", or \"solid\") as well as\n    // the actual line-dash array which corresponds to the stroke-type.\n    // The stroke-type comes from the select-event\n    const strokeType = e.target.value;\n    // And corresponds to a line-dash from the constants\n    const lineDash = STROKE_DASHES.get(strokeType);\n    // When everything we need is fetched, we update the draw-style.\n    props.setDrawStyle({\n      ...props.drawStyle,\n      strokeType: strokeType,\n      lineDash: lineDash,\n    });\n  };\n\n  // We need a handler that can update the text-size setting\n  const handleTextSizeChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      size: parseInt(e.target.value),\n    });\n  };\n\n  // We need a handler that can update the stroke color\n  const handleStrokeColorChange = (e) => {\n    props.setDrawStyle({ ...props.drawStyle, strokeColor: e.rgb });\n  };\n\n  // We need a handler that can update the fill color\n  const handleFillColorChange = (e) => {\n    props.setDrawStyle({\n      ...props.drawStyle,\n      fillColor: { ...e.rgb, a: props.drawStyle.fillColor.a },\n    });\n  };\n\n  // We need a handler that can update the opacity value\n  const handleOpacityChange = (e, value) => {\n    props.setDrawStyle({\n      ...props.drawStyle,\n      fillColor: { ...props.drawStyle.fillColor, a: value },\n    });\n  };\n\n  // We need a handler that can update the strokeWidth value\n  const handleStrokeWidthChange = (e, value) => {\n    props.setDrawStyle({ ...props.drawStyle, strokeWidth: value });\n  };\n\n  // We need a handler that can update the text-foreground-color change\n  const handleForegroundColorChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      foregroundColor: e.hex,\n    });\n  };\n\n  // We need a handler that can update the text-background-color change\n  const handleBackgroundColorChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      backgroundColor: e.hex,\n    });\n  };\n\n  const renderStrokeTypeSelector = () => {\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Variant</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <StrokeTypeSelector\n            handleStrokeTypeChange={handleStrokeTypeChange}\n            strokeType={props.drawStyle.strokeType}\n            includeContainer={false}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderTextSizeSelector = () => {\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Lettergrootte</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            variant=\"outlined\"\n            type=\"number\"\n            size=\"small\"\n            fullWidth\n            value={props.textStyle.size}\n            onChange={handleTextSizeChange}\n          ></TextField>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style settings for area-drawings!\n  const renderFillStyleSettings = () => {\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Vulling\"\n            showOpacitySlider\n            color={props.drawStyle.fillColor}\n            handleColorChange={handleFillColorChange}\n            handleOpacityChange={handleOpacityChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Lijn\"\n            showStrokeWidthSlider\n            color={props.drawStyle.strokeColor}\n            strokeWidth={props.drawStyle.strokeWidth}\n            handleColorChange={handleStrokeColorChange}\n            handleStrokeWidthChange={handleStrokeWidthChange}\n            drawModel={props.drawModel}\n            showStrokeTypeSelector\n            handleStrokeTypeChange={handleStrokeTypeChange}\n            strokeType={props.drawStyle.strokeType}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style settings for text-drawings!\n  const renderTextStyleSettings = () => {\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Kleur - voorgrond\"\n            color={props.textStyle.foregroundColor}\n            handleColorChange={handleForegroundColorChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Kleur - achtergrond\"\n            color={props.textStyle.backgroundColor}\n            handleColorChange={handleBackgroundColorChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style-settings for arrows! We are not showing a stroke-width-slider\n  // when creating arrows, since they should have a standard width.\n  const renderArrowStyleSettings = () => {\n    return (\n      <FeatureStyleAccordion\n        title=\"Kleur\"\n        color={props.drawStyle.strokeColor}\n        handleColorChange={handleStrokeColorChange}\n        drawModel={props.drawModel}\n      />\n    );\n  };\n\n  // The style settings for line-drawings!\n  // Why are we grid-ing these? Cause we're gonna be implementing more settings.\n  const renderLineStyleSettings = () => {\n    return (\n      <FeatureStyleAccordion\n        title=\"Breedte en kleur\"\n        showStrokeWidthSlider\n        color={props.drawStyle.strokeColor}\n        strokeWidth={props.drawStyle.strokeWidth}\n        handleColorChange={handleStrokeColorChange}\n        handleStrokeWidthChange={handleStrokeWidthChange}\n        drawModel={props.drawModel}\n      />\n    );\n  };\n\n  // We want to display different settings depending on what the user is drawing!\n  // Let's check and render the appropriate settings.\n  const renderColorSelectors = () => {\n    switch (props.activeDrawType) {\n      case \"Arrow\":\n        return renderArrowStyleSettings();\n      case \"LineString\":\n        return renderLineStyleSettings();\n      case \"Text\":\n        return renderTextStyleSettings();\n      default:\n        return renderFillStyleSettings();\n    }\n  };\n\n  const renderCircleRadiusSelector = () => {\n    if (props.isEdit) {\n      return null;\n    }\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Radius (m)</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            variant=\"outlined\"\n            type=\"number\"\n            size=\"small\"\n            fullWidth\n            defaultValue={props.drawModel.getCircleRadius()}\n            onChange={(e) => {\n              props.drawModel.setCircleRadius(e.target.value);\n            }}\n          ></TextField>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <Grid container>\n      {props.activeDrawType === \"LineString\" && renderStrokeTypeSelector()}\n      {props.activeDrawType === \"Text\" && renderTextSizeSelector()}\n      {props.activeDrawType === \"Circle\" && renderCircleRadiusSelector()}\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Symbolisatie</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          {renderColorSelectors()}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { Grid, MenuItem, Paper } from \"@mui/material\";\nimport { TextField, Tooltip, Typography } from \"@mui/material\";\nimport { STROKE_TYPES } from \"../../constants\";\n\nconst StrokeTypeSelector = (props) => {\n  return (\n    <Paper\n      style={{ padding: props.includeContainer !== false ? 8 : 0 }}\n      elevation={props.includeContainer !== false ? 3 : 0}\n    >\n      <Grid container>\n        {props.includeContainer !== false ? (\n          <Grid item xs={12}>\n            <Typography variant=\"caption\">Linjetyp</Typography>\n          </Grid>\n        ) : null}\n        <TextField\n          fullWidth\n          id=\"select-stroke-type\"\n          variant=\"outlined\"\n          size=\"small\"\n          select\n          value={props.strokeType}\n          onChange={props.handleStrokeTypeChange}\n        >\n          {STROKE_TYPES.map((option) => (\n            <MenuItem key={option.type} value={option.type}>\n              {\n                <Tooltip disableInteractive title={option.tooltip}>\n                  <span style={{ width: \"100%\" }}>{option.label}</span>\n                </Tooltip>\n              }\n            </MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default StrokeTypeSelector;\n","import EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FormatShapesIcon from \"@mui/icons-material/FormatShapes\";\nimport OpenWithIcon from \"@mui/icons-material/OpenWith\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport ImportExportIcon from \"@mui/icons-material/ImportExport\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\n\nexport const ACTIVITIES = [\n  {\n    id: \"ADD\",\n    tooltip: \"Voeg nieuwe objecten toe.\",\n    information:\n      \"Voeg objecten toe door op de kaart te tekenen. Begin hieronder met het\" +\n      \"kiezen van het type object dat u wilt tekenen.\",\n    icon: <EditIcon />,\n  },\n  {\n    id: \"EDIT\",\n    tooltip: \"Bewerk bestaande objecten.\",\n    information:\n      \"Bewerk nodes, wijzig de tekenvolgorde of wijzig de kleur van getekende\" +\n      \"objecten.\",\n    icon: <FormatShapesIcon />,\n  },\n  {\n    id: \"MOVE\",\n    tooltip: \"Verplaats bestaande objecten.\",\n    information:\n      \"Klik op het object op de kaart dat u wilt verplaatsen om de \" +\n      \"verplaatsingmodus te activeren. Sleep het object vervolgens naar de \" +\n      \"juiste locatie.\",\n    icon: <OpenWithIcon />,\n  },\n  {\n    id: \"DELETE\",\n    tooltip: \"Verwijder objecten.\",\n    information:\n      \"Klik op het object dat u wilt verwijderen, of klik op de onderstaande\" +\n      \"knop om alle objecten te verwijderen.\",\n    icon: <DeleteIcon />,\n  },\n  {\n    id: \"SAVE\",\n    tooltip: \"Objecten bewaren.\",\n    information:\n      \"Bewaar de objecten en ga later verder. Houd er rekening mee dat alleen \" +\n      \"objecten die zichtbaar zijn op d ekaart worden opgeslagen. .\",\n    icon: <SaveIcon />,\n  },\n  {\n    id: \"UPLOAD\",\n    tooltip: \"Download of upload objecten\",\n    information:\n      \"Download of upload objecten in .KML-formaat. Gebruik de \" +\n      \"onderstaande knoppen of sleep een .KML-bestand rechtstreeks naar de \" +\n      \"kaart. \",\n    icon: <ImportExportIcon />,\n  },\n  {\n    id: \"SETTINGS\",\n    tooltip: \"Instellingen.\",\n    information: \"Hier kunt u de instellingen van het de teken-tool wijzigen.\",\n    icon: <SettingsIcon />,\n  },\n];\n\nexport const DRAW_COLORS = [\n  \"#FF6900\",\n  \"#FCB900\",\n  \"#7BDCB5\",\n  \"#00D084\",\n  \"#8ED1FC\",\n  \"#0693E3\",\n  \"#ABB8C3\",\n  \"#EB144C\",\n  \"#F78DA7\",\n  \"#9900EF\",\n  \"#354FAD\",\n];\n\nexport const DRAW_TYPES = [\n  {\n    type: \"Circle\",\n    label: \"Cirkel\",\n    tooltip:\n      \"Teken een circel op de kaart door één keer te klikken waar de circel moet\" +\n      \" beginnen, vervolgens naar de gewenste grootte te slepen en los te laten.\",\n  },\n  {\n    type: \"LineString\",\n    label: \"Lijn\",\n    tooltip:\n      \"Teken een lijn in de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig een dubbelklik.\",\n  },\n  {\n    type: \"Rectangle\",\n    label: \"Rechthoek\",\n    tooltip:\n      \"Teken een rechthoek op de kaart door eenmaal te klikken waar de rechthoek\" +\n      \" moet beginnen, sleep vervolgens naar de gewenste grootte en laat los.\",\n  },\n  {\n    type: \"Arrow\",\n    label: \"Pijl\",\n    tooltip:\n      \"Teken een pijl in de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig met een dubbelklik.\",\n  },\n  {\n    type: \"Select\",\n    label: \"Selecteer op de kaart\",\n    tooltip:\n      \"Klik op een bestaand object op de kaart en kopieer het naar de tekenlaag.\",\n  },\n  {\n    type: \"Polygon\",\n    label: \"Polygon\",\n    tooltip:\n      \"Teken een polygoon op de kaart door één keer per knooppunt te klikken, \" +\n      \"eindig met een dubbelklik.\",\n  },\n  {\n    type: \"Point\",\n    label: \"Punt\",\n    tooltip:\n      \"Voeg een punt in de kaart in door te klikken op de plek waar u het punt \" +\n      \"wilt hebben.\",\n  },\n  {\n    type: \"Text\",\n    label: \"Tekst\",\n    tooltip:\n      \"Voeg tekst in de kaart in door te klikken op de plek waar u de \" +\n      \"tekst wilt hebben.\",\n  },\n];\n\nexport const MAX_REMOVED_FEATURES = 4;\nexport const PLUGIN_MARGIN = 10;\n\nexport const STROKE_TYPES = [\n  {\n    type: \"solid\",\n    label: \"Ononderbroken\",\n    tooltip: \"Ononderbroken lijn.\",\n  },\n  {\n    type: \"dotted\",\n    label: \"Stippellijn\",\n    tooltip: \"Stippellijn (stippen).\",\n  },\n  {\n    type: \"dashed\",\n    label: \"Stippellijn\",\n    tooltip: \"Stippellijn (strepen).\",\n  },\n];\n\nexport const STROKE_DASHES = new Map([\n  [\"solid\", null],\n  [\"dotted\", [2, 7]],\n  [\"dashed\", [12, 7]],\n]);\n\n// A constant stating how many sketches we're allowed to save in local-storage.\nexport const MAX_SKETCHES = 3;\n\nexport const DEFAULT_MEASUREMENT_SETTINGS = {\n  showText: false,\n  showArea: false,\n  showLength: false,\n  showPerimeter: false,\n  areaUnit: \"AUTO\",\n  lengthUnit: \"AUTO\",\n  precision: 0,\n};\n\nexport const STORAGE_KEY = \"sketch\";\n\n// How many characters we allow the user to save in LS.\nexport const MAX_LS_CHARS = 1e6;\n\nexport const PROMPT_TEXTS = {\n  saveOverflow:\n    \"De items konden niet worden opgeslagen. Werkruimte voor veel objecten.\",\n  saveNoFeatures: \"Kan canvas niet maken, geen tekenobjecten gevonden.\",\n  saveSuccess: \"De werkruimte werd zonder problemen opgeslagen.\",\n  CircleHelp:\n    \"U kunt een cirkel maken door met een ingestelde straal te klikken, of te \" +\n    \"slepen om de gewenste straal te krijgen.\",\n  LineStringHelp:\n    \"Maak lijnen door voor elk knooppunt op een positie te klikken en eindig met\" +\n    \" dubbelklikken.\",\n  RectangleHelp:\n    \"Maak een rechthoek door met de linkermuisknop te klikken en over een gebied\" +\n    \" te slepen om de gewenste grootte te krijgen.\",\n  ArrowHelp:\n    \"Er wordt een pijl gemaakt door voor elk knooppunt op een positie te \" +\n    \"klikken, en eindig met een dubbelklik.\",\n  SelectHelp:\n    \"Klik op een bestaand object op de kaart en kopieer het naar de tekenlaag.\",\n  PolygonHelp:\n    \"Maak een polygoon door voor elk knooppunt op een positie te klikken en \" +\n    \"eindig met een dubbelklik.\",\n  PointHelp: \"Klik op een positie om een ​​punt in te voegen.\",\n  TextHelp: \"Klik op een positie om tekst in te voegen.\",\n  EDITHelp:\n    \"Klik op een object om het uiterlijk of de tekenvolgorde te wijzigen.\",\n  MOVEHelp: \"Klik op een object om het te verplaatsen.\",\n  DELETEHelp: \"Klik op een object om het uit uw schets te verwijderen.\",\n  SAVEHelp:\n    \"Hier kunt u een werkruimte opslaan om later verder te werken. Als u een \" +\n    \"oudere werkruimte wilt opslaan, voert u dezelfde naam in.\",\n};\n\nexport const AREA_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisch\" },\n  { type: \"M2\", name: \"Vierkante meter (m²)\" },\n  { type: \"KM2\", name: \"Vierkante kilometer (km²)\" },\n  { type: \"HECTARE\", name: \"Hactare (ha)\" },\n];\n\nexport const LENGTH_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisch\" },\n  { type: \"M\", name: \"Meter (m)\" },\n  { type: \"KM\", name: \"Kilometer (km)\" },\n];\n\nexport const MEASUREMENT_PRECISIONS = [\n  { value: 0, name: \"0 decimalen\" },\n  { value: 1, name: \"1 decimaal\" },\n  { value: 2, name: \"2 decimalen\" },\n  { value: 3, name: \"3 decimalen\" },\n];\n\nexport const DEFAULT_DRAW_STYLE_SETTINGS = {\n  strokeColor: { r: 10, g: 10, b: 10, a: 1 },\n  fillColor: { r: 60, g: 60, b: 60, a: 0.3 },\n  strokeType: \"solid\",\n  strokeWidth: 1,\n};\n\nexport const DEFAULT_TEXT_STYLE_SETTINGS = {\n  foregroundColor: \"#FFFFFF\",\n  backgroundColor: \"#000000\",\n  size: 14,\n};\n"],"names":["StyledAccordionSummary","styled","AccordionSummary","minHeight","transition","marginTop","marginBottom","ColorBadge","color","style","height","width","backgroundColor","borderRadius","marginLeft","border","toLowerCase","OpacitySlider","opacity","handleOpacityChange","item","xs","padding","variant","Math","floor","size","min","max","value","step","onChange","valueLabelFormat","valueLabelDisplay","StrokeWidthSlider","strokeWidth","handleStrokeWidthChange","AccordionSummaryContents","props","colorString","drawModel","getRGBAString","container","justifyContent","alignItems","title","showOpacitySlider","isNaN","a","disableInteractive","maxWidth","colors","DRAW_COLORS","triangle","handleColorChange","styles","default","card","background","showStrokeWidthSlider","showStrokeTypeSelector","handleStrokeTypeChange","strokeType","FeatureTextEditor","text","align","fullWidth","feature","model","featureStyle","setFeatureStyle","React","getFeatureStyle","featureText","setFeatureText","refreshDrawLayer","get","set","textStyle","foregroundColor","textForegroundColor","textBackgroundColor","textSize","e","target","isEdit","activeDrawType","drawStyle","setDrawStyle","setTextStyle","newTextStyle","FeatureStyleSelector","lineDash","STROKE_DASHES","handleTextSizeChange","parseInt","handleStrokeColorChange","strokeColor","rgb","handleFillColorChange","fillColor","handleForegroundColorChange","hex","handleBackgroundColorChange","includeContainer","type","defaultValue","getCircleRadius","setCircleRadius","renderColorSelectors","elevation","id","select","STROKE_TYPES","option","tooltip","label","ACTIVITIES","information","icon","DRAW_TYPES","MAX_REMOVED_FEATURES","PLUGIN_MARGIN","Map","MAX_SKETCHES","DEFAULT_MEASUREMENT_SETTINGS","showText","showArea","showLength","showPerimeter","areaUnit","lengthUnit","precision","STORAGE_KEY","MAX_LS_CHARS","PROMPT_TEXTS","saveOverflow","saveNoFeatures","saveSuccess","CircleHelp","LineStringHelp","RectangleHelp","ArrowHelp","SelectHelp","PolygonHelp","PointHelp","TextHelp","EDITHelp","MOVEHelp","DELETEHelp","SAVEHelp","AREA_MEASUREMENT_UNITS","name","LENGTH_MEASUREMENT_UNITS","MEASUREMENT_PRECISIONS","DEFAULT_DRAW_STYLE_SETTINGS","r","g","b","DEFAULT_TEXT_STYLE_SETTINGS"],"sourceRoot":""}
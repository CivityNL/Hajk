{"version":3,"file":"static/js/541.6473cb63.chunk.js","mappings":"wIAAe,MAAMA,EACnBC,YAAYC,GAAgB,KAI5BC,eAAkBC,IAChB,MAAM,cAAEC,EAAF,gBAAiBC,EAAjB,UAAkCC,GAAcC,KAAKN,cAE3D,IAAIO,EAAgBF,EAAY,IAAM,KACtC,OAAID,IAAoBD,EACf,IAAIK,OAAJ,YAAgBN,EAAhB,KAAiCK,IAGrCH,GAAmBD,EACf,IAAIK,OAAJ,WAAeN,EAAf,MAAiCK,GAGtCH,GAAmBD,EACd,IAAIK,OAAJ,UAAcN,GAAgBK,GAEhC,IAAIC,OAAJ,WAAeN,EAAf,KAAgCK,EAAvC,EAnByB,KAsB3BE,mBAAsBC,GACbA,EAAOC,QAAQ,4BAA6B,QAvB1B,KA0B3BC,QAAU,CAACV,EAAcW,KACvB,MAAMC,EAAaR,KAAKG,mBAAmBP,GAG3C,OAFcI,KAAKL,eAAea,GAAYC,KAAKF,EAEnD,EA7BAP,KAAKN,cAAgBA,CACtB,E","sources":["plugins/DocumentHandler/documentSearch/MatchSearch.js"],"sourcesContent":["export default class MatchSearch {\n  constructor(searchOptions) {\n    this.searchOptions = searchOptions;\n  }\n\n  getMatchRegexp = (searchString) => {\n    const { wildcardAtEnd, wildcardAtStart, matchCase } = this.searchOptions;\n\n    let regexpOptions = matchCase ? \"g\" : \"gi\";\n    if (wildcardAtStart && !wildcardAtEnd) {\n      return new RegExp(`.*${searchString}$`, regexpOptions);\n    }\n\n    if (!wildcardAtStart && wildcardAtEnd) {\n      return new RegExp(`^${searchString}.*`, regexpOptions);\n    }\n\n    if (wildcardAtStart && wildcardAtEnd) {\n      return new RegExp(`${searchString}`, regexpOptions);\n    }\n    return new RegExp(`^${searchString}$`, regexpOptions);\n  };\n\n  escapeSpecialChars = (string) => {\n    return string.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n  };\n\n  compare = (searchString, searchword) => {\n    const toSearchIn = this.escapeSpecialChars(searchString);\n    const match = this.getMatchRegexp(toSearchIn).test(searchword);\n\n    return match;\n  };\n}\n"],"names":["MatchSearch","constructor","searchOptions","getMatchRegexp","searchString","wildcardAtEnd","wildcardAtStart","matchCase","this","regexpOptions","RegExp","escapeSpecialChars","string","replace","compare","searchword","toSearchIn","test"],"sourceRoot":""}
{"version":3,"file":"static/js/8428.2b256b4b.chunk.js","mappings":"6MAQA,MAAMA,UAAwBC,EAAAA,cAK5BC,YAAYC,GACVC,MAAMD,GADW,KAJnBE,MAAQ,CACNC,gBAAiB,IAGA,KAMnBC,kBAAoB,KAClB,MAAM,kBAAEC,EAAF,aAAqBC,EAArB,KAAmCC,GAASC,KAAKR,MAEjDS,EAAeD,KAAKE,mBACxBL,EACAC,EACAC,GAEFI,OAAOC,KAAKH,GAAcI,SAASC,IACjCN,KAAKO,mBAAmBN,EAAaK,GAAMP,EAA3C,IAGFC,KAAKQ,SAAS,CAAEb,gBAAiBK,KAAKL,iBAAtC,EAlBiB,KAsCnBY,mBAAqB,CAACE,EAAUV,KAE9B,GAAa,YAATA,IAC8B,IAA5BU,EAASC,eACX,OAIJ,IAAIC,GAAuB,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAUG,mBAAoB,IAC7CC,EAAmB,EACnBC,EAAQ,EAKRL,EAASM,WAAWC,SACtBF,IACAH,IACAE,GAAoBJ,EAASM,WAAWC,QAIrCP,EAASA,UACZT,KAAKL,gBAAgBsB,KAAK,CACxBC,MAAOT,EAASS,MAChBJ,MAAOD,EACPH,eAAgBD,EAASC,iBAKzBD,EAASU,WACXL,IACIA,GAASH,GACXF,EAASU,SAASd,SAASe,IACzBpB,KAAKL,gBAAgBsB,KAAK,CACxBC,MAAOE,EAAQC,OACfP,MAAOD,IAETb,KAAKsB,0BACHF,EACAT,EACAG,EAAQ,EACRD,EAAmB,EAJrB,IAQL,EArFgB,KAwFnBS,0BAA4B,CAC1BF,EACAT,EACAG,EACAD,KAEIO,EAAQD,UAAYL,GAASH,GAC/BS,EAAQD,SAASd,SAASkB,IACxBvB,KAAKL,gBAAgBsB,KAAK,CACxBC,MAAOK,EAAWF,OAClBP,MAAOD,IAETb,KAAKsB,0BACHC,EACAZ,EACAG,EAAQ,EACRD,EAAmB,EAJrB,GAOH,EAzGDb,KAAKL,gBAAkB,GACvBK,KAAKwB,qBAAsB,CAC5B,CAiBDtB,mBAAmBL,EAAmBC,GACpC,IAAI2B,EAAO,IAAK5B,GAahB,OAXAM,OAAOC,KAAKqB,GAAMpB,SAASC,IACzB,IAAIoB,EAAUD,EAAKnB,GACnB,GAAIoB,EAAQjB,SAAU,CAEpB,IAAIkB,EAAU7B,EAAa8B,MACxBC,GAAQA,EAAIC,mBAAqBJ,EAAQjB,WAG5CgB,EAAKnB,GAAKa,SAAWQ,EAAQR,QAC9B,KAEIM,CACR,CA0EDM,SACE,MAAM,gBAAEpC,GAAoBK,KAAKN,MACjC,OACE,UAAC,KAAD,CAAMsC,WAAS,EAACC,GAAI,CAAEC,eAAgB,UAAtC,WACE,SAAC,IAAD,CAAYC,QAAQ,KAAKC,cAAc,EAAvC,yCAGA,SAAC,IAAD,CAAMC,MAAO,CAAEC,MAAO,QAAUC,gBAAc,EAA9C,SACG5C,EAAgB6C,KAAI,CAAC/B,EAAUgC,KACvBhC,EAASC,gBACd,SAAC,KAAD,CAEEgC,OAAO,EACPT,GAAI,CACFU,YAAa,EAAqB,EAAjBlC,EAASK,OAJ9B,UAOE,SAAC,IAAD,UAAeL,EAASS,SANnBuB,UAuBlB,EAGH,WAAeG,EAAAA,EAAAA,GAAUvD,E","sources":["plugins/DocumentHandler/printMenu/TableOfContents.js"],"sourcesContent":["import React from \"react\";\nimport { withTheme } from \"@emotion/react\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport List from \"@mui/material/List\";\nimport { Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\n\nclass TableOfContents extends React.PureComponent {\n  state = {\n    titlesAndLevels: [],\n  };\n\n  constructor(props) {\n    super(props);\n    this.titlesAndLevels = [];\n    this.previousGroupHeader = false;\n  }\n\n  componentDidMount = () => {\n    const { documentMenuState, allDocuments, mode } = this.props;\n\n    const tocStructure = this.createTocStructure(\n      documentMenuState,\n      allDocuments,\n      mode\n    );\n    Object.keys(tocStructure).forEach((key) => {\n      this.setTitlesAndLevels(tocStructure[key], mode);\n    });\n\n    this.setState({ titlesAndLevels: this.titlesAndLevels });\n  };\n\n  createTocStructure(documentMenuState, allDocuments) {\n    let menu = { ...documentMenuState };\n    //add the chapters from all documents onto the documentMenuState\n    Object.keys(menu).forEach((key) => {\n      let menuDoc = menu[key];\n      if (menuDoc.document) {\n        //get the corresponding chapters from allDocuments.\n        let jsonDoc = allDocuments.find(\n          (doc) => doc.documentFileName === menuDoc.document\n        );\n        //add the chapters to our doc in the menuState.\n        menu[key].chapters = jsonDoc.chapters;\n      }\n    });\n    return menu;\n  }\n\n  setTitlesAndLevels = (document, mode) => {\n    //If the chosen config for table of contents is to only include printed documents in the toc. skip the document if it's not chosen for print.\n    if (mode === \"partial\") {\n      if (document.chosenForPrint !== true) {\n        return;\n      }\n    }\n\n    let levelsToShow = document?.tocChapterLevels || 100;\n    let indentationLevel = 0;\n    let level = 0;\n\n    /*If a document is under a menu parent, push the level up, as the levelsToShow property\n    in the document configuration is specific to that document, and does not take into account. that having\n    a parent document may change it's level*/\n    if (document.allParents.length) {\n      level++;\n      levelsToShow++;\n      indentationLevel += document.allParents.length;\n    }\n\n    //Add the menu document title if it is a menu parent that just holds other documents;\n    if (!document.document) {\n      this.titlesAndLevels.push({\n        title: document.title,\n        level: indentationLevel,\n        chosenForPrint: document.chosenForPrint,\n      });\n    }\n\n    //add the documents chapters to the table of contents.\n    if (document.chapters) {\n      level++;\n      if (level <= levelsToShow) {\n        document.chapters.forEach((chapter) => {\n          this.titlesAndLevels.push({\n            title: chapter.header,\n            level: indentationLevel,\n          });\n          this.setChapterTitlesAndLevels(\n            chapter,\n            levelsToShow,\n            level + 1,\n            indentationLevel + 1\n          );\n        });\n      }\n    }\n  };\n\n  setChapterTitlesAndLevels = (\n    chapter,\n    levelsToShow,\n    level,\n    indentationLevel\n  ) => {\n    if (chapter.chapters && level <= levelsToShow) {\n      chapter.chapters.forEach((subChapter) => {\n        this.titlesAndLevels.push({\n          title: subChapter.header,\n          level: indentationLevel,\n        });\n        this.setChapterTitlesAndLevels(\n          subChapter,\n          levelsToShow,\n          level + 1,\n          indentationLevel + 1\n        );\n      });\n    }\n  };\n\n  render() {\n    const { titlesAndLevels } = this.state;\n    return (\n      <Grid container sx={{ pageBreakAfter: \"always\" }}>\n        <Typography variant=\"h4\" gutterBottom={true}>\n          Innehållsförteckning\n        </Typography>\n        <List style={{ width: \"100%\" }} disablePadding>\n          {titlesAndLevels.map((document, index) => {\n            return document.chosenForPrint ? (\n              <ListItem\n                key={index}\n                dense={true}\n                sx={{\n                  paddingLeft: 1 + document.level * 3,\n                }}\n              >\n                <ListItemText>{document.title}</ListItemText>\n              </ListItem>\n            ) : (\n              <ListItem\n                dense={true}\n                key={index}\n                sx={{\n                  paddingLeft: 1 + document.level * 3,\n                }}\n              >\n                <ListItemText>{document.title}</ListItemText>\n              </ListItem>\n            );\n          })}\n        </List>\n      </Grid>\n    );\n  }\n}\n\nexport default withTheme(TableOfContents);\n"],"names":["TableOfContents","React","constructor","props","super","state","titlesAndLevels","componentDidMount","documentMenuState","allDocuments","mode","this","tocStructure","createTocStructure","Object","keys","forEach","key","setTitlesAndLevels","setState","document","chosenForPrint","levelsToShow","tocChapterLevels","indentationLevel","level","allParents","length","push","title","chapters","chapter","header","setChapterTitlesAndLevels","subChapter","previousGroupHeader","menu","menuDoc","jsonDoc","find","doc","documentFileName","render","container","sx","pageBreakAfter","variant","gutterBottom","style","width","disablePadding","map","index","dense","paddingLeft","withTheme"],"sourceRoot":""}
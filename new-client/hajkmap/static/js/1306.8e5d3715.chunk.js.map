{"version":3,"file":"static/js/1306.8e5d3715.chunk.js","mappings":"oOAYA,MAAMA,UAAoBC,EAAAA,cAAqB,cAAD,yBAC5CC,MAAQ,CACNC,MAAM,EAFoC,CAO5CC,oBACE,MAAM,OAAEC,EAAF,QAAUC,GAAYC,KAAKC,MAC3BC,EAAMF,KAAKG,MAAML,EAAQC,EAAQK,iBACvCJ,KAAKK,KAAKH,EACX,CAEDC,MAAMG,EAAKC,GAoBT,OAnBID,GAAsB,kBAARA,IACfA,EAAIE,MAAM,aAAe,IAAIC,SAASC,IAerCJ,EAAMA,EAAIK,QAAQD,EAdlB,SAAgBE,EAAGC,GAEjB,QADAA,EAAIA,EAAEF,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIG,MAAM,MACpCC,QACR,KAAK,EACH,OAAOH,EAAEC,EAAE,KAAO,GACpB,KAAK,EACH,OAAOD,EAAEC,EAAE,IAAIA,EAAE,KAAO,GAC1B,KAAK,EACH,OAAOD,EAAEC,EAAE,IAAIA,EAAE,IAAIA,EAAE,KAAO,GAChC,QACE,MAAO,GAEZ,CAE2BG,CAAOT,EAAYG,GAA/C,IAGGJ,CACR,CAEDD,KAAKH,IACHe,EAAAA,EAAAA,QAAOf,GAAKgB,MAAMC,IAChBA,EAASC,OAAOF,MAAMG,IACpB,MAAMzB,EAAOyB,EAAIC,SAASC,KAAKxB,IACtB,CACLyB,KAAMzB,EAAQQ,WAAWkB,SAASX,MAAM,KAAK,GAC7CY,MAAO3B,EAAQQ,WAAWmB,UAG9B1B,KAAK2B,SAAS,CACZ/B,KAAMA,GADR,GAPF,GAYH,CAEDgC,SACE,OAAI5B,KAAKL,MAAMC,MAEX,UAAC,IAAD,CACEiC,MAAO,IACPC,OAAQ,IACRlC,KAAMI,KAAKL,MAAMC,KACjBmC,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,WAWE,SAAC,IAAD,CAAeC,gBAAgB,SAC/B,SAAC,IAAD,CAAOC,QAAQ,UACf,SAAC,IAAD,KACA,SAAC,IAAD,KACA,SAAC,IAAD,KACA,SAAC,IAAD,CAAMC,KAAK,WAAWD,QAAQ,QAAQE,OAAO,gBAI1C,mCAEV,EAGH,W","sources":["components/Diagram.js"],"sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport { hfetch } from \"utils/FetchWrapper\";\n\nclass DiagramView extends React.PureComponent {\n  state = {\n    data: false,\n  };\n\n  // TODO: Add propTypes\n\n  componentDidMount() {\n    const { source, feature } = this.props;\n    const url = this.parse(source, feature.getProperties());\n    this.load(url);\n  }\n\n  parse(str, properties) {\n    if (str && typeof str === \"string\") {\n      (str.match(/{(.*?)}/g) || []).forEach((property) => {\n        function lookup(o, s) {\n          s = s.replace(\"{\", \"\").replace(\"}\", \"\").split(\".\");\n          switch (s.length) {\n            case 1:\n              return o[s[0]] || \"\";\n            case 2:\n              return o[s[0]][s[1]] || \"\";\n            case 3:\n              return o[s[0]][s[1]][s[2]] || \"\";\n            default:\n              return \"\";\n          }\n        }\n\n        str = str.replace(property, lookup(properties, property));\n      });\n    }\n    return str;\n  }\n\n  load(url) {\n    hfetch(url).then((response) => {\n      response.json().then((rsp) => {\n        const data = rsp.features.map((feature) => {\n          return {\n            date: feature.properties.datetime.split(\"T\")[0],\n            value: feature.properties.value,\n          };\n        });\n        this.setState({\n          data: data,\n        });\n      });\n    });\n  }\n\n  render() {\n    if (this.state.data) {\n      return (\n        <LineChart\n          width={400}\n          height={300}\n          data={this.state.data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#82ca9d\" />\n        </LineChart>\n      );\n    } else {\n      return <div>Laddar</div>;\n    }\n  }\n}\n\nexport default DiagramView;\n"],"names":["DiagramView","React","state","data","componentDidMount","source","feature","this","props","url","parse","getProperties","load","str","properties","match","forEach","property","replace","o","s","split","length","lookup","hfetch","then","response","json","rsp","features","map","date","datetime","value","setState","render","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke"],"sourceRoot":""}
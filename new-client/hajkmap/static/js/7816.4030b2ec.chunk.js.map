{"version":3,"file":"static/js/7816.4030b2ec.chunk.js","mappings":"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","sources":["plugins/LayerSwitcher/components/LayerGroup.js","plugins/LayerSwitcher/components/LayerItem.js"],"sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport LayerItem from \"./LayerItem.js\";\nimport { styled } from \"@mui/material/styles\";\nimport { Accordion, AccordionDetails, AccordionSummary } from \"@mui/material\";\nimport { Box, Typography } from \"@mui/material\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\n\nconst StyledAccordion = styled(Accordion)(() => ({\n  borderRadius: 0,\n  boxShadow: \"none\",\n  backgroundImage: \"none\",\n}));\n\nconst StyledAccordionSummary = styled(AccordionSummary)(() => ({\n  minHeight: 35,\n  padding: \"0px\",\n  overflow: \"hidden\",\n  \"&.MuiAccordionSummary-root.Mui-expanded\": {\n    minHeight: 35,\n  },\n  \"& .MuiAccordionSummary-content\": {\n    transition: \"inherit\",\n    marginTop: 0,\n    marginBottom: 0,\n    \"&.Mui-expanded\": {\n      marginTop: 0,\n      marginBottom: 0,\n    },\n  },\n}));\n\nconst StyledAccordionDetails = styled(AccordionDetails)(() => ({\n  width: \"100%\",\n  display: \"block\",\n  padding: \"0\",\n}));\n\nconst SummaryContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexBasis: \"100%\",\n  borderBottom: `${theme.spacing(0.2)} solid ${theme.palette.divider}`,\n}));\n\nconst HeadingTypography = styled(Typography)(({ theme }) => ({\n  fontSize: theme.typography.pxToRem(15),\n  flexBasis: \"100%\",\n}));\n\nconst ExpandButtonWrapper = styled(\"div\")(() => ({\n  float: \"left\",\n}));\n\nconst checkBoxIconStyle = {\n  cursor: \"pointer\",\n  float: \"left\",\n  marginRight: \"5px\",\n  padding: \"0\",\n};\n\nclass LayerGroup extends React.PureComponent {\n  state = {\n    expanded: false,\n    groups: [],\n    layers: [],\n    name: \"\",\n    parent: \"-1\",\n    toggled: false,\n    chapters: [],\n  };\n\n  static defaultProps = {\n    child: false,\n    expanded: false,\n  };\n\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    chapters: propTypes.array.isRequired,\n    child: propTypes.bool.isRequired,\n    expanded: propTypes.bool.isRequired,\n    group: propTypes.object.isRequired,\n    handleChange: propTypes.func,\n    model: propTypes.object.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.model = this.props.model;\n    this.bindVisibleChangeForLayersInGroup();\n  }\n\n  componentDidMount() {\n    this.setState({\n      ...this.props.group,\n    });\n  }\n\n  componentWillUnmount() {\n    //LayerGroup is never unmounted atm but we remove listener in case this changes in the future\n    this.unbindVisibleChangeForLayersInGroup();\n  }\n\n  //We force update when a layer in this group has changed visibility to\n  //be able to sync togglebuttons in GUI\n  layerVisibilityChanged = (e) => {\n    this.forceUpdate();\n  };\n\n  getAllLayersInGroupAndSubGroups = (groups) => {\n    return groups.reduce((layers, group) => {\n      if (this.hasSubGroups(group)) {\n        layers = [\n          ...layers,\n          ...this.getAllLayersInGroupAndSubGroups(group.groups),\n        ];\n      }\n      return [...layers, ...group.layers];\n    }, []);\n  };\n\n  getAllMapLayersReferencedByGroup = () => {\n    const { app, group } = this.props;\n    const allLayersInGroup = this.getAllLayersInGroupAndSubGroups([group]);\n    return app\n      .getMap()\n      .getLayers()\n      .getArray()\n      .filter((mapLayer) => {\n        return allLayersInGroup.find((layer) => {\n          return layer.id === mapLayer.get(\"name\");\n        });\n      });\n  };\n\n  bindVisibleChangeForLayersInGroup = () => {\n    this.getAllMapLayersReferencedByGroup().forEach((layer) => {\n      layer.on(\"change:visible\", this.layerVisibilityChanged);\n    });\n  };\n\n  unbindVisibleChangeForLayersInGroup = () => {\n    this.getAllMapLayersReferencedByGroup().forEach((layer) => {\n      layer.un(\"change:visible\", this.layerVisibilityChanged);\n    });\n  };\n\n  handleChange = (panel) => (event, expanded) => {\n    this.setState({\n      expanded: expanded ? panel : false,\n    });\n  };\n\n  renderLayerGroups() {\n    let { expanded } = this.state;\n    if (this.state.groups.length === 1 && this.state.groups[0].expanded) {\n      expanded = this.state.groups[0].id;\n    }\n    return this.state.groups.map((group, i) => {\n      return (\n        <LayerGroup\n          expanded={expanded === group.id}\n          key={i}\n          group={group}\n          model={this.props.model}\n          handleChange={this.handleChange}\n          app={this.props.app}\n          child={true}\n          chapters={this.props.chapters}\n          options={this.props.options}\n        />\n      );\n    });\n  }\n\n  toggleExpanded = () => {\n    this.setState({ expanded: !this.state.expanded });\n  };\n\n  isToggled() {\n    const { group } = this.props;\n    return this.areAllGroupsAndSubGroupsToggled(group);\n  }\n\n  isSemiToggled() {\n    const { group } = this.props;\n    return this.areSubGroupsAndLayersSemiToggled(group);\n  }\n\n  layerInMap = (layer) => {\n    const layers = this.props.app.getMap().getLayers().getArray();\n    let foundMapLayer = layers.find((mapLayer) => {\n      return mapLayer.get(\"name\") === layer.id;\n    });\n\n    if (foundMapLayer && foundMapLayer.getVisible()) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  areSubGroupsAndLayersSemiToggled = (group) => {\n    let someSubItemToggled = false;\n    if (this.hasLayers(group)) {\n      someSubItemToggled = group.layers.some((layer) => {\n        return this.layerInMap(layer);\n      });\n    }\n\n    if (this.hasSubGroups(group) && !someSubItemToggled) {\n      someSubItemToggled = group.groups.some((g) => {\n        return this.areSubGroupsAndLayersSemiToggled(g);\n      });\n    }\n    return someSubItemToggled;\n  };\n\n  areAllGroupsAndSubGroupsToggled = (group) => {\n    let allGroupsToggled = true;\n    let allLayersToggled = true;\n    if (this.hasSubGroups(group)) {\n      allGroupsToggled = group.groups.every((g) => {\n        return this.areAllGroupsAndSubGroupsToggled(g);\n      });\n    }\n    if (this.hasLayers(group)) {\n      allLayersToggled = group.layers.every((layer) => {\n        return this.layerInMap(layer);\n      });\n    }\n    return allGroupsToggled && allLayersToggled;\n  };\n\n  hasLayers = (group) => {\n    return group.layers && group.layers.length > 0;\n  };\n\n  hasSubGroups = (group) => {\n    return group.groups && group.groups.length > 0;\n  };\n  /**\n   * @summary Loops through groups of objects and changes visibility for all layers within group.\n   *\n   * @param {boolean} visibility\n   * @param {array|object} groupsArray\n   * @memberof LayerGroup\n   */\n  toggleGroups(visibility, groupsArray) {\n    // Sometimes groupsArray is an array of objects:\n    Array.isArray(groupsArray) &&\n      groupsArray.forEach((group) => {\n        // First call this function on all groups that might be inside this group\n        group.groups.length &&\n          group.groups.forEach((g) => {\n            this.toggleGroups(visibility, g);\n          });\n\n        // Next, call toggleLayers on all layers in group\n        this.toggleLayers(visibility, group.layers);\n      });\n\n    // … but sometimes it's not an array but rather an object:\n    typeof groupsArray === \"object\" &&\n      groupsArray !== null &&\n      groupsArray.hasOwnProperty(\"groups\") &&\n      this.toggleGroups(visibility, groupsArray.groups);\n\n    typeof groupsArray === \"object\" &&\n      groupsArray !== null &&\n      groupsArray.hasOwnProperty(\"layers\") &&\n      this.toggleLayers(visibility, groupsArray.layers);\n  }\n\n  toggleLayers(visibility, layers) {\n    this.props.app\n      .getMap()\n      .getAllLayers()\n      .filter((mapLayer) => {\n        return layers.some((layer) => layer.id === mapLayer.get(\"name\"));\n      })\n      .forEach((mapLayer) => {\n        if (mapLayer.get(\"layerType\") === \"group\") {\n          if (visibility === true) {\n            this.model.observer.publish(\"showLayer\", mapLayer);\n          } else {\n            this.model.observer.publish(\"hideLayer\", mapLayer);\n          }\n        }\n        mapLayer.setVisible(visibility);\n      });\n  }\n\n  getCheckbox = () => {\n    if (this.isToggled()) {\n      return <CheckBoxIcon sx={checkBoxIconStyle} />;\n    }\n    if (this.isSemiToggled()) {\n      return <CheckBoxIcon sx={{ ...checkBoxIconStyle, color: \"gray\" }} />;\n    }\n    return <CheckBoxOutlineBlankIcon sx={checkBoxIconStyle} />;\n  };\n  /**\n   * If Group has \"toggleable\" property enabled, render the toggle all checkbox.\n   *\n   * @returns React.Component\n   * @memberof LayerGroup\n   */\n  renderToggleAll() {\n    // TODO: Rename props.group.toggled to \"toggleable\" or something…\n\n    if (this.props.group.toggled) {\n      return (\n        <SummaryContainer\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this.isToggled()) {\n              this.toggleGroups(false, this.props.group.groups);\n              this.toggleLayers(false, this.props.group.layers);\n            } else {\n              this.toggleGroups(true, this.props.group.groups);\n              this.toggleLayers(true, this.props.group.layers);\n            }\n          }}\n        >\n          <div>{this.getCheckbox()}</div>\n          <HeadingTypography>{this.state.name}</HeadingTypography>\n        </SummaryContainer>\n      );\n    } else {\n      return (\n        <SummaryContainer>\n          <HeadingTypography>{this.state.name}</HeadingTypography>\n        </SummaryContainer>\n      );\n    }\n  }\n\n  render() {\n    const { expanded } = this.state;\n    return (\n      // If the layerItem is a child, it should be rendered a tad to the\n      // right. Apparently 21px.\n      <Box sx={{ marginLeft: this.props.child ? \"21px\" : \"0px\" }}>\n        <StyledAccordion\n          expanded={this.state.expanded}\n          TransitionProps={{\n            timeout: 0,\n          }}\n          onChange={() => {\n            this.setState({\n              expanded: !this.state.expanded,\n            });\n          }}\n        >\n          <StyledAccordionSummary>\n            <ExpandButtonWrapper>\n              {expanded ? (\n                <KeyboardArrowDownIcon onClick={() => this.toggleExpanded()} />\n              ) : (\n                <KeyboardArrowRightIcon onClick={() => this.toggleExpanded()} />\n              )}\n            </ExpandButtonWrapper>\n            {this.renderToggleAll()}\n          </StyledAccordionSummary>\n          <StyledAccordionDetails>\n            <div>\n              {this.state.layers.map((layer, i) => {\n                const mapLayer = this.model.layerMap[layer.id];\n                if (mapLayer) {\n                  return (\n                    <LayerItem\n                      key={mapLayer.get(\"name\")}\n                      layer={mapLayer}\n                      model={this.props.model}\n                      options={this.props.options}\n                      chapters={this.props.chapters}\n                      app={this.props.app}\n                      onOpenChapter={(chapter) => {\n                        const informativeWindow = this.props.app.windows.find(\n                          (window) => window.type === \"informative\"\n                        );\n                        informativeWindow.props.custom.open(chapter);\n                      }}\n                    />\n                  );\n                } else {\n                  return null;\n                }\n              })}\n              {this.renderLayerGroups()}\n            </div>\n          </StyledAccordionDetails>\n        </StyledAccordion>\n      </Box>\n    );\n  }\n}\n\nexport default LayerGroup;\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { styled } from \"@mui/material/styles\";\nimport { Button, Tooltip, Typography, Grid } from \"@mui/material\";\n\nimport IconWarning from \"@mui/icons-material/Warning\";\nimport CallMadeIcon from \"@mui/icons-material/CallMade\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport RadioButtonChecked from \"@mui/icons-material/RadioButtonChecked\";\nimport RadioButtonUnchecked from \"@mui/icons-material/RadioButtonUnchecked\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport TableViewIcon from \"@mui/icons-material/TableView\";\n\nimport LayerGroupItem from \"./LayerGroupItem.js\";\nimport LayerSettings from \"./LayerSettings.js\";\nimport DownloadLink from \"./DownloadLink.js\";\n\nconst LayerItemContainer = styled(\"div\")(({ theme }) => ({\n  paddingLeft: \"0\",\n  borderBottom: `${theme.spacing(0.2)} solid ${theme.palette.divider}`,\n}));\n\nconst LayerItemWrapper = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  marginTop: \"0\",\n}));\n\nconst LayerTogglerButtonWrapper = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  cursor: \"pointer\",\n  float: \"left\",\n  marginRight: \"5px\",\n}));\n\nconst InfoTextContainer = styled(\"div\")(({ theme }) => ({\n  margin: \"10px 45px\",\n}));\n\nconst Caption = styled(Typography)(({ theme }) => ({\n  cursor: \"pointer\",\n  fontSize: theme.typography.pxToRem(15),\n}));\n\nconst LegendIcon = styled(\"img\")(({ theme }) => ({\n  width: theme.typography.pxToRem(18),\n  height: theme.typography.pxToRem(18),\n  marginRight: \"5px\",\n}));\n\nconst LayerButtonsContainer = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n}));\n\nconst LayerButtonWrapper = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  width: 35,\n  height: 35,\n  cursor: \"pointer\",\n}));\n\nconst StyledList = styled(\"ul\")(() => ({\n  padding: 0,\n  margin: 0,\n  listStyle: \"none\",\n}));\n\nclass LayerItem extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { layer } = props;\n    const layerInfo = layer.get(\"layerInfo\");\n\n    this.isBackgroundLayer = layerInfo.layerType === \"base\";\n    this.caption = layerInfo.caption;\n    this.name = layer.get(\"name\");\n    this.legend = layerInfo.legend;\n    this.legendIcon = layerInfo.legendIcon;\n    this.infoTitle = layerInfo.infoTitle;\n    this.infoText = layerInfo.infoText;\n    this.infoUrl = layerInfo.infoUrl;\n    this.infoUrlText = layerInfo.infoUrlText;\n    this.infoOwner = layerInfo.infoOwner;\n    this.localObserver = layer.localObserver;\n    this.showAttributeTableButton = layerInfo.showAttributeTableButton || false;\n    this.usesMinMaxZoom = this.layerUsesMinMaxZoom();\n    this.minMaxZoomAlertOnToggleOnly = layer.get(\"minMaxZoomAlertOnToggleOnly\");\n\n    this.state = {\n      visible: layer.get(\"visible\"),\n      status: \"ok\",\n      zoomVisible: true,\n      open: false,\n      toggleSettings: false,\n      infoVisible: false,\n    };\n\n    // Subscribe to events sent when another background layer is clicked and\n    // disable all other layers to implement the RadioButton behaviour\n    if (this.isBackgroundLayer) {\n      layer.localObserver.subscribe(\"backgroundLayerChanged\", (activeLayer) => {\n        if (activeLayer !== this.name) {\n          if (!layer.isFakeMapLayer) {\n            layer.setVisible(false);\n          }\n          this.setState({\n            visible: false,\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Triggered when the component is successfully mounted into the DOM.\n   * @instance\n   */\n  componentDidMount() {\n    this.props.layer.on?.(\"change:visible\", (e) => {\n      const visible = !e.oldValue;\n      this.setState({\n        visible,\n      });\n\n      this.listenToZoomChange(visible);\n    });\n\n    if (this.state.visible) {\n      this.triggerZoomCheck(null, this.state.visible);\n    }\n    this.listenToZoomChange(this.state.visible);\n\n    // Set load status by subscribing to a global event. Expect ID (int) of layer\n    // and status (string \"ok\"|\"loaderror\"). Also, once status was set to \"loaderror\",\n    // don't change it back to \"ok\": we'll get a response for each tile, so most of\n    // the tiles might be \"ok\", but if only one of the tiles has \"loaderror\", we\n    // consider that the layer has failed loading and want to inform the user.\n    this.props.app.globalObserver.subscribe(\n      \"layerswitcher.wmsLayerLoadStatus\",\n      (d) => {\n        this.state.status !== \"loaderror\" &&\n          this.name === d.id &&\n          this.setState({\n            status: d.status,\n          });\n      }\n    );\n  }\n\n  layerUsesMinMaxZoom() {\n    const lprops = this.props.layer.getProperties();\n    const maxZ = lprops.maxZoom ?? 0;\n    const minZ = lprops.minZoom ?? 0;\n    // When reading min/max-Zoom from layer, its not consistent with the\n    // initial values from config. Suddenly Infinity is used.\n    return (maxZ > 0 && maxZ < Infinity) || (minZ > 0 && minZ < Infinity);\n  }\n\n  zoomEndHandler = (e) => {\n    const zoom = this.props.model.olMap.getView().getZoom();\n    const lprops = this.props.layer.getProperties();\n    const layerIsZoomVisible = zoom > lprops.minZoom && zoom <= lprops.maxZoom;\n\n    let showSnack = false;\n\n    if (this.minMaxZoomAlertOnToggleOnly === true) {\n      if (!this.state.visible && !layerIsZoomVisible && e?.type === \"click\") {\n        showSnack = true;\n      }\n    } else {\n      if (\n        !layerIsZoomVisible &&\n        (this.state.zoomVisible || !this.state.visible)\n      ) {\n        showSnack = true;\n      }\n    }\n\n    if (showSnack === true) {\n      this.showZoomSnack();\n    }\n\n    this.setState({\n      zoomVisible: layerIsZoomVisible,\n    });\n    return layerIsZoomVisible;\n  };\n\n  listenToZoomChange(bListen) {\n    if (!this.usesMinMaxZoom) return;\n\n    const eventName = \"core.zoomEnd\";\n    if (bListen && !this.zoomEndListener) {\n      this.zoomEndListener = this.props.app.globalObserver.subscribe(\n        eventName,\n        this.zoomEndHandler\n      );\n    } else {\n      if (this.zoomEndListener) {\n        this.props.app.globalObserver.unsubscribe(\n          eventName,\n          this.zoomEndListener\n        );\n        this.zoomEndListener = null;\n      }\n    }\n  }\n\n  showZoomSnack() {\n    if (this.zoomWarningSnack) return;\n\n    // We're fetching layerInfo object from the layer object.\n    const layerInfo = this.props.layer.get(\"layerInfo\");\n\n    // If layerInfo is defined, we get layersInfo from it.\n    // Otherwise, layersInfo is set as undefined.\n    const layersInfo = layerInfo ? layerInfo.layersInfo : undefined;\n\n    // If the layer is a LayerGroupItem (meaning it contains more than one object in the \"layersInfo\" array),\n    // then no message should be displayed.\n    // Here we also ensure that layersInfo is defined and contains more than one layer\n    // before trying to access its keys. This prevents a TypeError when layersInfo\n    // is undefined.\n    if (layersInfo && Object.keys(layersInfo).length > 1) {\n      return;\n    }\n\n    this.zoomWarningSnack = this.props.enqueueSnackbar(\n      `Lagret \"${this.caption}\"  är inte synligt vid aktuell zoomnivå.`,\n      {\n        variant: \"warning\",\n        preventDuplicate: true,\n        onClose: () => {\n          this.zoomWarningSnack = null;\n        },\n      }\n    );\n  }\n\n  triggerZoomCheck(e, visible) {\n    if (!this.usesMinMaxZoom) return;\n\n    this.zoomEndHandler(e);\n\n    if (visible === false) {\n      if (!this.zoomWarningSnack) return;\n      this.props.closeSnackbar(this.zoomWarningSnack);\n      this.zoomWarningSnack = null;\n    }\n  }\n\n  /**\n   * Toggle visibility of this layer item.\n   * Also, if layer is being hidden, reset \"status\" (if layer loading failed,\n   * \"status\" is \"loaderror\", and it should be reset if user unchecks layer).\n   * @instance\n   */\n  toggleVisible = (e) => {\n    const layer = this.props.layer;\n    if (this.isBackgroundLayer) {\n      document.getElementById(\"map\").style.backgroundColor = \"#FFF\"; // sets the default background color to white\n      if (layer.isFakeMapLayer) {\n        switch (this.name) {\n          case \"-2\":\n            document.getElementById(\"map\").style.backgroundColor = \"#000\";\n            break;\n          case \"-1\":\n          default:\n            document.getElementById(\"map\").style.backgroundColor = \"#FFF\";\n            break;\n        }\n      } else {\n        layer.setVisible(true);\n      }\n      this.setState({ visible: true });\n      // Publish event to ensure all other background layers are disabled\n      layer.localObserver.publish(\"backgroundLayerChanged\", this.name);\n    } else {\n      const visible = !this.state.visible;\n      this.setState({\n        visible,\n      });\n      this.props.layer.setVisible(visible);\n      this.triggerZoomCheck(e, visible);\n    }\n  };\n\n  /**\n   * Render the load information component.\n   * @instance\n   * @return {external:ReactElement}\n   */\n  renderStatusButton() {\n    return (\n      this.state.status === \"loaderror\" && (\n        <Tooltip\n          disableInteractive\n          title=\"Lagret kunde inte laddas in. Kartservern svarar inte.\"\n        >\n          <LayerButtonWrapper>\n            <IconWarning />\n          </LayerButtonWrapper>\n        </Tooltip>\n      )\n    );\n  }\n\n  renderInfoButton = () => {\n    return this.isInfoEmpty() ? null : (\n      <Tooltip title=\"Mer information om lagret\">\n        <LayerButtonWrapper>\n          {this.state.infoVisible ? (\n            <RemoveCircleIcon onClick={this.toggleInfo} />\n          ) : (\n            <InfoIcon\n              onClick={this.toggleInfo}\n              sx={{\n                boxShadow: this.state.infoVisible\n                  ? \"rgb(204, 204, 204) 2px 3px 1px\"\n                  : \"inherit\",\n                borderRadius: \"100%\",\n              }}\n            />\n          )}\n        </LayerButtonWrapper>\n      </Tooltip>\n    );\n  };\n\n  renderMoreButton = () => {\n    return (\n      <Tooltip title=\"Fler inställningar\">\n        <LayerButtonWrapper>\n          {this.state.toggleSettings ? (\n            <CloseIcon onClick={this.toggleSettings} />\n          ) : (\n            <MoreHorizIcon onClick={this.toggleSettings} />\n          )}\n        </LayerButtonWrapper>\n      </Tooltip>\n    );\n  };\n\n  renderLegendImage() {\n    const src =\n      this.legend && this.legend[0] && this.legend[0].url\n        ? this.legend[0].url\n        : \"\";\n    return src ? <img width=\"30\" alt=\"legend\" src={src} /> : null;\n  }\n\n  isInfoEmpty() {\n    let chaptersWithLayer = this.findChapters(this.name, this.props.chapters);\n    return !(\n      this.infoCaption ||\n      this.infoUrl ||\n      this.infoOwner ||\n      this.infoText ||\n      chaptersWithLayer.length > 0\n    );\n  }\n\n  openInformative = (chapter) => (e) => {\n    this.props.onOpenChapter(chapter);\n  };\n\n  findChapters(id, chapters) {\n    let result = [];\n    if (Array.isArray(chapters)) {\n      result = chapters.reduce((chaptersWithLayer, chapter) => {\n        if (Array.isArray(chapter.layers)) {\n          if (chapter.layers.some((layerId) => layerId === id)) {\n            chaptersWithLayer = [...chaptersWithLayer, chapter];\n          }\n          if (chapter.chapters.length > 0) {\n            chaptersWithLayer = [\n              ...chaptersWithLayer,\n              ...this.findChapters(id, chapter.chapters),\n            ];\n          }\n        }\n        return chaptersWithLayer;\n      }, []);\n    }\n    return result;\n  }\n\n  renderChapterLinks(chapters) {\n    if (chapters && chapters.length > 0) {\n      let chaptersWithLayer = this.findChapters(this.name, chapters);\n      if (chaptersWithLayer.length > 0) {\n        return (\n          <InfoTextContainer>\n            <Typography>\n              Innehåll från denna kategori finns benämnt i följande kapitel i\n              översiktsplanen:\n            </Typography>\n            <StyledList>\n              {chaptersWithLayer.map((chapter, i) => {\n                return (\n                  <li key={i}>\n                    <Button\n                      size=\"small\"\n                      onClick={this.openInformative(chapter)}\n                    >\n                      {chapter.header}\n                      <CallMadeIcon sx={{ marginLeft: 1, fontSize: \"16px\" }} />\n                    </Button>\n                  </li>\n                );\n              })}\n            </StyledList>\n          </InfoTextContainer>\n        );\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  toggle() {\n    this.setState({\n      open: !this.state.open,\n    });\n  }\n\n  renderInfo() {\n    if (this.infoText) {\n      return (\n        <InfoTextContainer>\n          <Typography variant=\"subtitle2\">{this.infoTitle}</Typography>\n          <Typography\n            variant=\"body2\"\n            dangerouslySetInnerHTML={{\n              __html: this.infoText,\n            }}\n          />\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderMetadataLink() {\n    if (this.infoUrl) {\n      return (\n        <InfoTextContainer>\n          <a href={this.infoUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n            {this.infoUrlText || this.infoUrl}\n          </a>\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderOwner() {\n    if (this.infoOwner) {\n      return (\n        <InfoTextContainer>\n          <Typography\n            variant=\"body2\"\n            dangerouslySetInnerHTML={{ __html: this.infoOwner }}\n          />\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderDetails() {\n    if (this.state.infoVisible) {\n      return (\n        <div>\n          {this.renderInfo()}\n          {this.renderMetadataLink()}\n          {this.renderOwner()}\n          <div>{this.renderChapterLinks(this.props.chapters || [])}</div>\n        </div>\n      );\n    }\n  }\n\n  toggleSettings = () => {\n    this.setState({\n      toggleSettings: !this.state.toggleSettings,\n    });\n  };\n\n  toggleInfo = () => {\n    this.setState({\n      infoVisible: !this.state.infoVisible,\n    });\n  };\n\n  renderLegendIcon() {\n    return <LegendIcon alt=\"Teckenförklaring\" src={this.legendIcon} />;\n  }\n\n  getLayerToggler = () => {\n    const { visible } = this.state;\n    const icon = visible ? (\n      this.isBackgroundLayer ? (\n        <RadioButtonChecked />\n      ) : (\n        <CheckBoxIcon\n          sx={{\n            fill: (theme) =>\n              !this.state.zoomVisible && this.state.visible\n                ? theme.palette.warning.dark\n                : \"\",\n          }}\n        />\n      )\n    ) : this.isBackgroundLayer ? (\n      <RadioButtonUnchecked />\n    ) : (\n      <CheckBoxOutlineBlankIcon />\n    );\n    return <LayerTogglerButtonWrapper>{icon}</LayerTogglerButtonWrapper>;\n  };\n\n  #showAttributeTable = async () => {\n    try {\n      const url = this.props.layer.getSource().get(\"url\").replace(\"wms\", \"wfs\");\n      const { LAYERS } = this.props.layer.getSource().getParams();\n      // If URL already contains a query string part, we want to glue them together.\n      const glue = url.includes(\"?\") ? \"&\" : \"?\";\n      const getFeatureUrl = `${url}${glue}service=WFS&version=1.0.0&request=GetFeature&typeName=${LAYERS}&maxFeatures=5000&outputFormat=application%2Fjson`;\n      const describeFeatureTypeUrl = `${url}${glue}service=WFS&version=1.0.0&request=DescribeFeatureType&typeName=${LAYERS}&outputFormat=application%2Fjson`;\n      // TODO: QGIS Server doesn't support JSON response for DescribeFeatureType. We must\n      // fetch the result as GML2 and then parse it accordingly. This will require\n      // some more work than the current approach.\n      // const describeFeatureTypeUrl = `${url}${glue}service=WFS&version=1.0.0&request=DescribeFeatureType&typeName=${LAYERS}`;\n      const r1 = await fetch(getFeatureUrl);\n      const features = await r1.json();\n      const r2 = await fetch(describeFeatureTypeUrl);\n      const description = await r2.json();\n\n      const columns = description.featureTypes\n        .find((f) => f.typeName === LAYERS) // featureTypes contains an object, where typeName will be the same as the layer name we requested\n        .properties.filter((c) => !c.type.toLowerCase().includes(\"gml\")) // Best guess to try to filter out the geometry column, we don't want to show it\n        .map((c) => {\n          // Prepare an object that has the format of 'columns' prop for MUI's DataGrid\n          return {\n            field: c.name,\n            headerName: c.name,\n            type: c.localType === \"int\" ? \"number\" : c.localType, // DataGrid wants 'number', not 'int', see https://mui.com/components/data-grid/columns/#column-types\n            flex: 1,\n          };\n        });\n\n      const rows = features.features.map((r, i) => {\n        return { ...r.properties, id: i };\n      });\n\n      this.props.app.globalObserver.publish(\"core.showAttributeTable\", {\n        title: `${this.caption} (${LAYERS})`,\n        content: { columns, rows },\n      });\n    } catch (error) {\n      console.error(error);\n      console.log(this);\n      this.props.enqueueSnackbar(\n        `Serverfel: attributtabellen för lagret \"${this.caption}\" kunde inte visas`,\n        { variant: \"error\" }\n      );\n    }\n  };\n\n  render() {\n    const { layer, model, app, chapters } = this.props;\n\n    const cqlFilterVisible =\n      this.props.app.config.mapConfig.map?.cqlFilterVisible || false;\n\n    if (!this.caption) {\n      return null;\n    }\n\n    if (layer.get(\"layerType\") === \"group\") {\n      return (\n        <LayerGroupItem\n          appConfig={app.config.appConfig}\n          mapConfig={app.config.mapConfig}\n          layer={layer}\n          model={model}\n          options={this.props.options}\n          chapters={chapters}\n          cqlFilterVisible={cqlFilterVisible}\n          onOpenChapter={(chapter) => {\n            const informativeWindow = app.windows.find(\n              (window) => window.type === \"informative\"\n            );\n            informativeWindow.props.custom.open(chapter);\n          }}\n        />\n      );\n    }\n\n    return (\n      <LayerItemContainer\n        sx={{ marginLeft: this.isBackgroundLayer ? \"0px\" : \"45px\" }}\n      >\n        <LayerItemWrapper>\n          <Grid\n            wrap=\"nowrap\"\n            alignItems=\"center\"\n            alignContent=\"center\"\n            container\n            onClick={this.toggleVisible.bind(this)}\n          >\n            <Grid item>{this.getLayerToggler()}</Grid>\n            {this.legendIcon && this.renderLegendIcon()}\n            <Caption>{this.caption}</Caption>\n          </Grid>\n          <LayerButtonsContainer>\n            {layer.isFakeMapLayer ? null : (\n              <DownloadLink\n                layer={this.props.layer}\n                enableDownloadLink={\n                  this.props.app.config.mapConfig.map.enableDownloadLink\n                }\n              />\n            )}\n            {this.renderStatusButton()}\n            {this.renderInfoButton()}\n\n            {this.showAttributeTableButton && (\n              <Tooltip title=\"Visa lagrets attributtabell\">\n                <LayerButtonWrapper>\n                  <TableViewIcon onClick={this.#showAttributeTable} />\n                </LayerButtonWrapper>\n              </Tooltip>\n            )}\n            {this.renderMoreButton()}\n          </LayerButtonsContainer>\n        </LayerItemWrapper>\n        <div>\n          {this.renderDetails()}\n          {this.state.toggleSettings &&\n          this.state.infoVisible &&\n          !this.isInfoEmpty() ? (\n            <hr />\n          ) : null}\n          {layer.isFakeMapLayer ? null : (\n            <LayerSettings\n              options={this.props.options}\n              layer={layer}\n              toggled={this.state.toggleSettings}\n              showOpacity={true}\n              showLegend={true}\n              cqlFilterVisible={cqlFilterVisible}\n            />\n          )}\n        </div>\n      </LayerItemContainer>\n    );\n  }\n}\n\nexport default withSnackbar(LayerItem);\n"],"names":["StyledAccordion","styled","Accordion","borderRadius","boxShadow","backgroundImage","StyledAccordionSummary","AccordionSummary","minHeight","padding","overflow","transition","marginTop","marginBottom","StyledAccordionDetails","AccordionDetails","width","display","SummaryContainer","theme","flexBasis","borderBottom","spacing","palette","divider","HeadingTypography","Typography","fontSize","typography","pxToRem","ExpandButtonWrapper","float","checkBoxIconStyle","cursor","marginRight","LayerGroup","React","constructor","props","super","state","expanded","groups","layers","name","parent","toggled","chapters","layerVisibilityChanged","e","this","forceUpdate","getAllLayersInGroupAndSubGroups","reduce","group","hasSubGroups","getAllMapLayersReferencedByGroup","app","allLayersInGroup","getMap","getLayers","getArray","filter","mapLayer","find","layer","id","get","bindVisibleChangeForLayersInGroup","forEach","on","unbindVisibleChangeForLayersInGroup","un","handleChange","panel","event","setState","toggleExpanded","layerInMap","foundMapLayer","getVisible","areSubGroupsAndLayersSemiToggled","someSubItemToggled","hasLayers","some","g","areAllGroupsAndSubGroupsToggled","allGroupsToggled","allLayersToggled","every","length","getCheckbox","isToggled","sx","isSemiToggled","color","model","componentDidMount","componentWillUnmount","renderLayerGroups","map","i","child","options","toggleGroups","visibility","groupsArray","Array","isArray","toggleLayers","hasOwnProperty","getAllLayers","observer","publish","setVisible","renderToggleAll","onClick","preventDefault","stopPropagation","render","marginLeft","TransitionProps","timeout","onChange","layerMap","onOpenChapter","chapter","windows","window","type","custom","open","defaultProps","LayerItemContainer","paddingLeft","LayerItemWrapper","justifyContent","LayerTogglerButtonWrapper","alignItems","InfoTextContainer","margin","Caption","LegendIcon","height","LayerButtonsContainer","LayerButtonWrapper","StyledList","listStyle","LayerItem","zoomEndHandler","zoom","olMap","getView","getZoom","lprops","getProperties","layerIsZoomVisible","minZoom","maxZoom","showSnack","minMaxZoomAlertOnToggleOnly","visible","zoomVisible","showZoomSnack","toggleVisible","isBackgroundLayer","document","getElementById","style","backgroundColor","isFakeMapLayer","localObserver","triggerZoomCheck","renderInfoButton","isInfoEmpty","title","infoVisible","toggleInfo","renderMoreButton","toggleSettings","openInformative","getLayerToggler","icon","fill","warning","dark","async","url","getSource","replace","LAYERS","getParams","glue","includes","getFeatureUrl","describeFeatureTypeUrl","r1","fetch","features","json","r2","columns","featureTypes","f","typeName","properties","c","toLowerCase","field","headerName","localType","flex","rows","r","globalObserver","caption","content","error","console","log","enqueueSnackbar","variant","layerInfo","layerType","legend","legendIcon","infoTitle","infoText","infoUrl","infoUrlText","infoOwner","showAttributeTableButton","usesMinMaxZoom","layerUsesMinMaxZoom","status","subscribe","activeLayer","oldValue","listenToZoomChange","d","maxZ","minZ","Infinity","bListen","eventName","zoomEndListener","unsubscribe","zoomWarningSnack","layersInfo","undefined","Object","keys","preventDuplicate","onClose","closeSnackbar","renderStatusButton","disableInteractive","renderLegendImage","src","alt","chaptersWithLayer","findChapters","infoCaption","result","layerId","renderChapterLinks","size","header","toggle","renderInfo","dangerouslySetInnerHTML","__html","renderMetadataLink","href","target","rel","renderOwner","renderDetails","renderLegendIcon","cqlFilterVisible","config","mapConfig","appConfig","wrap","alignContent","container","bind","item","enableDownloadLink","showOpacity","showLegend","withSnackbar"],"sourceRoot":""}
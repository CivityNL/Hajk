{"version":3,"file":"static/js/768.06d51f8e.chunk.js","mappings":"oNAKA,MAAMA,GAAiBC,EAAAA,EAAAA,IAAO,MAAPA,EAAc,MACnCC,QAAS,OACTC,SAAU,WAGNC,GAAaH,EAAAA,EAAAA,IAAOI,EAAAA,EAAPJ,EAAa,MAC9BK,YAAa,MA2Ef,UAxEyBC,IACvB,MAAM,UAAEC,EAAF,MAAaC,EAAb,SAAoBC,GAAaH,EAsBvC,SAASI,EAAiBC,GAMxB,OAJsBJ,EAAUK,YAAYC,MAAMC,GACzCA,EAAOH,QAAUA,IAGLI,OACtB,CAED,OACE,SAAC,KAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,CAAEC,QAAS,GAA5C,UACE,UAAC,IAAD,CAAaC,KAAK,QAAQC,WAAS,EAACC,UAAWhB,EAAUiB,SAAzD,WACE,SAAC,IAAD,CAAYC,QAAQ,WAAWC,GAAE,4BAAuBlB,GAAxD,SACGD,EAAUoB,eAEb,SAAC,IAAD,CACEC,UAAQ,EACRjB,MAlCDJ,EAAUI,MAKRJ,EAAUK,YAAYiB,QAAO,CAACC,EAAKC,KAGpCxB,EAAUI,MAAMqB,SAASD,EAAKpB,QAChCmB,EAAIG,KAAKF,EAAKpB,OAETmB,IACN,IAXMvB,EAAU2B,aAkCbzB,SAAW0B,GAAU1B,EAAS0B,EAAMC,OAAOzB,MAAOH,GAClD6B,OACE,SAAC,IAAD,CACEC,QAAO,4BAAuB9B,GAC9B+B,MAAOhC,EAAUoB,YACjBF,QAAQ,aAGZe,YAAcC,IACZ,SAAC1C,EAAD,UACG0C,EAASC,KAAI,CAAC/B,EAAOH,KACpB,SAACL,EAAD,CAEEoC,MAAO7B,EAAiBC,GACxBU,KAAK,SAFAb,OAff,SAuBGD,EAAUK,YAAY8B,KAAI,CAAC5B,EAAQN,KAClC,SAAC,IAAD,CAAsBG,MAAOG,EAAOH,MAApC,SACGG,EAAOC,SADKP,WA9BzB,C","sources":["plugins/FmeServer/components/ListBoxSelector.js"],"sourcesContent":["import React from \"react\";\nimport { FormControl, InputLabel } from \"@mui/material\";\nimport { Grid, Select, Chip, MenuItem } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nconst ChipsContainer = styled(\"div\")(() => ({\n  display: \"flex\",\n  flexWrap: \"wrap\",\n}));\n\nconst StyledChip = styled(Chip)(() => ({\n  marginRight: 2,\n}));\n\nconst ListBoxSelector = (props) => {\n  const { parameter, index, onChange } = props;\n\n  // Returns an array of items currently selected\n  function getSelectedItems() {\n    // If the user hasn't chosen yet, we return the default value\n    if (!parameter.value) {\n      return parameter.defaultValue;\n    }\n    // Otherwise we get the chosen listOption-values\n    // (We dont want the full objects, only the value).\n    return parameter.listOptions.reduce((acc, next) => {\n      // So if the value is in the selected values\n      // we push it to the return array.\n      if (parameter.value.includes(next.value)) {\n        acc.push(next.value);\n      }\n      return acc;\n    }, []);\n  }\n\n  // Finds the option connected to the supplied value and returns it's\n  // corresponding caption.\n  function getOptionCaption(value) {\n    // Let's start by grabbing the option\n    const currentOption = parameter.listOptions.find((option) => {\n      return option.value === value;\n    });\n    // And then return the caption.\n    return currentOption.caption;\n  }\n\n  return (\n    <Grid container item xs={12} sx={{ padding: 1 }}>\n      <FormControl size=\"small\" fullWidth required={!parameter.optional}>\n        <InputLabel variant=\"outlined\" id={`fme-listbox-label-${index}`}>\n          {parameter.description}\n        </InputLabel>\n        <Select\n          multiple\n          value={getSelectedItems()}\n          onChange={(event) => onChange(event.target.value, index)}\n          input={\n            <Select\n              labelId={`fme-listbox-label-${index}`}\n              label={parameter.description}\n              variant=\"outlined\"\n            />\n          }\n          renderValue={(selected) => (\n            <ChipsContainer>\n              {selected.map((value, index) => (\n                <StyledChip\n                  key={index}\n                  label={getOptionCaption(value)}\n                  size=\"small\"\n                />\n              ))}\n            </ChipsContainer>\n          )}\n        >\n          {parameter.listOptions.map((option, index) => (\n            <MenuItem key={index} value={option.value}>\n              {option.caption}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Grid>\n  );\n};\n\nexport default ListBoxSelector;\n"],"names":["ChipsContainer","styled","display","flexWrap","StyledChip","Chip","marginRight","props","parameter","index","onChange","getOptionCaption","value","listOptions","find","option","caption","container","item","xs","sx","padding","size","fullWidth","required","optional","variant","id","description","multiple","reduce","acc","next","includes","push","defaultValue","event","target","input","labelId","label","renderValue","selected","map"],"sourceRoot":""}
{"version":3,"file":"static/js/4863.8c13da7e.chunk.js","mappings":"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","sources":["plugins/FmeServer/FmeServerView.js","plugins/FmeServer/components/DrawToolbox.js","plugins/FmeServer/components/InformationWrapper.js","plugins/FmeServer/components/ListBoxSelector.js","plugins/FmeServer/components/OrderPanel.js","plugins/FmeServer/components/ProductParameters.js","plugins/FmeServer/constants/index.js","plugins/FmeServer/hooks/useInterval.js","plugins/FmeServer/hooks/useProductParameters.js"],"sourcesContent":["import React from \"react\";\nimport { Button, Grid, TextField, Typography } from \"@mui/material\";\nimport { Select, FormControl, InputLabel, MenuItem } from \"@mui/material\";\nimport {\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  IconButton,\n  InputAdornment,\n  Tooltip,\n} from \"@mui/material\";\nimport HelpIcon from \"@mui/icons-material/Help\";\n\nimport { LinearProgress } from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\n\nimport InformationWrapper from \"./components/InformationWrapper\";\nimport DrawToolbox from \"./components/DrawToolbox\";\nimport OrderPanel from \"./components/OrderPanel\";\nimport ProductParameters from \"./components/ProductParameters\";\nimport useProductParameters from \"./hooks/useProductParameters\";\nimport useInterval from \"./hooks/useInterval\";\n\n// We're gonna be checking the job status against arrays of FME-status\n// messages (all of witch means that the job has completed in some way).\nimport { FME_FAIL_MESSAGES, FME_SUCCESS_MESSAGES } from \"./constants\";\n\n// We're gonna be polling data from FME-server with an interval.\n// This constant sets how often we are polling. (In ms).\nimport { POLLING_INTERVAL } from \"./constants\";\n\nconst FmeServerView = (props) => {\n  // We're gonna be needing the localObserver.\n  const { localObserver } = props;\n  // We're also gonna be needing the model\n  const { model } = props;\n  // The user might want to decorate the \"group\" label with something\n  // else. Let's grab the potential value from the plugin-options.\n  const groupDisplayName = props.options.groupDisplayName || \"Grupp\";\n  // We're gonna need some state, e.g. which step are we on,\n  // or which product-group the user has selected and so on.\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [activeGroup, setActiveGroup] = React.useState(\"\");\n  const [activeProduct, setActiveProduct] = React.useState(\"\");\n  const [activeDrawButton, setActiveDrawButton] = React.useState(\"\");\n  const [featureExists, setFeatureExists] = React.useState(false);\n  const [geometryRequired, setGeometryRequired] = React.useState(false);\n  const [totalAllowedArea, setTotalAllowedArea] = React.useState(0);\n  const [totalDrawnArea, setTotalDrawnArea] = React.useState(0);\n  const [drawError, setDrawError] = React.useState(false);\n  const [userEmail, setUserEmail] = React.useState(model.getActiveUserEmail());\n  const [orderStatus, setOrderStatus] = React.useState(\"NONE\");\n  const [pollError, setPollError] = React.useState(false);\n  const [jobId, setJobId] = React.useState(null);\n\n  // We're gonna be showing some snacks to the user, lets destruct the\n  // enqueueSnackbar function so that we can do that.\n  const { enqueueSnackbar } = useSnackbar();\n\n  // We must keep track of if we should be polling data from FME-server.\n  const shouldPollData = getShouldPollData();\n\n  // We must also keep track of if a order is loading or not.\n  const orderIsLoading = getOrderIsLoading();\n\n  // We want to keep track of wether the order is completed or not.\n  const orderIsCompleted = getOrderIsCompleted();\n\n  // We're gonna use a custom hook to fetch the product parameters when\n  // the user changes group and/or product. We're also supplying a function\n  // that can be used to set the parameters (so that the user can change\n  // the value before they send the submit request).\n  const {\n    error: parametersError,\n    loading: parametersLoading,\n    parameters: productParameters,\n    setProductParameters,\n  } = useProductParameters(activeGroup, activeProduct, model);\n\n  // Let's create an object with all the steps to be rendered. This\n  // will allow us to add another step in a simple manner.\n  const steps = [\n    {\n      label: `Välj ${groupDisplayName.toLowerCase()}`,\n      renderFunction: renderChooseGroupStep,\n      renderValueFunction: () => {\n        return renderSelectedValue(activeGroup);\n      },\n    },\n    {\n      label: \"Välj produkt\",\n      renderFunction: renderChooseProductStep,\n      renderValueFunction: () => {\n        return renderSelectedValue(activeProduct);\n      },\n    },\n    {\n      label: \"Välj omfattning\",\n      renderFunction: renderDrawGeometryStep,\n    },\n    {\n      label: \"Fyll i parametrar\",\n      renderFunction: renderEnterParametersStep,\n    },\n    {\n      label: \"Beställ\",\n      renderFunction: renderOrderStep,\n    },\n  ];\n\n  // We are using a custom hook to poll data. If we are polling (determined\n  // by shouldPollData, we poll information about a job every POLLING_INTERVAL\n  // milliseconds).\n  useInterval(\n    async () => {\n      const { error, status } = await model.getJobStatusById(jobId);\n      if (error) {\n        return setPollError(true);\n      }\n      setOrderStatus(status);\n    },\n    shouldPollData ? POLLING_INTERVAL : null\n  );\n\n  // Memoized to prevent useless re-rendering\n  const handleFeatureAdded = React.useCallback(\n    (drawInformation) => {\n      // Let's get the product information from the activeGroup and activeProduct\n      // (which are strings, and does not contain information about the product).\n      const product = model.getProduct(activeGroup, activeProduct);\n      // Let's destruct the totalArea property\n      const { totalArea } = drawInformation;\n      // We've got an error if an error is returned in the drawInformation or if\n      // the drawn area is bigger than what the product allows. (If the product\n      // maxArea is set to -1 (or if it is missing), there is no area limitation).\n      const error =\n        drawInformation.error ||\n        (product.maxArea &&\n          product.maxArea !== -1 &&\n          drawInformation.totalArea > product.maxArea)\n          ? true\n          : false;\n      // After we've checked for errors we can set some state.\n      setFeatureExists(drawInformation.features.length === 0 ? false : true);\n      setDrawError(error);\n      setTotalDrawnArea(totalArea);\n      setTotalAllowedArea(product.maxArea);\n    },\n    [activeGroup, activeProduct, model]\n  );\n\n  // We have to make sure to reset the drawing, this function\n  // makes sure to reset all state connected to that.\n  // Memoized to prevent useless re-rendering.\n  const handleResetDraw = React.useCallback(() => {\n    localObserver.publish(\"map.resetDrawing\");\n    setActiveDrawButton(\"\");\n    setFeatureExists(false);\n    setTotalDrawnArea(0);\n    setDrawError(false);\n  }, [localObserver]);\n\n  // In this effect we make sure to subscribe to all events emitted by\n  // the mapViewModel and fmeServerModel.\n  React.useEffect(() => {\n    localObserver.subscribe(\"map.featureAdded\", handleFeatureAdded);\n    localObserver.subscribe(\"view.toggleDrawMethod\", () => {\n      setActiveDrawButton(\"\");\n    });\n    localObserver.subscribe(\"map.maxFeaturesExceeded\", () => {\n      enqueueSnackbar(\n        \"Denna arbetsytan tillåter enbart en geometri. Den tidigare ritade geometrin togs bort.\",\n        {\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\",\n          },\n          variant: \"warning\",\n        }\n      );\n    });\n    return () => {\n      // We must make sure to unsubscribe on unmount.\n      localObserver.unsubscribe(\"map.featureAdded\");\n      localObserver.unsubscribe(\"view.toggleDrawMethod\");\n      localObserver.unsubscribe(\"map.maxFeaturesExceeded\");\n    };\n  }, [localObserver, handleFeatureAdded, enqueueSnackbar]);\n\n  // This effects makes sure to check wether the currently selected\n  // product requires a geometry or not, and updates state accordingly.\n  // It also makes sure to publish an event so that the mapViewModel knows\n  // which product is currently active.\n  React.useEffect(() => {\n    // Let's get the product information from the activeGroup and activeProduct\n    // (which are strings, and does not contain information about the product).\n    const product = model.getProduct(activeGroup, activeProduct);\n    // If no product is returned, or if the geoAttribute is missing (or set to none)\n    // no geometry is required.\n    if (model.noGeomAttributeSupplied(product)) {\n      return setGeometryRequired(false);\n    }\n    // Otherwise it is.\n    setGeometryRequired(true);\n    // Make sure to publish an event on the observer so that the mapViewModel\n    // knows which product is currently active.\n    localObserver.publish(\"view.activeProductChange\", product);\n  }, [activeGroup, activeProduct, localObserver, model]);\n\n  // This effect makes sure that we clear the map when the activeProduct\n  // changes. We don't want to keep geometries between products, that\n  // might lead to weird effects.\n  React.useEffect(() => {\n    handleResetDraw();\n  }, [activeProduct, handleResetDraw]);\n\n  // This effect makes sure that we clear the active product when\n  // the activeGroup changes.\n  React.useEffect(() => {\n    setActiveProduct(\"\");\n  }, [activeGroup]);\n\n  // If the user reaches the last step, they will be able to reset\n  // the stepper. If they do, there will be some cleanup done.\n  function handleResetStepper() {\n    setActiveStep(0);\n    setActiveGroup(\"\");\n    setActiveProduct(\"\");\n    resetOrderInformation();\n    handleResetDraw();\n  }\n\n  // If the user chooses to reset the stepper, we must make sure\n  // to reset the information about the (eventual) earlier order.\n  function resetOrderInformation() {\n    setJobId(null);\n    setOrderStatus(\"NONE\");\n    setPollError(null);\n  }\n\n  // Checks wether we should be polling information about a submitted\n  // job or not.\n  function getShouldPollData() {\n    // If we've encountered an error while polling data, we're stopping.\n    if (pollError) {\n      return false;\n    }\n    // If we have no jobId, it means that we haven't made any product\n    // requests yet. (And we should not poll data obviously).\n    if (jobId === null) {\n      return false;\n    }\n    // If the order status is any of the \"done\" (any fail or success status),\n    // statuses we should not poll any more.\n    const doneStatuses = [...FME_FAIL_MESSAGES, ...FME_SUCCESS_MESSAGES];\n    if (doneStatuses.includes(orderStatus)) {\n      return false;\n    }\n    // Otherwise, we are going to poll data!\n    return true;\n  }\n\n  // Helper function to determine if the order is loading or not.\n  // (we are loading if we are about to poll data, or if we are\n  // currently polling data).\n  function getOrderIsLoading() {\n    // If shouldPollData is true, we are currently polling data.\n    // If the orderStatus is set to ORDER_REQUEST_SENT, we are about to poll data.\n    return shouldPollData || orderStatus === \"ORDER_REQUEST_SENT\";\n  }\n\n  // Helper function to determine if the order is completed.\n  function getOrderIsCompleted() {\n    // If no jobId is set, the order cannot be done.\n    if (jobId === null) {\n      return false;\n    }\n    // If the order is loading, we are not done...\n    if (orderIsLoading) {\n      return false;\n    }\n    // Otherwise, the order should be completed.\n    return true;\n  }\n\n  function handleDrawButtonClick(buttonType) {\n    // The reset button should not be toggled (even if it is a toggle-button...)\n    // We should only reset the draw state and move on.\n    if (buttonType === \"Reset\") {\n      return handleResetDraw();\n    }\n    // If the user clicks the button that is currently active, we must set\n    // that button inactive again.\n    if (activeDrawButton === buttonType) {\n      localObserver.publish(\"map.toggleDrawMethod\", \"\");\n      return setActiveDrawButton(\"\");\n    }\n    // Otherwise, we set the button active!\n    localObserver.publish(\"map.toggleDrawMethod\", buttonType);\n    return setActiveDrawButton(buttonType);\n  }\n\n  // Returns an array of products, where each product belongs\n  // to the currently active group.\n  function getProductsInActiveGroup() {\n    // If we have no active group, we should return an empty array.\n    if (activeGroup === \"\") {\n      return [];\n    }\n    // Let's get the products from the config.\n    const products = props.options?.products ?? [];\n    // And get the products that belong to the current group.\n    const filteredProducts = products.filter((product) => {\n      return product.group === activeGroup;\n    });\n    // Then we sort the products alphabetically\n    filteredProducts.sort((a, b) =>\n      a.name.localeCompare(b.name, undefined, { numeric: true })\n    );\n    // Return the sorted products\n    return filteredProducts;\n  }\n\n  // Returns wether it is OK to continue from the step where the\n  // user is providing values for the published parameters.\n  function getContinueFromParameterStep() {\n    // If the parameters are loading, or if we error:ed when fetching\n    // the parameters, we can't move on.\n    if (parametersLoading || parametersError) {\n      return false;\n    }\n    // If we have a required parameter (not optional), and that parameter is\n    // missing, we can't move on. So let's check if there is any parameter\n    // that is not optional, and empty.\n    const requiredParametersMissing = productParameters.some((parameter) => {\n      // If the parameter is optional, we return false.\n      if (parameter.optional) {\n        return false;\n      }\n      // Otherwise, we must make sure that the parameter either got the value\n      // parameter set, or that it has a default value set.\n      const parameterGotSomeValue =\n        parameterValueSet(parameter) || parameterDefaultValueSet(parameter);\n      // And we should return the inverse of parameterGotSomeValue since we're checking\n      // if a required parameter is missing!\n      return !parameterGotSomeValue;\n    });\n    // Let's return the inverse of required..., since this function returns wether\n    // it's OK to continue or not.\n    return !requiredParametersMissing;\n  }\n\n  // Checks that the parameter value is not missing or is an empty string\n  function parameterValueSet(parameter) {\n    if (!parameter.value || parameter.value.length === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  // Checks that the parameter default value is not missing or is an empty string\n  function parameterDefaultValueSet(parameter) {\n    if (!parameter.defaultValue || parameter.defaultValue.length === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  // Returns wether it is OK to continue from the step where the\n  // user is making an order.\n  function getContinueFromOrderStep(shouldPromptForEmail) {\n    // If the order is currently loading, we cannot continue.\n    if (orderIsLoading) {\n      return false;\n    }\n    // If no email is to be supplied, the user can go right ahead and order.\n    if (!shouldPromptForEmail) {\n      return true;\n    }\n    // Otherwise, we just make sure that the supplied string is a valid\n    // email.\n    return model.isValidEmail(userEmail);\n  }\n\n  // A function to render the stepper-buttons (next, back reset).\n  // Used to limit code rewrite.\n  // Accepts: An array of objects on {type: string, disabled: bool} form.\n  function renderStepperButtons(buttons) {\n    return (\n      <Grid container item justifyContent=\"flex-end\">\n        {buttons.map((button, index) => {\n          return (\n            <Button\n              key={index}\n              sx={{ marginTop: 1, marginLeft: 1 }}\n              disabled={button.disabled}\n              variant=\"contained\"\n              onClick={() => handleStepperButtonClick(button.type)}\n            >\n              {button.type === \"back\"\n                ? \"Tillbaka\"\n                : button.type === \"next\"\n                ? \"Nästa\"\n                : button.type === \"order\"\n                ? \"Beställ!\"\n                : \"Börja om!\"}\n            </Button>\n          );\n        })}\n      </Grid>\n    );\n  }\n\n  // Handles back, next, order, and reset clicks.\n  function handleStepperButtonClick(type) {\n    // We always want to make sure that we are turning the draw-method off.\n    if (activeDrawButton !== \"\") {\n      setActiveDrawButton(\"\");\n      localObserver.publish(\"map.toggleDrawMethod\", \"\");\n    }\n    // Then we'll check what type of button that was pressed,\n    // and handle that accordingly.\n    switch (type) {\n      // Going back? Let's decrement by one.\n      case \"back\":\n        // We always want to reset the current order information if we\n        // are going back! (We might be going back from the last step,\n        // where the order has already been placed. We want to clear eventual\n        // errors etc, if the user want's to try to order again).\n        resetOrderInformation();\n        return setActiveStep(activeStep - 1);\n      // Going forward? Let's increment by one.\n      case \"next\":\n        return setActiveStep(activeStep + 1);\n      // Making an order? Let's handle that.\n      case \"order\":\n        return handleProductOrder();\n      // If none of the above matched, we're probably resetting.\n      default:\n        return handleResetStepper();\n    }\n  }\n\n  // Handles when user presses the order button. The makeOrder method\n  // will return an object containing two properties => error and jobId.\n  // The jobId can be used to fetch information about the order request.\n  // (When making an order, we're queuing a job on FME-server, and we cannot know\n  // when that will finish. Which means we cannot wait for the job to complete).\n  async function handleProductOrder() {\n    // Let's make sure to reset the jobId and set that we are now loading.\n    setJobId(null);\n    setOrderStatus(\"ORDER_REQUEST_SENT\");\n    // Let's await the order request\n    const result = await model.makeOrder(\n      activeGroup,\n      activeProduct,\n      productParameters,\n      userEmail\n    );\n    // And then we update the state accordingly.\n    setJobId(result.jobId);\n    setOrderStatus(result.error ? \"ORDER_REQUEST_FAILED\" : \"POLLING\");\n  }\n\n  // Renders the product parameters fetched by the useProductParameters hook.\n  function renderProductParameters() {\n    // If an error was returned when fetching the parameters, let's render\n    // some error text.\n    if (parametersError) {\n      return (\n        <InformationWrapper type=\"error\">\n          <Typography>\n            Produktens parametrar kunde inte hämtas. Kontakta\n            systemadministratören.\n          </Typography>\n        </InformationWrapper>\n      );\n    }\n    // If we're still loading the parameters, let's display some\n    // loading-bar\n    if (parametersLoading) {\n      return (\n        <Grid container>\n          <Grid item xs={12}>\n            <Typography>Försöker hämta parametrar...</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        </Grid>\n      );\n    }\n    // If we're not loading, and we're not error:ing, let's render the\n    // parameters! First we need to get all parameters intended to be\n    // rendered. (Every parameter except the one containing the geometry).\n    const parametersToRender = model.getParametersToRender(\n      productParameters,\n      activeGroup,\n      activeProduct\n    );\n    // Then we'll check and get the eventual information-url, which will provide\n    // the users with some information regarding the product.\n    const infoUrl = model.getInfoUrl(activeGroup, activeProduct);\n\n    // Then we'll render the parameters and the eventual information-url.\n    return (\n      <ProductParameters\n        parameters={parametersToRender}\n        model={model}\n        setProductParameters={setProductParameters}\n        infoUrl={infoUrl}\n      />\n    );\n  }\n\n  // Renders a toolbox that the user can use to draw the geometries needed\n  // to submit the order. It also renders information about potential errors.\n  function renderGeometryHandler() {\n    return (\n      <Grid container item xs={12}>\n        <Grid item xs={12}>\n          <Typography variant=\"caption\">\n            Välj ritverktyg nedan för att rita beställningens omfattning.\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <DrawToolbox\n            activeDrawButton={activeDrawButton}\n            handleDrawButtonClick={handleDrawButtonClick}\n          />\n        </Grid>\n        {drawError && (\n          <Grid item xs={12} sx={{ marginTop: 1 }}>\n            <InformationWrapper type=\"error\">\n              <Typography variant=\"caption\">\n                {`Het getekende gebied is te groot. Verwijder deze en probeer \n                   opnieuw om door te gaan met de bestelling! Het getekende \n                   oppervlak is ${totalDrawnArea.toLocaleString()} m², \n                   en de maximaal toegestane oppervlakte is\n                   ${totalAllowedArea.toLocaleString()} m²`}\n              </Typography>\n            </InformationWrapper>\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n\n  // Renders an informational message if the user does not need to draw\n  // a geometry to move in with the product submit request.\n  function renderNoGeometryNeededMessage() {\n    return (\n      <Grid container item xs={12}>\n        <InformationWrapper>\n          <Typography>\n            Denna produkt kräver ingen geometri! Du kan fortsätta till nästa\n            steg.\n          </Typography>\n        </InformationWrapper>\n      </Grid>\n    );\n  }\n\n  // Returns an array of stepper-buttons. Used in the order-step.\n  // We use this helper since the buttons in the order step will\n  // change when an order has been completed.\n  function getActiveStepperButtons(shouldPromptForEmail) {\n    return orderIsCompleted\n      ? [{ type: \"reset\", disabled: false }]\n      : [\n          { type: \"back\", disabled: orderIsLoading },\n          {\n            type: \"order\",\n            disabled: !getContinueFromOrderStep(shouldPromptForEmail),\n          },\n        ];\n  }\n\n  // Renders an error message, showing the user that the plugin is\n  // wrongly configured. We use this approach so that the entire\n  // application does not crash if someone has been messing with the\n  // configuration-files directly (not using the admin-ui).\n  function renderPluginNotConfiguredMessage() {\n    return (\n      <Grid item xs={12}>\n        <InformationWrapper type=\"error\">\n          <Typography>\n            Verktyget är felkonfigurerat, kontakta systemadministratören.\n          </Typography>\n        </InformationWrapper>\n      </Grid>\n    );\n  }\n\n  function renderSelectedValue(value) {\n    if (!value) return;\n\n    // Renders the selected value under the steps title\n    // Is currently only used for group and product.\n    return (\n      <div style={{ position: \"relative\", fontWeight: \"normal\", height: \"0\" }}>\n        {value}\n      </div>\n    );\n  }\n\n  // Renders the content for the step where the user can select\n  // which group they want to get their products from. If no group is selected,\n  // the user cannot continue to the next step.\n  function renderChooseGroupStep() {\n    // We want to make sure that there are some groups available, and if there are,\n    // we want to render them in alphabetical order.\n    const groupsToRender =\n      props.options?.productGroups?.length > 0\n        ? props.options.productGroups.sort()\n        : [];\n\n    // If only one group is available from config, select it automatically\n    // and proceed to the next step.\n    if (groupsToRender.length === 1 && activeGroup === \"\") {\n      setActiveGroup(groupsToRender[0]);\n      setActiveStep(activeStep + 1);\n    }\n\n    return (\n      <Grid container item xs={12}>\n        {groupsToRender.length > 0 ? (\n          <Grid item xs={12}>\n            <FormControl fullWidth>\n              <InputLabel size=\"small\" id=\"fme-server-select-group-label\">\n                {groupDisplayName}\n              </InputLabel>\n              <Select\n                labelId=\"fme-server-select-group-label\"\n                id=\"fme-server-select-group\"\n                value={activeGroup}\n                size=\"small\"\n                label={groupDisplayName}\n                onChange={(e) => setActiveGroup(e.target.value)}\n              >\n                {groupsToRender.map((group, index) => {\n                  return (\n                    <MenuItem value={group} key={index}>\n                      {group}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n        ) : (\n          renderPluginNotConfiguredMessage()\n        )}\n\n        {\n          // Since this is the first step, we only need a \"next\" button. We can't\n          // go back to step -1.\n          renderStepperButtons([{ type: \"next\", disabled: activeGroup === \"\" }])\n        }\n      </Grid>\n    );\n  }\n\n  // Renders the content for the step where the user can select\n  // which product they want to run.\n  function renderChooseProductStep() {\n    // We only want to render the products that belong to the active group,\n    // so letch get those.\n    const productsInActiveGroup = getProductsInActiveGroup();\n    // We might want to display an icon which refers the user to the product\n    // information page. However, it's not certain that a valid url exists for\n    // the product, and if it doesn't we're not supposed to render the icon.\n    // Let's grab the potential url:\n    const product = model.getProduct(activeGroup, activeProduct);\n    const infoUrl = product?.infoUrl || \"\";\n    // Then we render!\n    return (\n      <Grid container item xs={12}>\n        {productsInActiveGroup.length > 0 ? (\n          <Grid item xs={12}>\n            <FormControl fullWidth>\n              <TextField\n                select\n                id=\"fme-server-select-product\"\n                value={activeProduct}\n                size=\"small\"\n                label=\"Produkt\"\n                onChange={(e) => setActiveProduct(e.target.value)}\n                InputProps={\n                  infoUrl.length > 0\n                    ? {\n                        startAdornment: (\n                          <Tooltip title=\"Öppna länk till produktinformation.\">\n                            <InputAdornment position=\"start\">\n                              <IconButton\n                                aria-label=\"Open information page\"\n                                href={infoUrl}\n                                target=\"_blank\"\n                                edge=\"start\"\n                              >\n                                <HelpIcon />\n                              </IconButton>\n                            </InputAdornment>\n                          </Tooltip>\n                        ),\n                      }\n                    : null\n                }\n              >\n                {productsInActiveGroup.map((product, index) => {\n                  return (\n                    <MenuItem value={product.name} key={index}>\n                      {product.name}\n                    </MenuItem>\n                  );\n                })}\n              </TextField>\n            </FormControl>\n          </Grid>\n        ) : (\n          renderPluginNotConfiguredMessage()\n        )}\n\n        {\n          // In this step we need both a \"back\" and a \"next\" button, since the\n          // user might want to change the selected group along the way\n          renderStepperButtons([\n            { type: \"back\", disabled: false },\n            { type: \"next\", disabled: activeProduct === \"\" },\n          ])\n        }\n      </Grid>\n    );\n  }\n\n  // Renders the content for the step where the user can draw the area\n  // for which the ordered product perform calculations. (Note! If no\n  // geometry is required for the chosen product, only an informational\n  // message is shown instead.)\n  function renderDrawGeometryStep() {\n    return (\n      <Grid container item xs={12}>\n        {geometryRequired\n          ? renderGeometryHandler()\n          : renderNoGeometryNeededMessage()}\n        {\n          // If the drawing is not completed, or if the drawing contains an error,\n          // we won't let the user continue on. (This only applies if geometryRequired is\n          // true obviously).\n          renderStepperButtons([\n            { type: \"back\", disabled: false },\n            {\n              type: \"next\",\n              disabled: geometryRequired && (!featureExists || drawError),\n            },\n          ])\n        }\n      </Grid>\n    );\n  }\n\n  // Renders the content for the step where the user can enter values\n  // for the published parameters.\n  function renderEnterParametersStep() {\n    return (\n      <Grid container item xs={12}>\n        <Grid item xs={12}>\n          {renderProductParameters()}\n        </Grid>\n        {renderStepperButtons([\n          { type: \"back\", disabled: false },\n          { type: \"next\", disabled: !getContinueFromParameterStep() },\n        ])}\n      </Grid>\n    );\n  }\n\n  // Renders the content for the step where the user can submit their order.\n  // The <OrderPanel /> will display potential errors that might occur when\n  // an order has been submitted.\n  function renderOrderStep() {\n    const shouldPromptForEmail = model.shouldPromptForEmail(\n      activeGroup,\n      activeProduct\n    );\n    return (\n      <Grid container item xs={12}>\n        <OrderPanel\n          shouldPromptForEmail={shouldPromptForEmail}\n          userEmail={userEmail}\n          setUserEmail={setUserEmail}\n          jobId={jobId}\n          pollError={pollError}\n          orderStatus={orderStatus}\n          orderIsLoading={orderIsLoading}\n          orderIsCompleted={orderIsCompleted}\n        />\n        {renderStepperButtons(getActiveStepperButtons(shouldPromptForEmail))}\n      </Grid>\n    );\n  }\n\n  return (\n    <Stepper activeStep={activeStep} orientation=\"vertical\" sx={{ padding: 1 }}>\n      {steps.map((step, index) => {\n        return (\n          <Step key={index}>\n            <StepLabel>\n              {step.label}\n              {activeStep !== index && step.renderValueFunction\n                ? step.renderValueFunction()\n                : null}\n            </StepLabel>\n            <StepContent>{step.renderFunction()}</StepContent>\n          </Step>\n        );\n      })}\n    </Stepper>\n  );\n};\n\nexport default FmeServerView;\n","import React from \"react\";\nimport { Grid, Paper } from \"@mui/material\";\nimport { Tooltip } from \"@mui/material\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport Crop54Icon from \"@mui/icons-material/Crop54\";\nimport RadioButtonUncheckedIcon from \"@mui/icons-material/RadioButtonUnchecked\";\nimport TouchAppIcon from \"@mui/icons-material/TouchApp\";\nimport RotateLeftIcon from \"@mui/icons-material/RotateLeft\";\n\nconst DrawToolbox = (props) => {\n  const drawButtons = [\n    {\n      type: \"Polygon\", // Open-layers does not like all caps!\n      tooltip:\n        \"Teken een gebied op de kaart door één keer per knooppunt te klikken, \" +\n        \"eindig met een dubbelklik.\",\n      icon: <EditIcon />,\n    },\n    {\n      type: \"Rectangle\",\n      tooltip: \"Teken een rechthoek op de kaart.\",\n      icon: <Crop54Icon />,\n    },\n    {\n      type: \"Circle\",\n      tooltip: \"Rita en cirkel i kartan.\",\n      icon: <RadioButtonUncheckedIcon />,\n    },\n    {\n      type: \"Select\",\n      tooltip: \"Kies uit bestaande objecten op de kaart.\",\n      icon: <TouchAppIcon />,\n    },\n    {\n      type: \"Reset\",\n      tooltip: \"Was u niet tevreden? Verwijder alle objecten van de kaart.\",\n      icon: <RotateLeftIcon />,\n    },\n  ];\n\n  function renderToggleButton(button, index) {\n    const { activeDrawButton, handleDrawButtonClick } = props;\n    return (\n      <Tooltip key={index} title={button.tooltip}>\n        <ToggleButton\n          selected={button.type === activeDrawButton}\n          onChange={() => handleDrawButtonClick(button.type)}\n          value={button.type}\n          sx={{ margin: 1 }}\n          aria-label={button.tooltip}\n        >\n          {button.icon}\n        </ToggleButton>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Paper sx={{ marginTop: 1 }}>\n      <Grid container>\n        <Grid container item xs={12} justifyContent=\"space-between\">\n          {drawButtons.map((button, index) => {\n            return renderToggleButton(button, index);\n          })}\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default DrawToolbox;\n","import React from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\n// The styling here is terrible, but since mui5 migration is around the\n// corner i cba to do this properly. (With mui5 this will be done in 5 lines instead).\nconst StyledGrid = styled(Grid)(({ type, theme }) => ({\n  background:\n    type === \"error\"\n      ? theme.palette.mode === \"dark\"\n        ? theme.palette.error.dark\n        : theme.palette.error.main\n      : type === \"warning\"\n      ? theme.palette.mode === \"dark\"\n        ? theme.palette.warning.dark\n        : theme.palette.warning.main\n      : theme.palette.mode === \"dark\"\n      ? theme.palette.info.dark\n      : theme.palette.info.main,\n  color: theme.palette.error.contrastText,\n  padding: theme.spacing(1),\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: theme.shadows[2],\n}));\n\n// Wraps the children inside a Grid container with some styling.\n// Supports \"error\", \"warning\", and \"info\". Default to \"info\".\nconst InformationWrapper = ({ children, type }) => {\n  return (\n    <StyledGrid container item xs={12} type={type}>\n      {children}\n    </StyledGrid>\n  );\n};\n\nexport default InformationWrapper;\n","import React from \"react\";\nimport { FormControl, InputLabel } from \"@mui/material\";\nimport { Grid, Select, Chip, MenuItem } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nconst ChipsContainer = styled(\"div\")(() => ({\n  display: \"flex\",\n  flexWrap: \"wrap\",\n}));\n\nconst StyledChip = styled(Chip)(() => ({\n  marginRight: 2,\n}));\n\nconst ListBoxSelector = (props) => {\n  const { parameter, index, onChange } = props;\n\n  // Returns an array of items currently selected\n  function getSelectedItems() {\n    // If the user hasn't chosen yet, we return the default value\n    if (!parameter.value) {\n      return parameter.defaultValue;\n    }\n    // Otherwise we get the chosen listOption-values\n    // (We dont want the full objects, only the value).\n    return parameter.listOptions.reduce((acc, next) => {\n      // So if the value is in the selected values\n      // we push it to the return array.\n      if (parameter.value.includes(next.value)) {\n        acc.push(next.value);\n      }\n      return acc;\n    }, []);\n  }\n\n  // Finds the option connected to the supplied value and returns it's\n  // corresponding caption.\n  function getOptionCaption(value) {\n    // Let's start by grabbing the option\n    const currentOption = parameter.listOptions.find((option) => {\n      return option.value === value;\n    });\n    // And then return the caption.\n    return currentOption.caption;\n  }\n\n  return (\n    <Grid container item xs={12} sx={{ padding: 1 }}>\n      <FormControl size=\"small\" fullWidth required={!parameter.optional}>\n        <InputLabel variant=\"outlined\" id={`fme-listbox-label-${index}`}>\n          {parameter.description}\n        </InputLabel>\n        <Select\n          multiple\n          value={getSelectedItems()}\n          onChange={(event) => onChange(event.target.value, index)}\n          input={\n            <Select\n              labelId={`fme-listbox-label-${index}`}\n              label={parameter.description}\n              variant=\"outlined\"\n            />\n          }\n          renderValue={(selected) => (\n            <ChipsContainer>\n              {selected.map((value, index) => (\n                <StyledChip\n                  key={index}\n                  label={getOptionCaption(value)}\n                  size=\"small\"\n                />\n              ))}\n            </ChipsContainer>\n          )}\n        >\n          {parameter.listOptions.map((option, index) => (\n            <MenuItem key={index} value={option.value}>\n              {option.caption}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Grid>\n  );\n};\n\nexport default ListBoxSelector;\n","import React from \"react\";\nimport { Grid, TextField, Typography } from \"@mui/material\";\nimport { LinearProgress } from \"@mui/material\";\nimport InformationWrapper from \"./InformationWrapper\";\n\n// We're gonna be checking the job status against this array of\n// FME-status messages (all of witch means the job failed).\nimport { FME_FAIL_MESSAGES } from \"../constants\";\n\nconst OrderPanel = (props) => {\n  // Let's destruct the props.\n  const { shouldPromptForEmail, userEmail, setUserEmail } = props;\n  const { orderIsLoading, orderIsCompleted, orderStatus } = props;\n\n  // We're gonna need some different information texts based on if the user\n  // is supposed to supply an email or not.\n  const informationText = shouldPromptForEmail\n    ? \"Beställningen är redo att skickas! Fyll i din epost och klicka sedan på beställ-knappen.\"\n    : \"Beställningen är redo att skickas! Klicka nedan för att skicka iväg den.\";\n\n  // Helper function to determine if a order has failed or not.\n  function getOrderFailed(orderStatus) {\n    // If the orderStatus is set to any of the known FME-fail messages,\n    // we return true.\n    return FME_FAIL_MESSAGES.includes(orderStatus);\n  }\n\n  // Renders information to the user when an order is completed.\n  function renderOrderCompletedInformation() {\n    const orderFailed = getOrderFailed(orderStatus);\n    return (\n      <InformationWrapper type={orderFailed ? \"error\" : \"info\"}>\n        <Typography>{`Din beställning är klar! ${\n          orderFailed\n            ? \"Tyvärr så kunde FME inte slutföra beställningen. Kontakta systemadministratören.\"\n            : \"Resultatet har skickats till din epost!\"\n        }`}</Typography>\n      </InformationWrapper>\n    );\n  }\n\n  // Renders information to the user when an order is loading.\n  function renderOrderLoadingInformation() {\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <Typography>Din beställning bearbetas...</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      </Grid>\n    );\n  }\n\n  // Renders information to the user before the order is sent.\n  function renderOrderNotSentInformation() {\n    return (\n      <Grid container item xs={12}>\n        <Grid item xs={12} sx={{ marginBottom: 1 }}>\n          <Typography>{informationText}</Typography>\n        </Grid>\n        {shouldPromptForEmail && renderEmailTextField()}\n      </Grid>\n    );\n  }\n\n  // Renders an input to the user where they can input their email.\n  function renderEmailTextField() {\n    return (\n      <Grid item xs={12}>\n        <TextField\n          id={`fme-user-email`}\n          size=\"small\"\n          label=\"Epost\"\n          onChange={(e) => setUserEmail(e.target.value)}\n          fullWidth\n          value={userEmail}\n        />\n      </Grid>\n    );\n  }\n\n  return (\n    <Grid container item xs={12}>\n      {orderIsLoading && renderOrderLoadingInformation()}\n      {orderIsCompleted && renderOrderCompletedInformation()}\n      {!orderIsLoading && !orderIsCompleted && renderOrderNotSentInformation()}\n    </Grid>\n  );\n};\n\nexport default OrderPanel;\n","import React from \"react\";\nimport { Grid, IconButton, TextField, Typography } from \"@mui/material\";\nimport { FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\nimport { Slider } from \"@mui/material\";\nimport HelpIcon from \"@mui/icons-material/Help\";\n\nimport InformationWrapper from \"./InformationWrapper\";\nimport ListBoxSelector from \"./ListBoxSelector\";\n\n// All parameters will be checked against an array of allowed\n// parameter types to make sure that the parameter type is supported in the renderer.\nimport { ALLOWED_FME_PARAMETERS } from \"../constants\";\n\nconst ProductParameters = (props) => {\n  // We're gonna need the model for some shared methods\n  const { model } = props;\n\n  // Checks wether all parameters can be rendered or not.\n  // A parameter cannot be rendered if the parameter type is not\n  // included in the allowedFmeTypes-array.\n  function allParametersCantBeRendered() {\n    return props.parameters.some((parameter) => {\n      return !ALLOWED_FME_PARAMETERS.includes(parameter.type);\n    });\n  }\n\n  // Checks wether there are no parameters to render or not.\n  function noParametersToRender() {\n    return props.parameters.length === 0;\n  }\n\n  // When the parameters change, we must make sure to\n  // set the updated value on the corresponding parameter.\n  function handleParameterChange(value, index) {\n    const { parameters } = props;\n    parameters[index].value = value;\n    props.setProductParameters(parameters);\n    return;\n  }\n\n  // Checks wether the infoUrl from props is valid\n  // (A string that is not empty).\n  function infoUrlIsValid() {\n    return props.infoUrl?.length > 0;\n  }\n\n  function renderParameterRenderingError() {\n    return (\n      <Grid item xs={12} sx={{ padding: 1 }}>\n        <InformationWrapper type=\"error\">\n          <Typography>\n            Observera att vissa publicerade parametrar inte kunde renderas! Det\n            är inte säkert att beställningen går att genomföra.\n          </Typography>\n        </InformationWrapper>\n      </Grid>\n    );\n  }\n\n  function renderInformationUrl() {\n    return (\n      <Grid container item xs={12} wrap=\"nowrap\" justifyContent=\"space-between\">\n        <Typography sx={{ alignSelf: \"center\", marginLeft: 1 }}>\n          Oklart hur produkten fungerar? Tryck på frågetecknet för mer\n          information.\n        </Typography>\n        <IconButton\n          aria-label=\"Hjälp\"\n          onClick={() => window.open(props.infoUrl, \"_blank\")}\n        >\n          <HelpIcon />\n        </IconButton>\n      </Grid>\n    );\n  }\n\n  function renderNoParametersToRenderError() {\n    return (\n      <Grid item xs={12} sx={{ padding: 1 }}>\n        <InformationWrapper type=\"info\">\n          <Typography>\n            Det finns inga publicerade parametrar att rendera! Du kan fortsätta\n            direkt till nästa steg!\n          </Typography>\n        </InformationWrapper>\n      </Grid>\n    );\n  }\n\n  function renderChoice(parameter, index) {\n    return (\n      <Grid key={`${parameter.type}-${index}`} item xs={12} sx={{ padding: 1 }}>\n        <FormControl fullWidth size=\"small\" required={!parameter.optional}>\n          <InputLabel\n            variant=\"outlined\"\n            id={`fme-lookup-choice-label-${index}`}\n          >\n            {parameter.description}\n          </InputLabel>\n          <Select\n            labelId={`fme-lookup-choice-label-${index}`}\n            id={`fme-lookup-choice-${index}`}\n            variant=\"outlined\"\n            value={parameter.value ?? parameter.defaultValue ?? \"\"}\n            label={parameter.description}\n            onChange={(e) => handleParameterChange(e.target.value, index)}\n          >\n            {parameter.listOptions.map((option, index) => {\n              return (\n                <MenuItem key={index} value={option.value}>\n                  {option.caption}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n      </Grid>\n    );\n  }\n\n  function renderListBox(parameter, index) {\n    return (\n      <ListBoxSelector\n        key={`${parameter.type}-${index}`}\n        parameter={parameter}\n        index={index}\n        onChange={handleParameterChange}\n      />\n    );\n  }\n\n  function renderRangeSlider(parameter, index) {\n    const { value, step } = model.getRangeSliderValueAndStep(parameter);\n    const sliderMin = model.getRangeSliderMinimum(parameter, step);\n    const sliderMax = model.getRangeSliderMaximum(parameter, step);\n    return (\n      <Grid key={`${parameter.type}-${index}`} item xs={12} sx={{ padding: 1 }}>\n        <Grid item xs={12}>\n          <Typography variant=\"caption\">{parameter.description}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Slider\n            value={value}\n            min={sliderMin}\n            max={sliderMax}\n            step={step}\n            marks={[\n              { value: sliderMin, label: sliderMin.toString() },\n              { value: sliderMax, label: sliderMax.toString() },\n            ]}\n            valueLabelDisplay=\"auto\"\n            onChange={(e, newValue) => handleParameterChange(newValue, index)}\n          />\n        </Grid>\n      </Grid>\n    );\n  }\n\n  function renderText(parameter, index) {\n    return (\n      <Grid key={`${parameter.type}-${index}`} item xs={12} sx={{ padding: 1 }}>\n        <TextField\n          id={`fme-text-${index}`}\n          size=\"small\"\n          type={parameter.type === \"PASSWORD\" ? \"password\" : \"text\"}\n          required={!parameter.optional}\n          label={parameter.description}\n          onChange={(e) => handleParameterChange(e.target.value, index)}\n          fullWidth\n          value={parameter.value ?? parameter.defaultValue ?? \"\"}\n        />\n      </Grid>\n    );\n  }\n\n  function renderParameters() {\n    return (\n      <Grid container>\n        {props.parameters.map((parameter, index) => {\n          switch (parameter.type) {\n            case \"CHOICE\":\n              return renderChoice(parameter, index);\n            case \"LOOKUP_CHOICE\":\n              return renderChoice(parameter, index);\n            case \"LISTBOX\":\n              return renderListBox(parameter, index);\n            case \"LOOKUP_LISTBOX\":\n              return renderListBox(parameter, index);\n            case \"RANGE_SLIDER\":\n              return renderRangeSlider(parameter, index);\n            case \"STRING\":\n            case \"TEXT\":\n            case \"PASSWORD\":\n              return renderText(parameter, index);\n            default:\n              return null;\n          }\n        })}\n      </Grid>\n    );\n  }\n\n  return (\n    <Grid container>\n      {infoUrlIsValid() && renderInformationUrl()}\n      {allParametersCantBeRendered() && renderParameterRenderingError()}\n      {noParametersToRender() && renderNoParametersToRenderError()}\n      {renderParameters()}\n    </Grid>\n  );\n};\n\nexport default ProductParameters;\n","export const ALLOWED_FME_PARAMETERS = [\n  \"CHOICE\",\n  \"LOOKUP_CHOICE\",\n  \"LISTBOX\",\n  \"LOOKUP_LISTBOX\",\n  \"RANGE_SLIDER\",\n  \"PASSWORD\",\n  \"STRING\",\n  \"TEXT\",\n];\nexport const POLLING_INTERVAL = 5000;\nexport const FME_FAIL_MESSAGES = [\"ABORTED\", \"FME_FAILURE\", \"JOB_FAILURE\"];\nexport const FME_SUCCESS_MESSAGES = [\"SUCCESS\"];\n","import { useEffect, useRef } from \"react\";\n\n// This hook is a wrapper around the setInterval and clearInterval api.\n// It makes sure to remove the interval(s) if the component unmounts.\n// Using this hook is really easy. The example below will run the pollData-function\n// every 15 seconds:\n// useInterval(() => { pollData() }, 15 * 1000);\n// To remove the interval, simply pass null to the hook instead, as follows:\n// useInterval(() => { pollData() }, null);\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import { useState, useEffect } from \"react\";\n\nexport default function useProductParameters(groupName, workspaceName, model) {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [parameters, setParameters] = useState([]);\n\n  useEffect(() => {\n    const fetchParameters = async () => {\n      setLoading(true);\n      setError(false);\n      const { error, parameters } = await model.getProductParameters(\n        groupName,\n        workspaceName\n      );\n      if (error) {\n        setError(true);\n      }\n      setLoading(false);\n      setParameters(parameters);\n    };\n\n    fetchParameters();\n  }, [model, groupName, workspaceName]);\n\n  return { error, loading, parameters, setProductParameters: setParameters };\n}\n"],"names":["props","localObserver","model","groupDisplayName","options","activeStep","setActiveStep","React","activeGroup","setActiveGroup","activeProduct","setActiveProduct","activeDrawButton","setActiveDrawButton","featureExists","setFeatureExists","geometryRequired","setGeometryRequired","totalAllowedArea","setTotalAllowedArea","totalDrawnArea","setTotalDrawnArea","drawError","setDrawError","userEmail","setUserEmail","getActiveUserEmail","orderStatus","setOrderStatus","pollError","setPollError","jobId","setJobId","enqueueSnackbar","useSnackbar","shouldPollData","FME_FAIL_MESSAGES","FME_SUCCESS_MESSAGES","includes","getShouldPollData","orderIsLoading","orderIsCompleted","getOrderIsCompleted","error","parametersError","loading","parametersLoading","parameters","productParameters","setProductParameters","useProductParameters","steps","label","toLowerCase","renderFunction","groupsToRender","productGroups","length","sort","container","item","xs","fullWidth","size","id","labelId","value","onChange","e","target","map","group","index","renderPluginNotConfiguredMessage","renderStepperButtons","type","disabled","renderValueFunction","renderSelectedValue","productsInActiveGroup","filteredProducts","products","filter","product","a","b","name","localeCompare","undefined","numeric","getProductsInActiveGroup","getProduct","infoUrl","select","InputProps","startAdornment","title","position","href","edge","variant","handleDrawButtonClick","sx","marginTop","toLocaleString","renderProductParameters","getContinueFromParameterStep","shouldPromptForEmail","getActiveStepperButtons","useInterval","async","status","getJobStatusById","POLLING_INTERVAL","handleFeatureAdded","drawInformation","totalArea","maxArea","features","handleResetDraw","publish","resetOrderInformation","buttonType","some","parameter","optional","parameterGotSomeValue","parameterValueSet","defaultValue","parameterDefaultValueSet","getContinueFromOrderStep","isValidEmail","buttons","justifyContent","button","marginLeft","onClick","result","makeOrder","handleProductOrder","handleStepperButtonClick","parametersToRender","getParametersToRender","getInfoUrl","style","fontWeight","height","subscribe","anchorOrigin","vertical","horizontal","unsubscribe","noGeomAttributeSupplied","orientation","padding","step","drawButtons","tooltip","icon","selected","margin","renderToggleButton","StyledGrid","styled","Grid","theme","background","palette","mode","dark","main","warning","info","color","contrastText","spacing","borderRadius","shape","boxShadow","shadows","children","ChipsContainer","display","flexWrap","StyledChip","Chip","marginRight","getOptionCaption","listOptions","find","option","caption","required","description","multiple","reduce","acc","next","push","event","input","renderValue","informationText","orderFailed","getOrderFailed","renderOrderCompletedInformation","marginBottom","handleParameterChange","renderChoice","renderListBox","infoUrlIsValid","wrap","alignSelf","window","open","ALLOWED_FME_PARAMETERS","getRangeSliderValueAndStep","sliderMin","getRangeSliderMinimum","sliderMax","getRangeSliderMaximum","min","max","marks","toString","valueLabelDisplay","newValue","renderRangeSlider","renderText","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","groupName","workspaceName","setError","useState","setLoading","setParameters","getProductParameters","fetchParameters"],"sourceRoot":""}
{"version":3,"file":"static/js/7836.05c28612.chunk.js","mappings":"6KASe,SAASA,EAAYC,EAAUC,GAC5C,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CACzB,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAMK,EAAKC,aAJb,WACEL,EAAcG,SACf,GAE8BJ,GAC7B,OAAO,kBAAMO,cAAcF,EAApB,CACR,CACF,GAAE,CAACL,GACL,C","sources":["plugins/FmeServer/hooks/useInterval.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// This hook is a wrapper around the setInterval and clearInterval api.\n// It makes sure to remove the interval(s) if the component unmounts.\n// Using this hook is really easy. The example below will run the pollData-function\n// every 15 seconds:\n// useInterval(() => { pollData() }, 15 * 1000);\n// To remove the interval, simply pass null to the hook instead, as follows:\n// useInterval(() => { pollData() }, null);\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval"],"sourceRoot":""}
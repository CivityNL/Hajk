{"version":3,"file":"static/js/5354.d67dbe5d.chunk.js","mappings":"wLAAqBA,EAAAA,WACnB,WAAYC,GAAW,IAAD,4BAOtBC,kCAAoC,SAACC,GACnC,IACE,IAAMC,EAAS,IAAIC,gBAAgBF,GAOnC,MAAO,CACLG,OANGF,EAAOG,IAAI,MAASH,EAAOG,IAAI,KAGzB,CAACH,EAAOI,IAAI,KAAMJ,EAAOI,IAAI,MAF7B,EAAKC,IAAIC,UAAUC,YAM5BC,KAAMR,EAAOI,IAAI,MAAQ,EAAKC,IAAIC,UAAUG,UAC5CC,OAAQV,EAAOI,IAAI,KAWtB,CATC,MAAOO,GAIP,OAHAC,QAAQD,MAAMA,GAGP,CACLT,OAAQ,EAAKG,IAAIC,UAAUC,YAC3BC,KAAM,EAAKH,IAAIC,UAAUG,UACzBC,OAAQ,KAEX,CACF,EA/BqB,KAiCtBG,kBAAoB,WAClB,EAAKC,cAAcC,UAAU,UAAU,SAACC,GACtC,EAAKC,eAAeC,QAAQ,uBAC5B,IAAMC,EAAc,EAAKrB,kCAAkCkB,GAE3D,GAA2B,OAAvBG,EAAYT,OAAiB,CAC/B,IAAMU,EAAgBD,EAAYT,OAAOW,MAAM,KAC/C,EACE,EAAKC,uBAAuBF,GADtBG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,aAGtB,EAAKC,uBAAuBF,EAAcC,EAC3C,CAED,EAAKE,MAAM,EAAKrB,IAAIC,UAAWa,EAAYjB,OAAQiB,EAAYX,KAChE,GACF,EAhDqB,KAkDtBc,uBAAyB,SAACF,GAExB,OADoB,EAAKf,IAAIsB,YAAYC,WACtBC,QACjB,SAACnB,EAAQoB,GAWP,OATEA,EAAMC,gBAAN,WACAD,EAAMC,gBAAN,sBAEIX,EAAcY,SAASF,EAAMC,gBAAN,MACzBrB,EAAOa,aAAaU,KAAKH,GAEzBpB,EAAOc,aAAaS,KAAKH,IAGtBpB,CACR,GACD,CAAEa,aAAc,GAAIC,aAAc,IAErC,EAnECU,KAAKpB,cAAgBjB,EAASiB,cAC9BoB,KAAKjB,eAAiBpB,EAASoB,eAC/BiB,KAAK7B,IAAMR,EAASQ,IACpB6B,KAAKrB,mBACN,CA0FA,OA1FA,8CAiED,SAAuBU,EAAcC,GAAe,IAAD,OACjDD,EAAaY,SAAQ,SAACC,GACoB,UAApCA,EAAehC,IAAI,aACrB,EAAKa,eAAeC,QAAQ,0BAA2BkB,GAC7CA,EAAeC,cACzBD,EAAeE,YAAW,EAE7B,IAEDd,EAAaW,SAAQ,SAACI,GACoB,UAApCA,EAAenC,IAAI,aACrB,EAAKa,eAAeC,QAAQ,0BAA2BqB,GAC9CA,EAAeF,cACxBE,EAAeD,YAAW,EAE7B,GACF,sBAED,SAAME,EAAMtC,EAAQM,GAClBgC,EAAKC,QAAQ,CACXvC,OAAQA,EACRM,KAAMA,EACNkC,SAAU,OAEZR,KAAKpB,cAAcI,QAAQ,yBAC5B,OAhGkBtB,E","sources":["plugins/DocumentHandler/MapViewModel.js"],"sourcesContent":["export default class MapViewModel {\n  constructor(settings) {\n    this.localObserver = settings.localObserver;\n    this.globalObserver = settings.globalObserver;\n    this.map = settings.map;\n    this.bindSubscriptions();\n  }\n\n  convertMapSettingsUrlToOlSettings = (inputUrl) => {\n    try {\n      const params = new URLSearchParams(inputUrl);\n      let center;\n      if (!params.has(\"x\") || !params.has(\"y\")) {\n        center = this.map.getView().getCenter();\n      } else {\n        center = [params.get(\"x\"), params.get(\"y\")];\n      }\n      return {\n        center: center,\n        zoom: params.get(\"z\") || this.map.getView().getZoom(),\n        layers: params.get(\"l\"), // Allow 'null', we handle it later\n      };\n    } catch (error) {\n      console.error(error);\n      // In case parsing the params failed, let's ensure we have\n      // a valid return object:\n      return {\n        center: this.map.getView().getCenter(),\n        zoom: this.map.getView().getZoom(),\n        layers: null,\n      };\n    }\n  };\n\n  bindSubscriptions = () => {\n    this.localObserver.subscribe(\"fly-to\", (url) => {\n      this.globalObserver.publish(\"core.minimizeWindow\");\n      const mapSettings = this.convertMapSettingsUrlToOlSettings(url);\n\n      if (mapSettings.layers !== null) {\n        const visibleLayers = mapSettings.layers.split(\",\");\n        const { layersToShow, layersToHide } =\n          this.getLayersToShowAndHide(visibleLayers);\n\n        this.setMapLayersVisibility(layersToShow, layersToHide);\n      }\n\n      this.flyTo(this.map.getView(), mapSettings.center, mapSettings.zoom);\n    });\n  };\n\n  getLayersToShowAndHide = (visibleLayers) => {\n    const layersInMap = this.map.getLayers().getArray();\n    return layersInMap.reduce(\n      (layers, layer) => {\n        if (\n          layer.getProperties()[\"layerInfo\"] &&\n          layer.getProperties()[\"layerInfo\"][\"layerType\"]\n        ) {\n          if (visibleLayers.includes(layer.getProperties()[\"name\"])) {\n            layers.layersToShow.push(layer);\n          } else {\n            layers.layersToHide.push(layer);\n          }\n        }\n        return layers;\n      },\n      { layersToShow: [], layersToHide: [] }\n    );\n  };\n\n  setMapLayersVisibility(layersToShow, layersToHide) {\n    layersToShow.forEach((mapLayerToShow) => {\n      if (mapLayerToShow.get(\"layerType\") === \"group\") {\n        this.globalObserver.publish(\"layerswitcher.showLayer\", mapLayerToShow);\n      } else if (!mapLayerToShow.getVisible()) {\n        mapLayerToShow.setVisible(true);\n      }\n    });\n\n    layersToHide.forEach((mapLayerToHide) => {\n      if (mapLayerToHide.get(\"layerType\") === \"group\") {\n        this.globalObserver.publish(\"layerswitcher.hideLayer\", mapLayerToHide);\n      } else if (mapLayerToHide.getVisible()) {\n        mapLayerToHide.setVisible(false);\n      }\n    });\n  }\n\n  flyTo(view, center, zoom) {\n    view.animate({\n      center: center,\n      zoom: zoom,\n      duration: 1500,\n    });\n    this.localObserver.publish(\"map-animation-complete\");\n  }\n}\n"],"names":["MapViewModel","settings","convertMapSettingsUrlToOlSettings","inputUrl","params","URLSearchParams","center","has","get","map","getView","getCenter","zoom","getZoom","layers","error","console","bindSubscriptions","localObserver","subscribe","url","globalObserver","publish","mapSettings","visibleLayers","split","getLayersToShowAndHide","layersToShow","layersToHide","setMapLayersVisibility","flyTo","getLayers","getArray","reduce","layer","getProperties","includes","push","this","forEach","mapLayerToShow","getVisible","setVisible","mapLayerToHide","view","animate","duration"],"sourceRoot":""}
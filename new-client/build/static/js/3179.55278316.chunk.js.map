{"version":3,"file":"static/js/3179.55278316.chunk.js","mappings":"6JACMA,EAAAA,WACJ,WAAYC,GAAW,IAAD,4BA8CtBC,OAAS,SAACC,IAEoB,IAA5BA,EAAEC,OAAOC,gBACP,EAAKC,cAAcC,QAAQ,aAAc,EAAKC,YACjD,EAjDCC,KAAKC,IAAMT,EAASS,IACpBD,KAAKE,YAAcV,EAASU,YAC5BF,KAAKG,WAAa,CAAC,EACnBH,KAAKI,IAAMZ,EAASY,IACpBJ,KAAKH,cAAgBL,EAASK,cAG9BG,KAAKI,IAAIC,UAAUC,GAAG,SAAUN,KAAKP,QAGrCO,KAAKC,IAAIM,eAAeC,UAAU,8BAA8B,WAC9D,EAAKX,cAAcC,QAAQ,aAAc,EAAKC,YAC/C,IAEDC,KAAKI,IACFK,YACAC,WACAC,SAAQ,SAACC,GAER,IAAMC,EAAUD,EAAME,IAAI,QAG1BF,EAAMN,GAAG,kBAAkB,SAACS,GAC1B,EAAKlB,cAAcC,QAAQ,aAAc,EAAKC,YAC/C,IAGDa,EAAMI,YAAYV,GAAG,UAAU,YAAiB,IAAD,EAAbX,EAAa,EAAbA,OAChC,GAAgC,oBAArBA,EAAOsB,UAAlB,CAGA,IAAMC,EAAwB,UAAGvB,EAAOsB,mBAAV,aAAG,EAAoBE,WAEtB,OAA7BD,QAC6BE,IAA7BF,IAEA,EAAKf,WAAWU,GAAWK,GAI7B,EAAKrB,cAAcC,QAAQ,aAAc,EAAKC,YAZI,CAanD,GACF,GACJ,CA0DA,OA1DA,8BAQD,WACE,OAAOC,KAAKI,GACb,iCAED,WACE,OAAOJ,KAAKI,IACTK,YACAC,WACAW,QAAO,SAACT,GACP,OAEEA,EAAMU,cACNV,EAAMW,gBAAgBC,OACtBC,EAAAA,EAAAA,gBAAeb,EAAMW,gBAAgBC,KAExC,IACApB,KAAI,SAACQ,GAAD,OAAWA,EAAMW,gBAAgBC,IAAjC,IACJE,KAAK,IACT,0BAED,WAAa,IAAD,EAIJC,GAAI,UAAAC,SAASC,eAAe,2BAAxB,eAA6CC,MAAMC,SAAU,GACjEC,EAAIhC,KAAKG,WACT8B,EAAQjC,KAAKE,cAKbgC,EAAM,IAAIC,IAAIP,SAASQ,SAASC,KAAKC,MAAM,KAAK,IAkBtD,OAfAJ,EAAIK,aAAaC,OAAO,IAAKxC,KAAKC,IAAIwC,OAAOC,WAC7CR,EAAIK,aAAaC,OAAO,IAAKxC,KAAKI,IAAIC,UAAUsC,YAAY,IAC5DT,EAAIK,aAAaC,OAAO,IAAKxC,KAAKI,IAAIC,UAAUsC,YAAY,IAC5DT,EAAIK,aAAaC,OAAO,IAAKxC,KAAKI,IAAIC,UAAUuC,WAChDV,EAAIK,aAAaC,OAAO,IAAKxC,KAAK6C,qBAIxB,IAAVZ,GAAkBC,EAAIK,aAAaC,OAAO,QAASP,GAEnDa,OAAOC,KAAKf,GAAGgB,OAAS,GACtBd,EAAIK,aAAaC,OAAO,IAAKS,KAAKC,UAAUlB,IAE9CL,EAAEqB,OAAS,GAAKd,EAAIK,aAAaC,OAAO,IAAKb,GAEtCO,EAAIiB,UACZ,OAvGG5D,GA0GN,W","sources":["plugins/Anchor/AnchorModel.js"],"sourcesContent":["import { isValidLayerId } from \"../../utils/Validator\";\nclass AnchorModel {\n  constructor(settings) {\n    this.app = settings.app;\n    this.getCleanUrl = settings.getCleanUrl;\n    this.cqlFilters = {};\n    this.map = settings.map;\n    this.localObserver = settings.localObserver;\n\n    // Update the URL when map view changes\n    this.map.getView().on(\"change\", this.update);\n\n    // Update the URL when search phrase changes\n    this.app.globalObserver.subscribe(\"search.searchPhraseChanged\", () => {\n      this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n    });\n\n    this.map\n      .getLayers()\n      .getArray()\n      .forEach((layer) => {\n        // Grab an unique ID for each layer, we'll need this to save CQL filter value for each layer\n        const layerId = layer.get(\"name\");\n\n        // Update anchor each time layer visibility changes (to reflect current visible layers)\n        layer.on(\"change:visible\", (event) => {\n          this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n        });\n\n        // Update anchor each time an underlying Source changes in some way (could be new CQL params, for example).\n        layer.getSource().on(\"change\", ({ target }) => {\n          if (typeof target.getParams !== \"function\") return;\n\n          // Update CQL filters only if a real value exists\n          const cqlFilterForCurrentLayer = target.getParams()?.CQL_FILTER;\n          if (\n            cqlFilterForCurrentLayer !== null &&\n            cqlFilterForCurrentLayer !== undefined\n          ) {\n            this.cqlFilters[layerId] = cqlFilterForCurrentLayer;\n          }\n\n          // Publish the event\n          this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n        });\n      });\n  }\n\n  update = (e) => {\n    // If view is still animating, postpone updating Anchor\n    e.target.getAnimating() === false &&\n      this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n  };\n\n  getMap() {\n    return this.map;\n  }\n\n  getVisibleLayers() {\n    return this.map\n      .getLayers()\n      .getArray()\n      .filter((layer) => {\n        return (\n          // We consider a layer to be visible only if…\n          layer.getVisible() && // …it's visible…\n          layer.getProperties().name &&\n          isValidLayerId(layer.getProperties().name) // …has a specified name property…\n        );\n      })\n      .map((layer) => layer.getProperties().name)\n      .join(\",\");\n  }\n\n  getAnchor() {\n    // Read some \"optional\" values so we have them prepared.\n    // If some conditions aren't met, we won't add them to the\n    // anchor string, in order to keep the string short.\n    const q = document.getElementById(\"searchInputField\")?.value.trim() || \"\";\n    const f = this.cqlFilters;\n    const clean = this.getCleanUrl();\n\n    // Split current URL on the \"?\" and just get the first part. This\n    // way we'll get rid of any unwanted search params, without messing\n    // up the remaining portion of URL (protocol, host, path, hash).\n    const url = new URL(document.location.href.split(\"?\")[0]);\n\n    // The following params are always appended\n    url.searchParams.append(\"m\", this.app.config.activeMap);\n    url.searchParams.append(\"x\", this.map.getView().getCenter()[0]);\n    url.searchParams.append(\"y\", this.map.getView().getCenter()[1]);\n    url.searchParams.append(\"z\", this.map.getView().getZoom());\n    url.searchParams.append(\"l\", this.getVisibleLayers());\n\n    // Optionally, append those too:\n    // Only add 'clean' if the value is true\n    clean === true && url.searchParams.append(\"clean\", clean);\n    // Only add 'f' if it isn't an empty object\n    Object.keys(f).length > 0 &&\n      url.searchParams.append(\"f\", JSON.stringify(f));\n    // Only add 'q' if it isn't empty\n    q.length > 0 && url.searchParams.append(\"q\", q);\n\n    return url.toString();\n  }\n}\n\nexport default AnchorModel;\n"],"names":["AnchorModel","settings","update","e","target","getAnimating","localObserver","publish","getAnchor","this","app","getCleanUrl","cqlFilters","map","getView","on","globalObserver","subscribe","getLayers","getArray","forEach","layer","layerId","get","event","getSource","getParams","cqlFilterForCurrentLayer","CQL_FILTER","undefined","filter","getVisible","getProperties","name","isValidLayerId","join","q","document","getElementById","value","trim","f","clean","url","URL","location","href","split","searchParams","append","config","activeMap","getCenter","getZoom","getVisibleLayers","Object","keys","length","JSON","stringify","toString"],"sourceRoot":""}
{"version":3,"file":"static/js/5551.32395023.chunk.js","mappings":"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","sources":["components/Card.js","plugins/BaseWindowPlugin.js","plugins/DocumentHandler/DocumentHandler.js","plugins/DocumentHandler/MapViewModel.js","plugins/DocumentHandler/documentWindow/DocumentWindowBase.js","plugins/DocumentHandler/documentWindow/Progress.js","../node_modules/@mui/icons-material/Menu.js"],"sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Card as MUICard,\n  CardHeader,\n  CardActionArea,\n  Avatar,\n} from \"@mui/material\";\n\nconst StyledCard = styled(MUICard)(({ theme }) => ({\n  marginBottom: theme.spacing(1),\n  width: \"210px\",\n  [theme.breakpoints.down(\"sm\")]: {\n    boxShadow: \"none\",\n    borderBottom: \"1px solid #ccc\",\n    borderRadius: 0,\n    margin: 0,\n    width: \"100%\",\n    justifyContent: \"left\",\n  },\n}));\n\nconst StyledAvatar = styled(Avatar)(({ theme }) => ({\n  background: theme.palette.text.primary,\n}));\n\nclass Card extends React.PureComponent {\n  state = {\n    open: false,\n    text: \"\",\n  };\n\n  static propTypes = {\n    abstract: propTypes.string.isRequired,\n    icon: propTypes.object.isRequired,\n    onClick: propTypes.func.isRequired,\n    title: propTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    abstract: \"Beskrivning saknas\",\n    title: \"Titel saknas\",\n  };\n\n  render() {\n    const { abstract, icon, onClick, title } = this.props;\n\n    return (\n      <StyledCard onClick={onClick}>\n        <CardActionArea>\n          <CardHeader\n            avatar={<StyledAvatar>{icon}</StyledAvatar>}\n            title={title}\n            subheader={abstract}\n          />\n        </CardActionArea>\n      </StyledCard>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { isMobile } from \"./../utils/IsMobile\";\nimport { createPortal } from \"react-dom\";\nimport { Hidden, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\nimport Window from \"../components/Window.js\";\nimport Card from \"../components/Card.js\";\nimport PluginControlButton from \"../components/PluginControlButton\";\n\nclass BaseWindowPlugin extends React.PureComponent {\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    children: propTypes.object.isRequired,\n    custom: propTypes.object.isRequired,\n    map: propTypes.object.isRequired,\n    options: propTypes.object.isRequired,\n    type: propTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    // 'type' is basically a unique identifier for each plugin\n    this.type = props.type.toLowerCase() || undefined;\n\n    // There will be defaults in props.custom, so that each plugin has own default title/description\n    this.description = props.options.description || props.custom.description;\n\n    // Should Window be visible at start?\n    const visibleAtStart =\n      (this.props.app.config.mapConfig.map.clean === false && // Never show in clean mode\n        (isMobile\n          ? props.options.visibleAtStartMobile\n          : props.options.visibleAtStart)) ||\n      false;\n\n    // If plugin is shown at start, we want to register it as shown in the Analytics module too.\n    // Normally, the event would be sent when user clicks on the button that activates the plugin,\n    // but in this case there won't be any click as the window will be visible at start.\n    if (visibleAtStart) {\n      this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n        eventName: \"pluginShown\",\n        pluginName: this.type,\n        activeMap: this.props.app.config.activeMap,\n      });\n    }\n\n    // Title and Color are kept in state and not as class properties. Keeping them in state\n    // ensures re-render when new props arrive and update the state variables (see componentDidUpdate() too).\n    this.state = {\n      title: props.options.title || props.custom.title || \"Unnamed plugin\",\n      color: props.options.color || props.custom.color || null,\n      windowVisible: visibleAtStart,\n    };\n\n    // Title is a special case: we want to use the state.title and pass on to Window in order\n    // to update Window's title dynamically. At the same time, we want all other occurrences,\n    // e.g. Widget or Drawer button's label to remain the same.\n    this.title = props.options.title || props.custom.title || \"Unnamed plugin\";\n\n    // Try to get values from admin's option. Fallback to customs from Plugin defaults, or finally to hard-coded values.\n    this.width = props.options.width || props.custom.width || 400;\n    this.height = props.options.height || props.custom.height || \"auto\";\n    this.position = props.options.position || props.custom.position || \"left\";\n\n    // Register Window in our global register\n    props.app.registerWindowPlugin(this);\n\n    // Subscribe to a global event that makes it possible to show/hide Windows.\n    // First we prepare a unique event name for each plugin so it looks like '{pluginName}.showWindow'.\n    const eventName = `${this.type}.showWindow`;\n    // Next, subscribe to that event, expect 'opts' array.\n    // To find all places where this event is publish, search for 'globalObserver.publish(\"show'\n    props.app.globalObserver.subscribe(eventName, (opts) => {\n      this.showWindow(opts);\n    });\n\n    // Same as above, but to close the window.\n    const closeEventName = `${this.type}.closeWindow`;\n\n    props.app.globalObserver.subscribe(closeEventName, () => {\n      this.closeWindow();\n    });\n  }\n\n  // Does not run on initial render, but runs on subsequential re-renders.\n  componentDidUpdate(prevProps) {\n    // Window's title and color can be updated on-the-flight, so we keep them\n    // in state and ensure that state is updated when new props arrive.\n    prevProps.custom.title !== this.props.custom.title &&\n      this.setState({ title: this.props.custom.title });\n\n    prevProps.custom.color !== this.props.custom.color &&\n      this.setState({ color: this.props.custom.color });\n  }\n\n  pluginIsWidget(target) {\n    return [\"left\", \"right\"].includes(target);\n  }\n\n  handleButtonClick = (e) => {\n    this.showWindow({\n      hideOtherPluginWindows: true,\n      runCallback: true,\n    });\n    this.props.app.globalObserver.publish(\"core.onlyHideDrawerIfNeeded\");\n  };\n\n  showWindow = (opts) => {\n    const hideOtherPluginWindows = opts.hideOtherPluginWindows || true,\n      runCallback = opts.runCallback || true;\n\n    // Let the App know which tool is currently active\n    this.props.app.activeTool = this.type;\n\n    // Tell the Analytics model about this\n    this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n      eventName: \"pluginShown\",\n      pluginName: this.type,\n      activeMap: this.props.app.config.activeMap,\n    });\n\n    // Don't continue if visibility hasn't changed\n    if (this.state.windowVisible === true) {\n      return null;\n    }\n\n    hideOtherPluginWindows === true && this.props.app.onWindowOpen(this);\n\n    this.setState(\n      {\n        windowVisible: true,\n      },\n      () => {\n        // If there's a callback defined in custom, run it\n        runCallback === true &&\n          typeof this.props.custom.onWindowShow === \"function\" &&\n          this.props.custom.onWindowShow();\n      }\n    );\n  };\n\n  closeWindow = () => {\n    // If closeWindow was initiated by the tool that is currently\n    // active, we should unset the activeTool property\n    if (this.type === this.props.app.activeTool)\n      this.props.app.activeTool = undefined;\n\n    this.setState(\n      {\n        windowVisible: false,\n      },\n      () => {\n        typeof this.props.custom.onWindowHide === \"function\" &&\n          this.props.custom.onWindowHide();\n      }\n    );\n  };\n  /**\n   * @summary Render the plugin and its buttons according to settings in admin.\n   * @description See comments in code to follow the rendering logic.\n   * @param {*} custom\n   * @returns {object} React.Component\n   * @memberof BaseWindowPlugin\n   */\n  renderWindow(custom) {\n    const { target } = this.props.options;\n    // BaseWindowPlugin, which calls this method, will supply an object.\n    // If that object contains a render() function, we want to call it\n    // and bypass any other functionality from this method.\n    return typeof custom?.render === \"function\" ? (\n      custom.render()\n    ) : (\n      // If there was not custom render method, we do \"normal\" rendering.\n      // That includes rendering the plugin Window itself, as well as a\n      // button (that will trigger opening of the plugin Window).\n      <>\n        <Window\n          globalObserver={this.props.app.globalObserver}\n          title={this.state.title}\n          color={this.state.color}\n          onClose={this.closeWindow}\n          open={this.state.windowVisible}\n          onResize={this.props.custom.onResize}\n          onMaximize={this.props.custom.onMaximize}\n          onMinimize={this.props.custom.onMinimize}\n          draggingEnabled={this.props.custom.draggingEnabled}\n          customPanelHeaderButtons={this.props.custom.customPanelHeaderButtons}\n          resizingEnabled={this.props.custom.resizingEnabled}\n          scrollable={this.props.custom.scrollable}\n          allowMaximizedWindow={this.props.custom.allowMaximizedWindow}\n          disablePadding={this.props.custom.disablePadding}\n          width={this.width}\n          height={this.height}\n          position={this.position}\n          mode=\"window\"\n          layerswitcherConfig={this.props.app.config.mapConfig.tools.find(\n            (t) => t.type === \"layerswitcher\"\n          )}\n        >\n          {/* We have to pass windowVisible down to the children so that we can conditionally render\n          the <Tabs /> component, since it does not accept components with display: \"none\". We use the\n          windowVisible-prop to make sure that we don't render the <Tabs /> when the window\n          is not visible.*/}\n          {React.cloneElement(this.props.children, {\n            windowVisible: this.state.windowVisible,\n          })}\n        </Window>\n        {/* Drawer buttons and Widget buttons should render a Drawer button. */}\n        {(target === \"toolbar\" || this.pluginIsWidget(target)) &&\n          this.renderDrawerButton()}\n        {/* Widget buttons must also render a Widget */}\n        {this.pluginIsWidget(target) &&\n          this.renderWidgetButton(`${target}-column`)}\n        {/* Finally, render a Control button if target has that value */}\n        {target === \"control\" && this.renderControlButton()}\n      </>\n    );\n  }\n\n  /**\n   * This is a bit of a special case. This method will render\n   * not only plugins specified as Drawer plugins (target===toolbar),\n   * but it will also render Widget plugins - given some special condition.\n   *\n   * Those special conditions are small screens, where there's no screen\n   * estate to render the Widget button in Map Overlay.\n   */\n  renderDrawerButton() {\n    return createPortal(\n      <Hidden mdUp={this.pluginIsWidget(this.props.options.target)}>\n        <ListItem\n          button\n          divider={true}\n          selected={this.state.windowVisible}\n          onClick={this.handleButtonClick}\n        >\n          <ListItemIcon>{this.props.custom.icon}</ListItemIcon>\n          <ListItemText primary={this.title} />\n        </ListItem>\n      </Hidden>,\n      document.getElementById(\"plugin-buttons\")\n    );\n  }\n\n  renderWidgetButton(id) {\n    return createPortal(\n      // Hide Widget button on small screens, see renderDrawerButton too\n      <Hidden mdDown>\n        <Card\n          icon={this.props.custom.icon}\n          onClick={this.handleButtonClick}\n          title={this.title}\n          abstract={this.description}\n        />\n      </Hidden>,\n      document.getElementById(id)\n    );\n  }\n\n  renderControlButton() {\n    return createPortal(\n      <PluginControlButton\n        icon={this.props.custom.icon}\n        onClick={this.handleButtonClick}\n        title={this.title}\n        abstract={this.description}\n      />,\n      document.getElementById(\"plugin-control-buttons\")\n    );\n  }\n\n  render() {\n    // Don't render if \"clean\" query param is specified, otherwise go on\n    return (\n      this.props.app.config.mapConfig.map.clean !== true &&\n      this.renderWindow(this.props.custom)\n    );\n  }\n}\n\nexport default BaseWindowPlugin;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DocumentWindowBase from \"./documentWindow/DocumentWindowBase\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\n\nimport DocumentHandlerModel from \"./DocumentHandlerModel\";\nimport PanelMenuContainerView from \"./panelMenu/PanelMenuContainerView\";\nimport Observer from \"react-event-observer\";\nimport MapViewModel from \"./MapViewModel\";\nimport { createTheme } from \"@mui/material/styles\";\nimport { withTheme } from \"@emotion/react\";\nimport { deepMerge } from \"../../utils/DeepMerge\";\n\nclass DocumentHandler extends React.PureComponent {\n  static propTypes = {\n    app: PropTypes.object.isRequired,\n    map: PropTypes.object.isRequired,\n    options: PropTypes.object.isRequired,\n  };\n\n  state = {\n    document: null,\n    documentWindowMaximized: true,\n    showPrintWindow: false,\n    chapters: [],\n    documentColor: null,\n    model: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.localObserver = Observer();\n\n    this.mapViewModel = new MapViewModel({\n      localObserver: this.localObserver,\n      globalObserver: props.app.globalObserver,\n      map: props.map,\n    });\n\n    this.props.searchInterface.getSearchMethods = new Promise((resolve) => {\n      new DocumentHandlerModel({\n        localObserver: this.localObserver,\n        app: props.app,\n        map: props.map,\n        menu: props.options.menuConfig.menu,\n        resolveSearchInterface: resolve,\n        options: props.options,\n      })\n        .init()\n        .then((loadedDocumentModel) => {\n          return loadedDocumentModel\n            .fetchCustomThemeJson()\n            .then((customTheme) => {\n              this.setState(\n                {\n                  model: loadedDocumentModel,\n                  customTheme: this.getThemeWithCustomThemeApplied(customTheme),\n                },\n                () => {\n                  this.addDrawerToggleButton();\n                }\n              );\n            });\n        });\n    });\n  }\n\n  componentDidUpdate = (prevProps) => {\n    const { theme } = this.props;\n    //We need to update the palette.mode in the nested customTheme with dark/light from the main theme\n    if (prevProps.theme.palette.mode !== theme.palette.mode) {\n      //Spread to not mutate\n      this.setState((prevState) => {\n        return {\n          customTheme: {\n            ...prevState.customTheme,\n            palette: {\n              ...prevState.customTheme.palette,\n              mode: theme.palette.mode,\n            },\n          },\n        };\n      });\n    }\n  };\n\n  getThemeWithCustomThemeApplied = (customTheme) => {\n    const { theme } = this.props;\n    if (customTheme.typography) {\n      this.setBottomMarginsForTypographyVariants(customTheme);\n    }\n    return createTheme(deepMerge(theme, customTheme));\n  };\n\n  /**\n   * @summary Loops customTheme and checks if certain typography-variants have marginBottom set\n   * in the theme file. If not set, then we inject default value.\n   * @param {customTheme} documentHandlerTheme\n   * @memberof documenthandler.js\n   */\n  setBottomMarginsForTypographyVariants = (documentHandlerTheme) => {\n    [\"body1\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"].forEach((key) => {\n      const keyHasValue = documentHandlerTheme.typography[key];\n      if (keyHasValue) {\n        const marginBottom = documentHandlerTheme.typography[key]?.marginBottom;\n        if (!marginBottom) {\n          documentHandlerTheme.typography[key].marginBottom =\n            this.props.theme.spacing(1) || \"8px\";\n        }\n      }\n    });\n  };\n\n  dynamicallyImportCustomFont = () => {\n    const { dynamicImportUrls } = this.props.options;\n    if (dynamicImportUrls.customFont) {\n      return (\n        <link\n          rel=\"stylesheet\"\n          type=\"text/css\"\n          href={dynamicImportUrls.customFont}\n        />\n      );\n    } else return null;\n  };\n\n  dynamicallyImportIconFonts = () => {\n    const { dynamicImportUrls } = this.props.options;\n    if (dynamicImportUrls.iconFonts) {\n      return <link rel=\"stylesheet\" href={dynamicImportUrls.iconFonts} />;\n    } else return null;\n  };\n\n  renderDrawerContent = () => {\n    const { app, model, options } = this.props;\n\n    return (\n      <PanelMenuContainerView\n        app={app}\n        document={this.state.document}\n        model={model}\n        options={options}\n        localObserver={this.localObserver}\n      ></PanelMenuContainerView>\n    );\n  };\n\n  addDrawerToggleButton = () => {\n    const { app, options } = this.props;\n    app.globalObserver.publish(\"core.addSrShortcuts\", [\n      { title: \"Till huvudmeny för webbplatsen\", link: \"#panelmenu\" },\n    ]);\n    app.globalObserver.publish(\"core.addDrawerToggleButton\", {\n      value: \"documenthandler\",\n      ButtonIcon: MenuIcon,\n      caption: options.drawerButtonTitle || \"Meny\",\n      drawerTitle: options.drawerTitle || \"Översiktsplan\",\n      order: 100,\n      renderDrawerContent: this.renderDrawerContent,\n    });\n  };\n\n  showDocument = (documentFileName) => {\n    const { app } = this.props;\n\n    return this.setActiveDocument(documentFileName).then(() => {\n      app.globalObserver.publish(\"documentviewer.showWindow\", {\n        hideOtherPlugins: false,\n      });\n      app.globalObserver.publish(\"core.maximizeWindow\");\n    });\n  };\n\n  onWindowHide = () => {\n    this.localObserver.publish(\"set-active-document\", {\n      documentName: null,\n      headerIdentifier: null,\n    });\n    this.localObserver.publish(\"document-window-closed\");\n    return;\n  };\n\n  onMinimize = () => {\n    this.setState({ documentWindowMaximized: false });\n  };\n\n  onMaximize = () => {\n    this.setState({ documentWindowMaximized: true });\n  };\n\n  setActiveDocument = (documentFileName) => {\n    return new Promise((resolve, reject) => {\n      let document = null;\n      if (documentFileName) {\n        document = this.state.model.getDocuments([documentFileName])[0];\n      }\n      if (document) {\n        this.setState(\n          {\n            document: document,\n            showPrintWindow: false,\n          },\n          resolve\n        );\n      } else {\n        reject();\n      }\n    });\n  };\n\n  togglePrintWindow = () => {\n    this.setState({\n      showPrintWindow: !this.state.showPrintWindow,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        {this.dynamicallyImportCustomFont()}\n        {this.dynamicallyImportIconFonts()}\n        <DocumentWindowBase\n          {...this.props}\n          onMinimize={this.onMinimize}\n          showDocument={this.showDocument}\n          onMaximize={this.onMaximize}\n          customTheme={this.state.customTheme}\n          onWindowHide={this.onWindowHide}\n          togglePrintWindow={this.togglePrintWindow}\n          document={this.state.document}\n          documentColor={this.state.documentColor}\n          documentWindowMaximized={this.state.documentWindowMaximized}\n          showPrintWindow={this.state.showPrintWindow}\n          chapters={this.state.chapters}\n          model={this.state.model}\n          localObserver={this.localObserver}\n        />\n      </>\n    );\n  }\n}\nexport default withTheme(DocumentHandler);\n","export default class MapViewModel {\n  constructor(settings) {\n    this.localObserver = settings.localObserver;\n    this.globalObserver = settings.globalObserver;\n    this.map = settings.map;\n    this.bindSubscriptions();\n  }\n\n  convertMapSettingsUrlToOlSettings = (inputUrl) => {\n    try {\n      const params = new URLSearchParams(inputUrl);\n      let center;\n      if (!params.has(\"x\") || !params.has(\"y\")) {\n        center = this.map.getView().getCenter();\n      } else {\n        center = [params.get(\"x\"), params.get(\"y\")];\n      }\n      return {\n        center: center,\n        zoom: params.get(\"z\") || this.map.getView().getZoom(),\n        layers: params.get(\"l\"), // Allow 'null', we handle it later\n      };\n    } catch (error) {\n      console.error(error);\n      // In case parsing the params failed, let's ensure we have\n      // a valid return object:\n      return {\n        center: this.map.getView().getCenter(),\n        zoom: this.map.getView().getZoom(),\n        layers: null,\n      };\n    }\n  };\n\n  bindSubscriptions = () => {\n    this.localObserver.subscribe(\"fly-to\", (url) => {\n      this.globalObserver.publish(\"core.minimizeWindow\");\n      const mapSettings = this.convertMapSettingsUrlToOlSettings(url);\n\n      if (mapSettings.layers !== null) {\n        const visibleLayers = mapSettings.layers.split(\",\");\n        const { layersToShow, layersToHide } =\n          this.getLayersToShowAndHide(visibleLayers);\n\n        this.setMapLayersVisibility(layersToShow, layersToHide);\n      }\n\n      this.flyTo(this.map.getView(), mapSettings.center, mapSettings.zoom);\n    });\n  };\n\n  getLayersToShowAndHide = (visibleLayers) => {\n    const layersInMap = this.map.getLayers().getArray();\n    return layersInMap.reduce(\n      (layers, layer) => {\n        if (\n          layer.getProperties()[\"layerInfo\"] &&\n          layer.getProperties()[\"layerInfo\"][\"layerType\"]\n        ) {\n          if (visibleLayers.includes(layer.getProperties()[\"name\"])) {\n            layers.layersToShow.push(layer);\n          } else {\n            layers.layersToHide.push(layer);\n          }\n        }\n        return layers;\n      },\n      { layersToShow: [], layersToHide: [] }\n    );\n  };\n\n  setMapLayersVisibility(layersToShow, layersToHide) {\n    layersToShow.forEach((mapLayerToShow) => {\n      if (mapLayerToShow.get(\"layerType\") === \"group\") {\n        this.globalObserver.publish(\"layerswitcher.showLayer\", mapLayerToShow);\n      } else if (!mapLayerToShow.getVisible()) {\n        mapLayerToShow.setVisible(true);\n      }\n    });\n\n    layersToHide.forEach((mapLayerToHide) => {\n      if (mapLayerToHide.get(\"layerType\") === \"group\") {\n        this.globalObserver.publish(\"layerswitcher.hideLayer\", mapLayerToHide);\n      } else if (mapLayerToHide.getVisible()) {\n        mapLayerToHide.setVisible(false);\n      }\n    });\n  }\n\n  flyTo(view, center, zoom) {\n    view.animate({\n      center: center,\n      zoom: zoom,\n      duration: 1500,\n    });\n    this.localObserver.publish(\"map-animation-complete\");\n  }\n}\n","import React from \"react\";\nimport { ThemeProvider, StyledEngineProvider } from \"@mui/material/styles\";\nimport BaseWindowPlugin from \"../../BaseWindowPlugin\";\nimport DocumentViewer from \"./DocumentViewer\";\nimport PrintWindow from \"../printMenu/PrintWindow\";\nimport MenuBookIcon from \"@mui/icons-material/MenuBook\";\nimport Progress from \"./Progress\";\nimport { CustomLink } from \"../utils/ContentComponentFactory\";\nimport { withSnackbar } from \"notistack\";\nimport PrintIcon from \"@mui/icons-material/Print\";\n\nclass DocumentWindowBase extends React.PureComponent {\n  snackbarKey = null;\n\n  shouldShowDocumentOnStart = () => {\n    const { options } = this.props;\n    return options.documentOnStart ? true : false;\n  };\n\n  scrollInDocument = (headerIdentifier) => {\n    const { localObserver, model, document } = this.props;\n\n    if (headerIdentifier) {\n      localObserver.publish(\n        \"scroll-to-chapter\",\n        model.getHeaderRef(document, headerIdentifier)\n      );\n    } else {\n      localObserver.publish(\n        \"scroll-to-top\",\n        model.getHeaderRef(document, headerIdentifier)\n      );\n    }\n  };\n\n  showHeaderInDocument = ({ documentName, headerIdentifier }) => {\n    const { enqueueSnackbar } = this.props;\n    if (documentName) {\n      this.props.showDocument(documentName).then(\n        () => {\n          this.scrollInDocument(headerIdentifier);\n        },\n        () => {\n          enqueueSnackbar(\"Kunde inte öppna dokumentet\", {\n            variant: \"warning\",\n          });\n\n          console.warn(\n            \"Could not fetch document, link to document probably reference a document not present in panelmenu\"\n          );\n        }\n      );\n    }\n  };\n\n  displayMaplinkLoadingBar = () => {\n    const { enqueueSnackbar } = this.props;\n    this.snackbarKey = enqueueSnackbar(\"Kartan laddar... \", {\n      variant: \"information\",\n      persist: true,\n      preventDuplicate: true,\n      transitionDuration: { enter: 0, exit: 0 },\n      anchorOrigin: { vertical: \"bottom\", horizontal: \"center\" },\n    });\n  };\n\n  closeMaplinkLoadingBar = () => {\n    const { closeSnackbar } = this.props;\n    closeSnackbar(this.snackbarKey);\n  };\n\n  togglePrintWindow = () => {\n    this.setState({\n      showPrintWindow: !this.state.showPrintWindow,\n    });\n  };\n\n  handleInfoClickRequest = (infoClickEvent) => {\n    const htmlObject = document.createElement(\"span\");\n    htmlObject.innerHTML = infoClickEvent.payload.replace(/\\\\/g, \"\");\n    const aTag = htmlObject.getElementsByTagName(\"a\")[0];\n    if (aTag) {\n      infoClickEvent.resolve(\n        <CustomLink\n          localObserver={this.props.localObserver}\n          aTag={aTag}\n          bottomMargin={false}\n        ></CustomLink>\n      );\n    } else {\n      console.error(\n        \"Could not render DocumentHandler link for payload:\",\n        infoClickEvent.payload\n      );\n      // Must resolve with a value, even null will do, but something more helpful could be nice.\n      // The reason we must do it is because this value is used in React's render, and undefined will not render.\n      infoClickEvent.resolve(<b>Could not render DocumentHandler link</b>);\n    }\n  };\n\n  bindSubscriptions = () => {\n    const { localObserver, app } = this.props;\n    app.globalObserver.subscribe(\n      \"core.info-click-documenthandler\",\n      this.handleInfoClickRequest\n    );\n    localObserver.subscribe(\"set-active-document\", this.showHeaderInDocument);\n    localObserver.subscribe(\"maplink-loading\", this.displayMaplinkLoadingBar);\n    localObserver.subscribe(\n      \"map-animation-complete\",\n      this.closeMaplinkLoadingBar\n    );\n  };\n\n  isModelReady = () => {\n    const { model } = this.props;\n    return model ? true : false;\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const { localObserver } = this.props;\n\n    if (prevProps.model !== this.props.model) {\n      if (this.isModelReady()) {\n        this.bindSubscriptions();\n\n        if (this.shouldShowDocumentOnStart()) {\n          localObserver.publish(\"set-active-document\", {\n            documentName: this.props.options.documentOnStart,\n            headerIdentifier: null,\n          });\n        }\n      }\n    }\n  };\n\n  getDocumentViewer = () => {\n    const { documentWindowMaximized, document } = this.props;\n    return (\n      <DocumentViewer\n        documentWindowMaximized={documentWindowMaximized}\n        activeDocument={document}\n        togglePrintWindow={this.togglePrintWindow}\n        {...this.props}\n      />\n    );\n  };\n\n  render() {\n    const {\n      options,\n      localObserver,\n      documentWindowMaximized,\n      document,\n      togglePrintWindow,\n      onWindowHide,\n      showPrintWindow,\n      customTheme,\n      onMinimize,\n      onMaximize,\n    } = this.props;\n    const modelReady = this.isModelReady();\n    const customHeaderButtons = options.enablePrint\n      ? [\n          {\n            icon: <PrintIcon />,\n            description: \"Öppna utskrift\",\n            onClickCallback: togglePrintWindow,\n          },\n        ]\n      : [];\n    return (\n      <BaseWindowPlugin\n        {...this.props}\n        type=\"DocumentViewer\"\n        custom={{\n          icon: <MenuBookIcon />,\n          title: document?.documentTitle || options.windowTitle || \"Documents\",\n          color: document?.documentColor || \"#ffffff\",\n          customPanelHeaderButtons: customHeaderButtons,\n          description: \"En kort beskrivning som visas i widgeten\",\n          height: options.height || \"auto\",\n          width: options.width || 600,\n          scrollable: false,\n          onMinimize: onMinimize,\n          onMaximize: onMaximize,\n          onWindowHide: onWindowHide,\n          draggingEnabled: false,\n          resizingEnabled: false,\n          allowMaximizedWindow: false,\n        }}\n      >\n        {document != null && modelReady ? (\n          !showPrintWindow ? (\n            customTheme ? (\n              <StyledEngineProvider injectFirst>\n                <ThemeProvider theme={customTheme}>\n                  {this.getDocumentViewer()}\n                </ThemeProvider>\n              </StyledEngineProvider>\n            ) : (\n              this.getDocumentViewer()\n            )\n          ) : (\n            <PrintWindow\n              customTheme={customTheme}\n              activeDocument={document}\n              documentWindowMaximized={documentWindowMaximized}\n              togglePrintWindow={togglePrintWindow}\n              localObserver={localObserver}\n              options={this.props.options}\n              {...this.props}\n            />\n          )\n        ) : (\n          <Progress />\n        )}\n      </BaseWindowPlugin>\n    );\n  }\n}\n\nexport default withSnackbar(DocumentWindowBase);\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nclass Progress extends React.PureComponent {\n  render() {\n    return (\n      <Grid\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        container\n        sx={{\n          height: \"100%\",\n        }}\n      >\n        <CircularProgress\n          justify=\"center\"\n          sx={{\n            height: \"100%\",\n          }}\n        />\n      </Grid>\n    );\n  }\n}\n\nexport default Progress;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n}), 'Menu');\n\nexports.default = _default;"],"names":["StyledCard","styled","MUICard","theme","marginBottom","spacing","width","breakpoints","down","boxShadow","borderBottom","borderRadius","margin","justifyContent","StyledAvatar","Avatar","background","palette","text","primary","Card","state","open","this","props","abstract","icon","onClick","title","avatar","subheader","React","defaultProps","BaseWindowPlugin","handleButtonClick","e","showWindow","hideOtherPluginWindows","runCallback","app","globalObserver","publish","opts","activeTool","type","eventName","pluginName","activeMap","config","windowVisible","onWindowOpen","setState","custom","onWindowShow","closeWindow","undefined","onWindowHide","toLowerCase","description","options","visibleAtStart","mapConfig","map","clean","isMobile","visibleAtStartMobile","color","height","position","registerWindowPlugin","subscribe","closeEventName","prevProps","target","includes","render","onClose","onResize","onMaximize","onMinimize","draggingEnabled","customPanelHeaderButtons","resizingEnabled","scrollable","allowMaximizedWindow","disablePadding","mode","layerswitcherConfig","tools","find","t","children","pluginIsWidget","renderDrawerButton","renderWidgetButton","renderControlButton","createPortal","mdUp","button","divider","selected","document","getElementById","id","mdDown","renderWindow","DocumentHandler","documentWindowMaximized","showPrintWindow","chapters","documentColor","model","componentDidUpdate","prevState","customTheme","getThemeWithCustomThemeApplied","typography","setBottomMarginsForTypographyVariants","createTheme","deepMerge","documentHandlerTheme","forEach","key","dynamicallyImportCustomFont","dynamicImportUrls","customFont","rel","href","dynamicallyImportIconFonts","iconFonts","renderDrawerContent","localObserver","addDrawerToggleButton","link","value","ButtonIcon","MenuIcon","caption","drawerButtonTitle","drawerTitle","order","showDocument","documentFileName","setActiveDocument","then","hideOtherPlugins","documentName","headerIdentifier","Promise","resolve","reject","getDocuments","togglePrintWindow","Observer","mapViewModel","MapViewModel","searchInterface","getSearchMethods","DocumentHandlerModel","menu","menuConfig","resolveSearchInterface","init","loadedDocumentModel","fetchCustomThemeJson","withTheme","settings","convertMapSettingsUrlToOlSettings","inputUrl","params","URLSearchParams","center","has","get","getView","getCenter","zoom","getZoom","layers","error","console","bindSubscriptions","url","mapSettings","visibleLayers","split","getLayersToShowAndHide","layersToShow","layersToHide","setMapLayersVisibility","flyTo","getLayers","getArray","reduce","layer","getProperties","push","mapLayerToShow","getVisible","setVisible","mapLayerToHide","view","animate","duration","DocumentWindowBase","snackbarKey","shouldShowDocumentOnStart","documentOnStart","scrollInDocument","getHeaderRef","showHeaderInDocument","enqueueSnackbar","variant","warn","displayMaplinkLoadingBar","persist","preventDuplicate","transitionDuration","enter","exit","anchorOrigin","vertical","horizontal","closeMaplinkLoadingBar","closeSnackbar","handleInfoClickRequest","infoClickEvent","htmlObject","createElement","innerHTML","payload","replace","aTag","getElementsByTagName","CustomLink","bottomMargin","isModelReady","getDocumentViewer","activeDocument","modelReady","customHeaderButtons","enablePrint","onClickCallback","documentTitle","windowTitle","injectFirst","withSnackbar","Progress","alignItems","container","sx","justify","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}
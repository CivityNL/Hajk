{"version":3,"file":"static/js/4906.fa00fbfe.chunk.js","mappings":"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","sources":["plugins/Edit/EditModel.js"],"sourcesContent":["import { WFS } from \"ol/format\";\nimport { Style, Stroke, Fill, Circle, RegularShape } from \"ol/style\";\nimport { MultiPoint, Polygon } from \"ol/geom\";\nimport Vector from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport { all as strategyAll } from \"ol/loadingstrategy\";\nimport { Select, Modify, Draw, Translate } from \"ol/interaction\";\nimport { never } from \"ol/events/condition\";\nimport X2JS from \"x2js\";\nimport { hfetch } from \"utils/FetchWrapper\";\n\nclass EditModel {\n  constructor(settings) {\n    this.map = settings.map;\n    this.app = settings.app;\n    this.observer = settings.observer;\n    this.options = settings.options;\n\n    this.activeServices = this.options.activeServices;\n    this.sources = this.options.sources;\n\n    this.vectorSource = undefined;\n    this.layer = undefined;\n    this.select = undefined;\n    this.modify = undefined;\n    this.key = undefined;\n    this.editFeature = undefined;\n    this.editFeatureBackup = undefined;\n    this.editSource = undefined;\n    this.removeFeature = undefined;\n    this.shell = undefined;\n    this.instruction = \"\";\n    this.filty = false;\n    this.removalToolMode = \"off\";\n\n    // Normalize the sources that come from options.\n    this.options.sources = this.options.sources.map((s) => {\n      // Namespace URI is required for insert. QGIS Server tends to accept this value.\n      if (s.uri.trim().length === 0) {\n        s.uri = \"http://www.opengis.net/wfs\";\n      }\n\n      // Get rid of the SERVICE=WFS attribute if existing: we will add it on the following requests\n      // while QGIS Server's WFS endpoint requires the SERVICE parameter to be preset. We'd\n      // end up with duplicate parameters, so the safest way around is to remove it, in a controlled\n      // manner, without disturbing the URL.\n      const url = new URL(s.url);\n      url.searchParams.delete(\"service\");\n      s.url = url.href;\n\n      return s;\n    });\n  }\n\n  write(features) {\n    var format = new WFS(),\n      lr = this.editSource.layers[0].split(\":\"),\n      fp = lr.length === 2 ? lr[0] : \"\",\n      ft = lr.length === 2 ? lr[1] : lr[0],\n      options = {\n        featureNS: this.editSource.uri,\n        featurePrefix: fp,\n        featureType: ft,\n        hasZ: false,\n        version: \"1.1.0\", // or \"1.0.0\"\n        srsName: this.editSource.projection,\n      };\n\n    return format.writeTransaction(\n      features.inserts,\n      features.updates,\n      features.deletes,\n      options\n    );\n  }\n\n  refreshLayer(layerName) {\n    var source,\n      foundLayer = this.map\n        .getLayers()\n        .getArray()\n        .find((layer) => {\n          var match = false;\n          if (layer.getSource().getParams) {\n            let params = layer.getSource().getParams();\n            if (typeof params === \"object\") {\n              // FIXME: Can be a bug here: we can't expect our edited layer to always be of index 0 if a LayerGroup (which gives Array so we must handle that as well)\n              let paramName = Array.isArray(params.LAYERS)\n                ? params.LAYERS[0].split(\":\")\n                : params.LAYERS.split(\":\");\n              let layerSplit = layerName.split(\":\");\n              if (paramName.length === 2 && layerSplit.length === 2) {\n                match = layerName === params.LAYERS;\n              }\n              if (paramName.length === 1) {\n                match = layerSplit[1] === params.LAYERS;\n              }\n            }\n          }\n          return match;\n        });\n\n    if (foundLayer) {\n      source = foundLayer.getSource();\n      source.changed();\n      source.updateParams({ time: Date.now() });\n      this.map.updateSize();\n    }\n  }\n\n  parseWFSTresponse(response) {\n    var str =\n      typeof response !== \"string\"\n        ? new XMLSerializer().serializeToString(response)\n        : response;\n    return new X2JS().xml2js(str);\n  }\n\n  transact(features, done) {\n    var node = this.write(features),\n      serializer = new XMLSerializer(),\n      src = this.editSource,\n      payload = node ? serializer.serializeToString(node) : undefined;\n\n    if (payload) {\n      hfetch(src.url, {\n        method: \"POST\",\n        body: payload,\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"text/xml\",\n        },\n      })\n        .then((response) => {\n          response.text().then((wfsResponseText) => {\n            const resXml = this.parseWFSTresponse(wfsResponseText);\n            if (resXml.ExceptionReport || !resXml.TransactionResponse) {\n              // do not delete the data so the user can submit it again\n              done(resXml);\n            } else {\n              this.refreshLayer(src.layers[0]);\n              this.vectorSource\n                .getFeatures()\n                .filter((f) => f.modification !== undefined)\n                .forEach((f) => (f.modification = undefined));\n              done(resXml);\n            }\n          });\n        })\n        .catch((response) => {\n          response.text().then((errorMessage) => {\n            done(errorMessage);\n          });\n        });\n    }\n  }\n\n  save(done) {\n    const find = (mode) =>\n      this.vectorSource\n        .getFeatures()\n        .filter((feature) => feature.modification === mode);\n\n    const features = {\n      updates: find(\"updated\").map((feature) => {\n        feature.unset(\"boundedBy\");\n        return feature;\n      }),\n      inserts: find(\"added\"),\n      deletes: find(\"removed\"),\n    };\n\n    if (\n      features.updates.length === 0 &&\n      features.inserts.length === 0 &&\n      features.deletes.length === 0\n    ) {\n      return done();\n    }\n\n    this.transact(features, done);\n  }\n\n  getSelectStyle(feature) {\n    return [\n      new Style({\n        stroke: new Stroke({\n          color: \"rgba(0, 255, 255, 1)\",\n          width: 3,\n        }),\n        fill: new Fill({\n          color: \"rgba(0, 0, 0, 0.5)\",\n        }),\n        image: new Circle({\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0.5)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(0, 255, 255, 1)\",\n            width: 2,\n          }),\n          radius: 3,\n        }),\n      }),\n      new Style({\n        image: new RegularShape({\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0.2)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(0, 0, 0, 1)\",\n            width: 2,\n          }),\n          points: 4,\n          radius: 8,\n          angle: Math.PI / 4,\n        }),\n        geometry: (feature) => {\n          var coordinates =\n            feature.getGeometry() instanceof Polygon\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n          return new MultiPoint(coordinates);\n        },\n      }),\n    ];\n  }\n\n  getVectorStyle(feature) {\n    return [\n      new Style({\n        stroke: new Stroke({\n          color: \"rgba(0, 0, 0, 1)\",\n          width: 3,\n        }),\n        fill: new Fill({\n          color: \"rgba(0, 0, 0, 0.5)\",\n        }),\n        image: new Circle({\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0.5)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(0, 0, 0, 1)\",\n            width: 3,\n          }),\n          radius: 4,\n        }),\n      }),\n    ];\n  }\n\n  getHiddenStyle(feature) {\n    return [\n      new Style({\n        stroke: new Stroke({\n          color: \"rgba(0, 0, 0, 0)\",\n          width: 0,\n        }),\n        fill: new Fill({\n          color: \"rgba(1, 2, 3, 0)\",\n        }),\n        image: new Circle({\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(0, 0, 0, 0)\",\n            width: 0,\n          }),\n          radius: 0,\n        }),\n      }),\n    ];\n  }\n\n  getSketchStyle() {\n    return [\n      new Style({\n        fill: new Fill({\n          color: \"rgba(255, 255, 255, 0.5)\",\n        }),\n        stroke: new Stroke({\n          color: \"rgba(0, 0, 0, 0.5)\",\n          width: 4,\n        }),\n        image: new Circle({\n          radius: 6,\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0.5)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(255, 255, 255, 0.5)\",\n            width: 2,\n          }),\n        }),\n      }),\n    ];\n  }\n\n  filterByDefaultValue(features) {\n    return features.filter((feature) => {\n      return this.editSource.editableFields.some((field) => {\n        var value = feature.getProperties()[field.name];\n        if (field.hidden && value === field.defaultValue) {\n          return true;\n        }\n        return false;\n      });\n    });\n  }\n\n  loadDataSuccess = (data) => {\n    var format = new WFS();\n    var features;\n    try {\n      features = format.readFeatures(data);\n    } catch (e) {\n      alert(\"Fel: data kan inte läsas in. Kontrollera koordinatsystem.\");\n    }\n\n    // Make sure we have a name for geometry column. If there are features already,\n    // take a look at the first one and get geometry field's name from that first feature.\n    // If there are no features however, default to 'geom'. If we don't then OL will\n    // fallback to its own default geometry field name, which happens to be 'geometry' and not 'geom.\n    this.geometryName =\n      features.length > 0 ? features[0].getGeometryName() : \"geom\";\n\n    if (this.editSource.editableFields.some((field) => field.hidden)) {\n      features = this.filterByDefaultValue(features);\n    }\n\n    this.vectorSource.addFeatures(features);\n    this.vectorSource.getFeatures().forEach((feature) => {\n      feature.on(\"propertychange\", (e) => {\n        if (feature.modification === \"removed\") {\n          return;\n        }\n        if (feature.modification === \"added\") {\n          return;\n        }\n        feature.modification = \"updated\";\n      });\n      feature.on(\"change\", (e) => {\n        if (feature.modification === \"removed\") {\n          return;\n        }\n        if (feature.modification === \"added\") {\n          return;\n        }\n        feature.modification = \"updated\";\n      });\n    });\n  };\n\n  loadData(source, extent, done) {\n    // Prepare the URL for retrieving WFS data. We will want to set\n    // some search params later on, but we want to avoid any duplicates.\n    // The values we will set below should override any existing, if\n    // same key already exists in URL.\n    // To ensure it will happen, we read the possible current params…\n    const url = new URL(source.url);\n\n    // …and make sure that the keys are in UPPER CASE.\n    const existingSearchParams = {};\n    for (const [k, v] of url.searchParams.entries()) {\n      existingSearchParams[k.toUpperCase()] = v;\n    }\n\n    // Now we merge the possible existing params with the rest, defined\n    // below. We can be confident that we won't have duplicates and that\n    // our values \"win\", as they are defined last.\n    const mergedSearchParams = {\n      ...existingSearchParams,\n      SERVICE: \"WFS\",\n      VERSION: \"1.1.0\",\n      REQUEST: \"GetFeature\",\n      TYPENAME: source.layers[0],\n      SRSNAME: source.projection,\n    };\n\n    // Create a new URLSearchParams object from the merged object…\n    const searchParams = new URLSearchParams(mergedSearchParams);\n    // …and update our URL's search string with the new value\n    url.search = searchParams.toString();\n\n    // Send a String as HFetch doesn't currently accept true URL objects\n    hfetch(url.toString())\n      .then((response) => {\n        if (response.status !== 200) {\n          return done(\"data-load-error\");\n        }\n        response.text().then((data) => {\n          if (data.includes(\"ows:ExceptionReport\")) {\n            return done(\"data-load-error\");\n          }\n          this.loadDataSuccess(data);\n          return done(\"data-load-success\");\n        });\n      })\n      .catch((error) => {\n        console.warn(`Error loading vectorsource... ${error}`);\n        return done(\"data-load-error\");\n      });\n  }\n\n  editAttributes(feature) {\n    this.editFeature = feature;\n    this.observer.publish(\"editFeature\", feature);\n  }\n\n  featureSelected(event) {\n    if (event.selected.length === 0) {\n      this.editAttributes(null, null);\n    }\n\n    event.selected.forEach((feature) => {\n      if (!feature.getId() && feature.getProperties().user) {\n        this.select.getFeatures().remove(feature);\n      }\n      event.mapBrowserEvent.filty = true;\n      this.editAttributes(feature);\n    });\n  }\n\n  refreshEditingLayer() {\n    var mapLayers = this.map\n      .getLayers()\n      .getArray()\n      .filter(\n        (layer) => layer.getProperties().caption === this.editSource.caption\n      );\n\n    mapLayers.forEach((mapLayer) => {\n      if (mapLayer.getSource) {\n        let s = mapLayer.getSource();\n        if (s.clear) {\n          s.clear();\n        }\n        if (s.getParams) {\n          var params = s.getParams();\n          params.t = new Date().getMilliseconds();\n          s.updateParams(params);\n        }\n        if (s.changed) {\n          s.changed();\n        }\n      }\n    });\n  }\n\n  setLayer(serviceId, done) {\n    this.source = this.sources.find((source) => source.id === serviceId);\n    this.filty = true;\n    this.vectorSource = new VectorSource({\n      loader: (extent) => this.loadData(this.source, extent, done),\n      strategy: strategyAll,\n      projection: this.source.projection,\n    });\n\n    this.layer = new Vector({\n      layerType: \"system\",\n      zIndex: 5000,\n      name: \"pluginEdit\",\n      caption: \"Edit layer\",\n      source: this.vectorSource,\n      style: this.getVectorStyle(),\n    });\n\n    if (this.layer) {\n      this.map.removeLayer(this.layer);\n    }\n\n    this.map.addLayer(this.layer);\n    this.editSource = this.source;\n    this.editFeature = null;\n    this.observer.publish(\"editSource\", this.source);\n    this.observer.publish(\"editFeature\", null);\n    this.observer.publish(\"layerChanged\", this.layer);\n  }\n\n  activateModify() {\n    this.select = new Select({\n      style: this.getSelectStyle(),\n      toggleCondition: never,\n      layers: [this.layer],\n    });\n\n    this.select.on(\"select\", (event) => {\n      this.featureSelected(event, this.source);\n    });\n\n    this.modify = new Modify({\n      features: this.select.getFeatures(),\n    });\n    this.map.addInteraction(this.select);\n    this.map.addInteraction(this.modify);\n  }\n\n  activateAdd(geometryType) {\n    this.draw = new Draw({\n      source: this.vectorSource,\n      style: this.getSketchStyle(),\n      type: geometryType,\n      stopClick: true,\n      geometryName: this.geometryName,\n    });\n    this.draw.on(\"drawend\", (event) => {\n      event.feature.modification = \"added\";\n      this.editAttributes(event.feature);\n      // OpenLayers seems to have a problem stopping the clicks if\n      // the draw interaction is removed too early. This fix is not pretty,\n      // but it gets the job done. It seems to be enough to remove the draw\n      // interaction after one cpu-cycle.\n      // If this is not added, the user will get a zoom-event when closing\n      // a polygon drawing.\n      setTimeout(() => {\n        this.deactivateInteraction();\n      }, 1);\n    });\n    this.map.addInteraction(this.draw);\n    this.map.clickLock.add(\"edit\");\n  }\n\n  activateRemove() {\n    this.remove = true;\n    this.map.on(\"singleclick\", this.removeSelected);\n  }\n\n  activateMove() {\n    this.move = new Translate({\n      layers: [this.layer],\n    });\n    this.map.addInteraction(this.move);\n  }\n\n  activateInteraction(type, geometryType) {\n    if (type === \"add\") {\n      this.activateAdd(geometryType);\n    }\n    if (type === \"move\") {\n      this.activateMove();\n    }\n    if (type === \"modify\") {\n      this.activateModify();\n    }\n    if (type === \"remove\") {\n      this.map.clickLock.add(\"edit\");\n      this.activateRemove();\n    }\n\n    // Add snap after all interactions have been added\n    this.map.snapHelper.add(\"measure\");\n  }\n\n  removeSelected = (e) => {\n    this.map.forEachFeatureAtPixel(e.pixel, (feature) => {\n      if (this.vectorSource.getFeatures().some((f) => f === feature)) {\n        if (feature.modification === \"added\") {\n          feature.modification = undefined;\n        } else {\n          feature.modification = \"removed\";\n        }\n        feature.setStyle(this.getHiddenStyle());\n      }\n    });\n  };\n\n  deactivateInteraction() {\n    // First remove the snap interaction\n    this.map.snapHelper.delete(\"measure\");\n\n    // Next, remove correct map interaction\n    if (this.select) {\n      this.map.removeInteraction(this.select);\n    }\n    if (this.modify) {\n      this.map.removeInteraction(this.modify);\n    }\n    if (this.draw) {\n      this.map.removeInteraction(this.draw);\n    }\n    if (this.move) {\n      this.map.removeInteraction(this.move);\n    }\n    if (this.remove) {\n      this.remove = false;\n      this.map.clickLock.delete(\"edit\");\n      this.map.un(\"singleclick\", this.removeSelected);\n    }\n  }\n\n  reset() {\n    this.editSource = undefined;\n    this.editFeature = undefined;\n    this.removeFeature = undefined;\n    this.removalToolMode = \"off\";\n    this.filty = false;\n    this.map.clickLock.delete(\"edit\");\n\n    if (this.layer) {\n      this.map.removeLayer(this.layer);\n      this.layer = undefined;\n    }\n    this.deactivateInteraction();\n  }\n\n  resetEditFeature = () => {\n    this.editFeatureBackup = this.editFeature;\n    this.editFeature = undefined;\n    this.observer.publish(\"editFeature\", this.editFeature);\n  };\n\n  deactivate() {\n    this.reset();\n    this.observer.publish(\"editFeature\", this.editFeature);\n    this.observer.publish(\"editSource\", this.editSource);\n    this.observer.publish(\"deactivate\");\n  }\n\n  getSources() {\n    return this.options.sources;\n  }\n}\n\nexport default EditModel;\n"],"names":["EditModel","settings","loadDataSuccess","data","features","format","WFS","readFeatures","e","alert","geometryName","length","getGeometryName","editSource","editableFields","some","field","hidden","filterByDefaultValue","vectorSource","addFeatures","getFeatures","forEach","feature","on","modification","removeSelected","map","forEachFeatureAtPixel","pixel","f","undefined","setStyle","getHiddenStyle","resetEditFeature","editFeatureBackup","editFeature","observer","publish","this","app","options","activeServices","sources","layer","select","modify","key","removeFeature","shell","instruction","filty","removalToolMode","s","uri","trim","url","URL","searchParams","delete","href","lr","layers","split","fp","ft","featureNS","featurePrefix","featureType","hasZ","version","srsName","projection","writeTransaction","inserts","updates","deletes","layerName","source","foundLayer","getLayers","getArray","find","match","getSource","getParams","params","paramName","Array","isArray","LAYERS","layerSplit","changed","updateParams","time","Date","now","updateSize","response","str","XMLSerializer","serializeToString","X2JS","xml2js","done","node","write","serializer","src","payload","hfetch","method","body","credentials","headers","then","text","wfsResponseText","resXml","parseWFSTresponse","ExceptionReport","TransactionResponse","refreshLayer","filter","catch","errorMessage","mode","unset","transact","Style","stroke","Stroke","color","width","fill","Fill","image","Circle","radius","RegularShape","points","angle","Math","PI","geometry","coordinates","getGeometry","Polygon","getCoordinates","MultiPoint","value","getProperties","name","defaultValue","extent","existingSearchParams","entries","k","v","toUpperCase","mergedSearchParams","SERVICE","VERSION","REQUEST","TYPENAME","SRSNAME","URLSearchParams","search","toString","status","includes","error","console","warn","event","selected","editAttributes","getId","user","remove","mapBrowserEvent","caption","mapLayer","clear","t","getMilliseconds","serviceId","id","VectorSource","loader","loadData","strategy","strategyAll","Vector","layerType","zIndex","style","getVectorStyle","removeLayer","addLayer","Select","getSelectStyle","toggleCondition","never","featureSelected","Modify","addInteraction","geometryType","draw","Draw","getSketchStyle","type","stopClick","setTimeout","deactivateInteraction","clickLock","add","move","Translate","activateAdd","activateMove","activateModify","activateRemove","snapHelper","removeInteraction","un","reset"],"sourceRoot":""}
{"version":3,"file":"static/js/6187.ce22affe.chunk.js","mappings":"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","sources":["plugins/Sketch/models/SketchModel.js"],"sourcesContent":["import { ACTIVITIES, MAX_REMOVED_FEATURES } from \"../constants\";\nimport LocalStorageHelper from \"../../../utils/LocalStorageHelper\";\nimport { Circle, Fill, Stroke, Style } from \"ol/style\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport { Circle as CircleGeometry, Point } from \"ol/geom\";\nimport { Feature } from \"ol\";\n\nimport {\n  DEFAULT_DRAW_STYLE_SETTINGS,\n  DEFAULT_TEXT_STYLE_SETTINGS,\n  STROKE_DASHES,\n  MAX_LS_CHARS,\n  PROMPT_TEXTS,\n} from \"../constants\";\n\nclass SketchModel {\n  #geoJSONParser;\n  #storageKey;\n  #dateTimeOptions;\n  #drawModel;\n  #showHelperSnacks;\n\n  constructor(settings) {\n    this.#geoJSONParser = new GeoJSON();\n    this.#storageKey = settings.storageKey || \"sketch\";\n    this.#dateTimeOptions = {\n      day: \"numeric\",\n      month: \"numeric\",\n      year: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n    };\n    this.#drawModel = settings.drawModel;\n    this.#showHelperSnacks = this.#getDefaultShowHelperSnacks();\n  }\n\n  // Returns the default value regarding wether helper-snacks should be shown or not.\n  // (Value from LS or defaults to true).\n  #getDefaultShowHelperSnacks = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"showHelperSnacks\"] ?? true;\n  };\n\n  #setSketchKeyInStorage = (key, value) => {\n    LocalStorageHelper.set(this.#storageKey, {\n      ...LocalStorageHelper.get(this.#storageKey),\n      [key]: value,\n    });\n  };\n\n  // Updates the removed features in the local-storage\n  #setStoredRemovedFeatures = (removedFeatures) => {\n    this.#setSketchKeyInStorage(\"removedFeatures\", removedFeatures);\n  };\n\n  // Updates the stored sketches in the local-storage\n  #setStoredSketches = (sketches) => {\n    this.#setSketchKeyInStorage(\"sketches\", sketches);\n  };\n\n  // Updates the stored draw-style-settings in the local-storage.\n  // Exposed so direct calls from view is possible.\n  setStoredDrawStyleSettings = (settings) => {\n    this.#setSketchKeyInStorage(\"drawStyleSettings\", settings);\n  };\n\n  // Updates the stored text-style-settings in the local-storage\n  // Exposed so direct calls from view is possible.\n  setStoredTextStyleSettings = (settings) => {\n    this.#setSketchKeyInStorage(\"textStyleSettings\", settings);\n  };\n\n  // Creates an object containing all the supplied properties along with\n  // all the (not currently hidden) features currently in the sketch-layer.\n  #createSketchObject = (sketchInformation) => {\n    return {\n      ...sketchInformation,\n      id: this.generateRandomString(),\n      date: this.getDateTimeString(),\n      features: this.#drawModel\n        .getAllDrawnFeatures()\n        .filter((f) => f.get(\"HIDDEN\") !== true)\n        .map((f) => this.#prepareFeatureForStorage(f)),\n    };\n  };\n\n  // Since we cannot save the OL-features directly in local-storage without\n  // loosing some information, we'll have to parse the feature to a geoJSON\n  // before we store it. We also have to decorate the feature with some style-information\n  // so that we can extract the style when adding the feature to the map again;\n  #prepareFeatureForStorage = (f) => {\n    // So first, we'll decorate the feature with its style-information\n    f.set(\"EXTRACTED_STYLE\", this.#drawModel.extractFeatureStyleInfo(f));\n    // If the feature to be saved consists of a Circle-geometry we have to\n    // update the geometry to something that geoJSON can handle.\n    if (f.getGeometry() instanceof CircleGeometry) {\n      this.#createFriendlyCircleGeom(f);\n    }\n    // Then we'll create the geoJSON, and return that.\n    return this.#geoJSONParser.writeFeature(f);\n  };\n\n  // Returns the helper text for the supplied activity and draw-type\n  getHelperSnackText = (activity, drawType) => {\n    // If we're nto supposed to show helper-snacks, let's return null so\n    // that no snack will be shown.\n    if (!this.#showHelperSnacks) {\n      return null;\n    }\n    // Otherwise we'll check the current activity and so on...\n    switch (activity) {\n      case \"ADD\":\n        // If we're in the add-view, we want to prompt the user with\n        // information regarding the current draw-type.\n        return PROMPT_TEXTS[`${drawType}Help`];\n      default:\n        // If we're not in the add-view, we want to prompt the user\n        // with information regarding the current view (activity).\n        return PROMPT_TEXTS[`${activity}Help`];\n    }\n  };\n\n  // Returns the draw-style-settings stored in LS, or the default draw-style-settings.\n  getDrawStyleSettings = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"drawStyleSettings\"] || DEFAULT_DRAW_STYLE_SETTINGS;\n  };\n\n  // Returns the text-style-settings stored in LS, or the default text-style-settings.\n  getTextStyleSettings = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    return inStorage[\"textStyleSettings\"] || DEFAULT_TEXT_STYLE_SETTINGS;\n  };\n\n  // Returns the activity-object connected to the supplied id\n  getActivityFromId = (id) => {\n    return ACTIVITIES.find((activity) => {\n      return activity.id === id;\n    });\n  };\n\n  // Returns the current date and time on YYYY-MM-DD HH:MM:SS\n  getDateTimeString = (options) => {\n    const date = new Date();\n    return date.toLocaleString(\"default\", options || this.#dateTimeOptions);\n  };\n\n  // Generates a random string that can be used as an ID.\n  generateRandomString = () => {\n    return Math.random().toString(36).slice(2, 9);\n  };\n\n  // Accepts an array containing the line-dash, and returns the line (stroke) type\n  // that corresponds to that value.\n  #getStrokeType = (lineDash) => {\n    for (const [key, value] of STROKE_DASHES.entries()) {\n      // The value and actual line-dash might be null, lets check if they\n      // both are: (If they are, the line-type is \"solid\").\n      if (value === lineDash) {\n        return key;\n      }\n      // The value might also be an array, and \"===\" will therefore check for reference equality.\n      // Which will obviously not work, since they are not pointing to the same object. Instead,\n      // let's check if the arrays has the same content. (We don't care about the array order).\n      if (\n        Array.isArray(value) &&\n        Array.isArray(lineDash) &&\n        value.every((v) => lineDash.includes(v))\n      ) {\n        return key;\n      }\n    }\n    // If it wasn't found, we'll log an error and return null.\n    console.error(\n      `Could not find corresponding stroke-type from supplied line-dash. The supplied line-dash was: ${lineDash}`\n    );\n    return null;\n  };\n\n  // Extract the style settings from the supplied object and returns an object\n  // with the color settings converted to string to comply with OL.\n  #extractStyleSettings = (settings) => {\n    const { strokeColor, fillColor, strokeWidth, lineDash } = settings;\n    const strokeColorString = this.#drawModel.getRGBAString(strokeColor);\n    const fillColorString = this.#drawModel.getRGBAString(fillColor);\n    return {\n      strokeColor: strokeColorString,\n      fillColor: fillColorString,\n      strokeWidth,\n      lineDash,\n    };\n  };\n\n  // Creates a circle-style that can be used within an image-style.\n  #createImageStyle = (settings) => {\n    return new Circle({\n      radius: 6,\n      stroke: new Stroke({\n        color: settings.strokeColor,\n        width: settings.strokeWidth,\n        lineDash: settings.lineDash,\n      }),\n      fill: new Fill({\n        color: settings.fillColor,\n      }),\n    });\n  };\n\n  #createHighlightStyle = () => {\n    return new Style({\n      stroke: new Stroke({\n        color: \"rgba(255, 0, 0, 1)\",\n        width: 3,\n      }),\n      fill: new Fill({\n        color: \"rgba(255, 0, 0, 0.1)\",\n      }),\n    });\n  };\n\n  // Accepts a feature with a Circle-geometry and updates the feature-geometry\n  // to a Point-geometry along with an additional property (\"CIRCLE_RADIUS\") that can\n  // be used to construct a \"real\" Circle-geometry when the feature is to be added to\n  // a map. This is done since the geoJSON-standard does not accept Circle-geometries.\n  #createFriendlyCircleGeom = (feature) => {\n    try {\n      const geometry = feature.getGeometry();\n      const center = geometry.getCenter();\n      const radius = geometry.getRadius();\n      feature.set(\"CIRCLE_RADIUS\", radius);\n      feature.set(\"CIRCLE_CENTER\", JSON.stringify(center));\n      feature.setGeometry(new Point(center));\n    } catch (error) {\n      console.error(\n        `Could not create a geoJSON-friendly circle-geometry. Error: ${error}`\n      );\n    }\n  };\n\n  // Returns wether the supplied sketch is OK to save in LS. There is a possibility\n  // that the supplied sketch is too complex (meaning that the resulting object will\n  // be too large to save).\n  #getSketchOkForLS = (sketch) => {\n    try {\n      // First we'll stringify the supplied sketch (an object).\n      const stringLength = JSON.stringify(sketch).length;\n      // And make sure the resulting string contains less characters\n      // than what is allowed in the LS.\n      return stringLength < MAX_LS_CHARS;\n    } catch (error) {\n      console.error(`Failed to parse supplied sketch. Error: ${error}`);\n      return false;\n    }\n  };\n\n  // Returns the feature-style in a form that fits the feature-style-editor\n  getFeatureStyle = (feature) => {\n    try {\n      // We're gonna need the base-style of the feature\n      const featureBaseStyle = this.#drawModel.extractFeatureStyleInfo(feature);\n      // Then we'll extract the text-settings. (These might be undefined, and\n      // are only set if we are dealing with a text-feature).\n      const featureTextStyle = feature.get(\"TEXT_SETTINGS\");\n      // Then we'll construct the feature-style-object and return it.\n      return {\n        strokeColor: this.#drawModel.parseColorString(\n          featureBaseStyle?.strokeStyle.color\n        ),\n        lineDash: featureBaseStyle?.strokeStyle.dash,\n        strokeWidth: featureBaseStyle?.strokeStyle.width,\n        strokeType: this.#getStrokeType(featureBaseStyle?.strokeStyle.dash),\n        fillColor: this.#drawModel.parseColorString(\n          featureBaseStyle?.fillStyle.color\n        ),\n        textForegroundColor: featureTextStyle?.foregroundColor,\n        textBackgroundColor: featureTextStyle?.backgroundColor,\n        textSize: featureTextStyle?.size,\n      };\n    } catch (error) {\n      console.error(`Failed to get feature-style: Error: ${error}`);\n      return null;\n    }\n  };\n\n  // Applies the supplied style on the supplied feature.\n  setFeatureStyle = (feature, styleSettings) => {\n    try {\n      // First we'll have to get the base-style. (If we're dealing\n      // with an arrow-feature, the base-style is the first element of the array\n      // returned from the getStyle-method).\n      const featureStyle = Array.isArray(feature.getStyle())\n        ? feature.getStyle()[0]\n        : feature.getStyle();\n      // Then we'll get the stroke and text-style\n      const fillStyle = featureStyle.getFill();\n      const strokeStyle = featureStyle.getStroke();\n      const imageStyle = featureStyle.getImage();\n\n      const { fillColor, strokeColor, strokeWidth, lineDash } =\n        this.#extractStyleSettings(styleSettings);\n\n      fillStyle.setColor(fillColor);\n      strokeStyle.setColor(strokeColor);\n      strokeStyle.setWidth(strokeWidth);\n      strokeStyle.setLineDash(lineDash);\n      // Unfortunately, the feature-image-style does not update by re-setting the\n      // stroke- and fill-settings within the image-style. Instead, a new image-style\n      // has to be created.\n      imageStyle &&\n        featureStyle.setImage(\n          this.#createImageStyle({\n            fillColor,\n            strokeColor,\n            strokeWidth,\n            lineDash,\n          })\n        );\n\n      // If we're dealing with a text.feature, the text-style-settings must be updated as well.\n      if (feature.get(\"DRAW_METHOD\") === \"Text\") {\n        feature.set(\"TEXT_SETTINGS\", {\n          size: styleSettings.textSize,\n          foregroundColor: styleSettings.textForegroundColor,\n          backgroundColor: styleSettings.textBackgroundColor,\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to apply the supplied style. Error: ${error}`);\n    }\n  };\n\n  // When a feature is removed, we should usually add it to the list of\n  // removed features. However, there are a couple of cases where we should not!\n  // -1: If we've added a text-feature, and the user has chosen to abort the\n  // input of text to apply to the feature, we make sure to remove it, and\n  // that removed feature should not be shown in the list of removed features.\n  // -2: If the feature is currently hidden, we shouldn't add it to the storage.\n  featureShouldBeAddedToStorage = (feature) => {\n    return (\n      !(feature.get(\"DRAW_METHOD\") === \"Text\" && !feature.get(\"USER_TEXT\")) ||\n      feature.get(\"HIDDEN\") === true\n    );\n  };\n\n  // We're gonna need to set some properties on the handled feature so that we can keep\n  // track of it. (The \"HANDLED_AT\" prop will show the user at what time the feature was\n  // removed, and the \"HANDLED_ID\" will be used if the user choses to restore the feature).\n  decorateFeature = (feature) => {\n    feature.set(\n      \"EXTRACTED_STYLE\",\n      this.#drawModel.extractFeatureStyleInfo(feature)\n    );\n    feature.set(\"HANDLED_AT\", this.getDateTimeString());\n    feature.set(\"HANDLED_ID\", this.generateRandomString());\n    // If the feature to be saved consists of a Circle-geometry we have to\n    // update the geometry to something that geoJSON can handle.\n    if (feature.getGeometry() instanceof CircleGeometry) {\n      this.#createFriendlyCircleGeom(feature);\n    }\n  };\n\n  // Returns the earlier removed features which are stored in local-storage\n  // If the first parameter is omitted, the method will return parsed OL-features,\n  // otherwise, it will return the actual local-storage value.\n  getRemovedFeaturesFromStorage = (returnType = \"FEATURES\") => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    const storedFeatures = inStorage[\"removedFeatures\"] || [];\n    return returnType === \"FEATURES\"\n      ? storedFeatures.map((parsedFeature) =>\n          this.#geoJSONParser.readFeature(parsedFeature)\n        )\n      : storedFeatures;\n  };\n\n  // Returns sketches that has been saved to local-storage.\n  getSketchesFromStorage = () => {\n    const inStorage = LocalStorageHelper.get(this.#storageKey);\n    const storedSketches = inStorage[\"sketches\"] || [];\n    return storedSketches;\n  };\n\n  // Updates the local-storage by adding the removed feature and potentially\n  // removing old removed features. (We want to keep a maximum of MAX_REMOVED_FEATURES).\n  addFeatureToStorage = (feature) => {\n    const removedFeatures = this.getRemovedFeaturesFromStorage(\"STRINGS\");\n    const parsedFeature = this.#geoJSONParser.writeFeature(feature);\n    this.#setStoredRemovedFeatures([\n      parsedFeature,\n      ...removedFeatures.slice(0, MAX_REMOVED_FEATURES - 1),\n    ]);\n  };\n\n  // Updates the local-storage by adding a new sketch containing all the features currently\n  // in the the sketch-layer. If a sketch with the same id as the one supplied one already exist,\n  // the already stored sketch will be over-written.\n  addCurrentSketchToStorage = (sketchInfo) => {\n    // First we'll create a sketch (an object containing the supplied sketch-information along with the\n    // features currently existing in the sketch-layer).\n    const sketch = this.#createSketchObject(sketchInfo);\n    // Then we'll make sure there are some features to save. (If no features\n    // are present in the sketch, theres no point in saving a sketch).\n    const { features } = sketch;\n    if (!features || features.length === 0) {\n      return {\n        status: \"FAILED\",\n        message: PROMPT_TEXTS.saveNoFeatures,\n      };\n    }\n    // Then we have to make sure that the sketch is not to big (complex)\n    // for storage in the LS.\n    const sketchOkForLS = this.#getSketchOkForLS(sketch);\n    // If the sketch is not OK to save, we abort.\n    if (!sketchOkForLS) {\n      return {\n        status: \"FAILED\",\n        message: PROMPT_TEXTS.saveOverflow,\n      };\n    }\n    // Then we'll make sure to remove any potential sketch (with same title) already in storage.\n    // We do this since we don't allow for multiple sketches with the same title.\n    this.removeSketchFromStorage(sketchInfo);\n    // Then we'll get all the currently stored sketches.\n    const storedSketches = this.getSketchesFromStorage();\n    // Then we'll update the stored sketches with the supplied one.\n    this.#setStoredSketches([sketch, ...storedSketches]);\n    // Finally, we'll make sure to refresh the map by removing all drawn features,\n    // and re-add the current sketch.\n    this.#drawModel.removeDrawnFeatures();\n    this.addSketchToMap(sketch);\n    return { status: \"SUCCESS\", message: PROMPT_TEXTS.saveSuccess };\n  };\n\n  // Adds the features in the supplied sketch to the map by first parsing them\n  // (they are stored as geoJSON, and we want to add them as OL-features).\n  addSketchToMap = (sketch) => {\n    sketch.features.forEach((f) => {\n      this.#drawModel.addFeature(this.#geoJSONParser.readFeature(f));\n    });\n  };\n\n  // Updates the local-storage by removing the feature corresponding to the supplied id\n  removeFeatureFromStorage = (id) => {\n    const storedFeatures = this.getRemovedFeaturesFromStorage(\"STRINGS\");\n    this.#setStoredRemovedFeatures(\n      storedFeatures.filter((f) => !f.includes(id))\n    );\n  };\n\n  // Updates the local-storage by removing the sketch corresponding to the supplied title.\n  // Why title and not an id? Since we dont allow for multiple sketches with the same title, we can\n  // use the title as an id. Another reason is that in some cases, we generate an id after we've made sure\n  // to remove potential sketches with the same title.\n  removeSketchFromStorage = (sketch) => {\n    const storedSketches = this.getSketchesFromStorage();\n    this.#setStoredSketches(\n      storedSketches.filter(\n        (s) => !this.equalsIgnoringCase(s.title, sketch.title)\n      )\n    );\n  };\n\n  // Checks if two strings are equal, ignoring case.\n  equalsIgnoringCase = (s1, s2) => {\n    // If two strings were not supplied, we'll return false.\n    if (typeof s1 !== \"string\" || typeof s2 !== \"string\") {\n      return false;\n    }\n    // Otherwise we'll return the result of a lowercase-compare.\n    return s1.toLowerCase() === s2.toLowerCase();\n  };\n\n  // Creates a new feature with the same geometry as the supplied one. The new\n  // feature can be used an an highlight, to show where the supplied feature is.\n  createHighlightFeature = (feature) => {\n    // If no feature (or a feature with no get-geometry) is supplied, we abort.\n    if (feature && feature.getGeometry()) {\n      // Otherwise we create a new feature...\n      const highlightFeature = new Feature({\n        geometry: feature.getGeometry().clone(),\n      });\n      // ...set an id and a highlight-style...\n      highlightFeature.setId(this.generateRandomString());\n      highlightFeature.setStyle(this.#createHighlightStyle());\n      // Finally we return the feature so that we can add it to the map etc.\n      return highlightFeature;\n    }\n  };\n\n  // Returns wether helper-snacks should be shown or not\n  getShowHelperSnacks = () => {\n    return this.#showHelperSnacks;\n  };\n\n  // Set wether helper-snacks should be shown or not.\n  setShowHelperSnacks = (showSnacks) => {\n    this.#showHelperSnacks = showSnacks;\n  };\n\n  // Returns the value of the FEATURE_TITLE-attribute (or an empty string if the attribute is not set).\n  getFeatureTitle = (feature) => {\n    // If no feature was supplied, or if the supplied 'feature' is not\n    // a feature, we'll return an empty string.\n    if (!(feature instanceof Feature)) {\n      return \"\";\n    }\n    // Otherwise well return the value or an empty string.\n    return feature.get(\"FEATURE_TITLE\") ?? \"\";\n  };\n}\nexport default SketchModel;\n"],"names":["SketchModel","settings","LocalStorageHelper","key","value","removedFeatures","sketches","setStoredDrawStyleSettings","setStoredTextStyleSettings","sketchInformation","id","generateRandomString","date","getDateTimeString","features","getAllDrawnFeatures","filter","f","get","map","set","extractFeatureStyleInfo","getGeometry","CircleGeometry","writeFeature","getHelperSnackText","activity","drawType","PROMPT_TEXTS","getDrawStyleSettings","DEFAULT_DRAW_STYLE_SETTINGS","getTextStyleSettings","DEFAULT_TEXT_STYLE_SETTINGS","getActivityFromId","ACTIVITIES","options","Date","toLocaleString","Math","random","toString","slice","lineDash","STROKE_DASHES","Array","isArray","every","v","includes","console","error","strokeColor","fillColor","strokeWidth","getRGBAString","Circle","radius","stroke","Stroke","color","width","fill","Fill","Style","feature","geometry","center","getCenter","getRadius","JSON","stringify","setGeometry","Point","sketch","length","MAX_LS_CHARS","getFeatureStyle","featureBaseStyle","featureTextStyle","parseColorString","strokeStyle","dash","strokeType","fillStyle","textForegroundColor","foregroundColor","textBackgroundColor","backgroundColor","textSize","size","setFeatureStyle","styleSettings","featureStyle","getStyle","getFill","getStroke","imageStyle","getImage","setColor","setWidth","setLineDash","setImage","featureShouldBeAddedToStorage","decorateFeature","getRemovedFeaturesFromStorage","returnType","inStorage","storedFeatures","parsedFeature","readFeature","getSketchesFromStorage","addFeatureToStorage","MAX_REMOVED_FEATURES","addCurrentSketchToStorage","sketchInfo","status","message","removeSketchFromStorage","storedSketches","removeDrawnFeatures","addSketchToMap","forEach","addFeature","removeFeatureFromStorage","s","equalsIgnoringCase","title","s1","s2","toLowerCase","createHighlightFeature","highlightFeature","Feature","clone","setId","setStyle","getShowHelperSnacks","setShowHelperSnacks","showSnacks","getFeatureTitle","this","GeoJSON","storageKey","day","month","year","hour","minute","second","drawModel"],"sourceRoot":""}
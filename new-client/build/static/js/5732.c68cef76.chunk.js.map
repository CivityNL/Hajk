{"version":3,"file":"static/js/5732.c68cef76.chunk.js","mappings":"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","sources":["plugins/Sketch/components/Information.js","plugins/Sketch/views/MoveView.js"],"sourcesContent":["import React from \"react\";\nimport { Paper, Typography } from \"@mui/material\";\n\n// A simple component showing the supplied text in a wrapper\nconst Information = ({ text }) => {\n  return (\n    <Paper style={{ width: \"100%\", padding: 8 }}>\n      <Typography align=\"center\" variant=\"body2\">\n        {text}\n      </Typography>\n    </Paper>\n  );\n};\n\nexport default Information;\n","import React from \"react\";\nimport { Button, Grid, Paper, TextField } from \"@mui/material\";\nimport { Tooltip, Typography, Switch } from \"@mui/material\";\nimport Information from \"../components/Information\";\n\nconst TranslateToggler = ({ translateEnabled, setTranslateEnabled }) => {\n  return (\n    <Paper style={{ padding: 8, marginTop: 8 }}>\n      <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n        <Typography variant=\"body2\">Tillåt fri förflyttning</Typography>\n        <Tooltip\n          disableInteractive\n          title={\n            translateEnabled\n              ? \"Avaktivera för att inte tillåta förflyttning av objekten i kartan.\"\n              : \"Aktivera för att tillåta förflyttning av objekten i kartan.\"\n          }\n        >\n          <Switch\n            checked={translateEnabled}\n            onChange={() => setTranslateEnabled(!translateEnabled)}\n            size=\"small\"\n            color=\"primary\"\n          />\n        </Tooltip>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst FeatureMoveSelector = (props) => {\n  // Handles change on the movement-length input. Makes sure that we're\n  // dealing with integers and updates the state.\n  const handleMovementLengthChange = (e) => {\n    const length = Math.floor(e.target.value);\n    props.setMovementLength(length);\n  };\n\n  // Handles change on the movement-angle input. Makes sure the angle is\n  // always between 0 and 360 and updates the state.\n  const handleMovementAngleChange = (e) => {\n    const angle = Math.floor(e.target.value);\n    const justifiedAngle =\n      angle >= 360 ? angle - 360 : angle < 0 ? 360 + angle : angle;\n    props.setMovementAngle(justifiedAngle);\n  };\n\n  // Handles user click on move-feature. Makes sure to trigger the move\n  // action and push the move-information onto the last-move-array so that\n  // the user can \"remove\" that action if it turned out wrong.\n  const handleMoveClick = () => {\n    // Let's get the values\n    const length = props.movementLength;\n    const angle = props.movementAngle;\n    // Then we trigger the action in the draw-model\n    props.drawModel.translateSelectedFeatures(\n      props.movementLength,\n      props.movementAngle\n    );\n    // Then we'll update the last-moves-state.\n    props.setLastMoves([...props.lastMoves, { length, angle }]);\n  };\n\n  // Handles user click on undo. Gets the last move from the move-state\n  // and triggers a move in the opposite direction. Also removes that move\n  // from the state.\n  const handleUndoClick = () => {\n    const moves = [...props.lastMoves];\n    const { length, angle } = moves.pop();\n    props.drawModel.translateSelectedFeatures(length, angle - 180);\n    props.setLastMoves(moves);\n  };\n\n  return (\n    <Paper style={{ padding: 8, marginTop: 8 }}>\n      <Grid container item justifyContent=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"body2\" align=\"center\">\n            Fast förflyttning\n          </Typography>\n        </Grid>\n        <Grid item xs={12} style={{ marginTop: 16 }}>\n          <Tooltip\n            disableInteractive\n            title=\"Ange hur många meter du vill flytta objekten.\"\n          >\n            <TextField\n              label=\"Förflyttningsavstånd (meter)\"\n              variant=\"outlined\"\n              fullWidth\n              type=\"number\"\n              size=\"small\"\n              value={props.movementLength}\n              onChange={handleMovementLengthChange}\n            />\n          </Tooltip>\n        </Grid>\n        <Grid item xs={12} style={{ marginTop: 16 }}>\n          <Tooltip\n            disableInteractive\n            title=\"Ange i vilken riktning du vill flytta objekten. 0 grader är rakt norrut, 90 grader är rakt åt öster, osv.\"\n          >\n            <TextField\n              label=\"Förflyttningsriktning (grader)\"\n              variant=\"outlined\"\n              fullWidth\n              type=\"number\"\n              size=\"small\"\n              value={props.movementAngle}\n              onChange={handleMovementAngleChange}\n            />\n          </Tooltip>\n        </Grid>\n        <Grid container spacing={1} style={{ marginTop: 8 }}>\n          <Grid item xs={6}>\n            <Button\n              variant=\"contained\"\n              fullWidth\n              size=\"small\"\n              onClick={handleUndoClick}\n              disabled={props.lastMoves.length === 0}\n            >\n              Ångra\n            </Button>\n          </Grid>\n          <Grid item xs={6}>\n            <Button\n              variant=\"contained\"\n              fullWidth\n              size=\"small\"\n              onClick={handleMoveClick}\n            >\n              Flytta\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst MoveView = (props) => {\n  // We're gonna need to keep track of the movement length and angle\n  const [movementLength, setMovementLength] = React.useState(100);\n  const [movementAngle, setMovementAngle] = React.useState(90);\n  // We also need to keep track of the last moves that has been done. These\n  // can be used so that the user can disregard moves if they happened to move\n  // something in the wrong direction.\n  const [lastMoves, setLastMoves] = React.useState([]);\n  // Let's destruct some props\n  const { drawModel, moveFeatures, translateEnabled, setTranslateEnabled } =\n    props;\n\n  // Let's use an effect that can reset the last moves when the current\n  // feature/features selected for movement changes.\n  React.useEffect(() => {\n    setLastMoves([]);\n  }, [moveFeatures]);\n\n  // We have to get some information about the current activity (view)\n  const activity = props.model.getActivityFromId(props.id);\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Information text={activity.information} />\n      </Grid>\n      <Grid item xs={12}>\n        <TranslateToggler\n          translateEnabled={translateEnabled}\n          setTranslateEnabled={setTranslateEnabled}\n        />\n        {moveFeatures.length > 0 && (\n          <FeatureMoveSelector\n            drawModel={drawModel}\n            lastMoves={lastMoves}\n            setLastMoves={setLastMoves}\n            movementLength={movementLength}\n            setMovementLength={setMovementLength}\n            movementAngle={movementAngle}\n            setMovementAngle={setMovementAngle}\n          />\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default MoveView;\n"],"names":["text","style","width","padding","align","variant","TranslateToggler","translateEnabled","setTranslateEnabled","marginTop","container","justifyContent","alignItems","disableInteractive","title","checked","onChange","size","color","FeatureMoveSelector","props","item","xs","label","fullWidth","type","value","movementLength","e","length","Math","floor","target","setMovementLength","movementAngle","angle","justifiedAngle","setMovementAngle","spacing","onClick","moves","lastMoves","pop","drawModel","translateSelectedFeatures","setLastMoves","disabled","React","moveFeatures","activity","model","getActivityFromId","id","information"],"sourceRoot":""}
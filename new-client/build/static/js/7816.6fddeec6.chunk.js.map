{"version":3,"file":"static/js/7816.6fddeec6.chunk.js","mappings":"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","sources":["plugins/LayerSwitcher/components/LayerGroup.js","plugins/LayerSwitcher/components/LayerItem.js"],"sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport LayerItem from \"./LayerItem.js\";\nimport { styled } from \"@mui/material/styles\";\nimport { Accordion, AccordionDetails, AccordionSummary } from \"@mui/material\";\nimport { Box, Typography } from \"@mui/material\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\n\nconst StyledAccordion = styled(Accordion)(() => ({\n  borderRadius: 0,\n  boxShadow: \"none\",\n  backgroundImage: \"none\",\n}));\n\nconst StyledAccordionSummary = styled(AccordionSummary)(() => ({\n  minHeight: 35,\n  padding: \"0px\",\n  overflow: \"hidden\",\n  \"&.MuiAccordionSummary-root.Mui-expanded\": {\n    minHeight: 35,\n  },\n  \"& .MuiAccordionSummary-content\": {\n    transition: \"inherit\",\n    marginTop: 0,\n    marginBottom: 0,\n    \"&.Mui-expanded\": {\n      marginTop: 0,\n      marginBottom: 0,\n    },\n  },\n}));\n\nconst StyledAccordionDetails = styled(AccordionDetails)(() => ({\n  width: \"100%\",\n  display: \"block\",\n  padding: \"0\",\n}));\n\nconst SummaryContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexBasis: \"100%\",\n  borderBottom: `${theme.spacing(0.2)} solid ${theme.palette.divider}`,\n}));\n\nconst HeadingTypography = styled(Typography)(({ theme }) => ({\n  fontSize: theme.typography.pxToRem(15),\n  flexBasis: \"100%\",\n}));\n\nconst ExpandButtonWrapper = styled(\"div\")(() => ({\n  float: \"left\",\n}));\n\nconst checkBoxIconStyle = {\n  cursor: \"pointer\",\n  float: \"left\",\n  marginRight: \"5px\",\n  padding: \"0\",\n};\n\nclass LayerGroup extends React.PureComponent {\n  state = {\n    expanded: false,\n    groups: [],\n    layers: [],\n    name: \"\",\n    parent: \"-1\",\n    toggled: false,\n    chapters: [],\n  };\n\n  static defaultProps = {\n    child: false,\n    expanded: false,\n  };\n\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    chapters: propTypes.array.isRequired,\n    child: propTypes.bool.isRequired,\n    expanded: propTypes.bool.isRequired,\n    group: propTypes.object.isRequired,\n    handleChange: propTypes.func,\n    model: propTypes.object.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.model = this.props.model;\n    this.bindVisibleChangeForLayersInGroup();\n  }\n\n  componentDidMount() {\n    this.setState({\n      ...this.props.group,\n    });\n  }\n\n  componentWillUnmount() {\n    //LayerGroup is never unmounted atm but we remove listener in case this changes in the future\n    this.unbindVisibleChangeForLayersInGroup();\n  }\n\n  //We force update when a layer in this group has changed visibility to\n  //be able to sync togglebuttons in GUI\n  layerVisibilityChanged = (e) => {\n    this.forceUpdate();\n  };\n\n  getAllLayersInGroupAndSubGroups = (groups) => {\n    return groups.reduce((layers, group) => {\n      if (this.hasSubGroups(group)) {\n        layers = [\n          ...layers,\n          ...this.getAllLayersInGroupAndSubGroups(group.groups),\n        ];\n      }\n      return [...layers, ...group.layers];\n    }, []);\n  };\n\n  getAllMapLayersReferencedByGroup = () => {\n    const { app, group } = this.props;\n    const allLayersInGroup = this.getAllLayersInGroupAndSubGroups([group]);\n    return app\n      .getMap()\n      .getLayers()\n      .getArray()\n      .filter((mapLayer) => {\n        return allLayersInGroup.find((layer) => {\n          return layer.id === mapLayer.get(\"name\");\n        });\n      });\n  };\n\n  bindVisibleChangeForLayersInGroup = () => {\n    this.getAllMapLayersReferencedByGroup().forEach((layer) => {\n      layer.on(\"change:visible\", this.layerVisibilityChanged);\n    });\n  };\n\n  unbindVisibleChangeForLayersInGroup = () => {\n    this.getAllMapLayersReferencedByGroup().forEach((layer) => {\n      layer.un(\"change:visible\", this.layerVisibilityChanged);\n    });\n  };\n\n  handleChange = (panel) => (event, expanded) => {\n    this.setState({\n      expanded: expanded ? panel : false,\n    });\n  };\n\n  renderLayerGroups() {\n    let { expanded } = this.state;\n    if (this.state.groups.length === 1 && this.state.groups[0].expanded) {\n      expanded = this.state.groups[0].id;\n    }\n    return this.state.groups.map((group, i) => {\n      return (\n        <LayerGroup\n          expanded={expanded === group.id}\n          key={i}\n          group={group}\n          model={this.props.model}\n          handleChange={this.handleChange}\n          app={this.props.app}\n          child={true}\n          chapters={this.props.chapters}\n          options={this.props.options}\n        />\n      );\n    });\n  }\n\n  toggleExpanded = () => {\n    this.setState({ expanded: !this.state.expanded });\n  };\n\n  isToggled() {\n    const { group } = this.props;\n    return this.areAllGroupsAndSubGroupsToggled(group);\n  }\n\n  isSemiToggled() {\n    const { group } = this.props;\n    return this.areSubGroupsAndLayersSemiToggled(group);\n  }\n\n  layerInMap = (layer) => {\n    const layers = this.props.app.getMap().getLayers().getArray();\n    let foundMapLayer = layers.find((mapLayer) => {\n      return mapLayer.get(\"name\") === layer.id;\n    });\n\n    if (foundMapLayer && foundMapLayer.getVisible()) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  areSubGroupsAndLayersSemiToggled = (group) => {\n    let someSubItemToggled = false;\n    if (this.hasLayers(group)) {\n      someSubItemToggled = group.layers.some((layer) => {\n        return this.layerInMap(layer);\n      });\n    }\n\n    if (this.hasSubGroups(group) && !someSubItemToggled) {\n      someSubItemToggled = group.groups.some((g) => {\n        return this.areSubGroupsAndLayersSemiToggled(g);\n      });\n    }\n    return someSubItemToggled;\n  };\n\n  areAllGroupsAndSubGroupsToggled = (group) => {\n    let allGroupsToggled = true;\n    let allLayersToggled = true;\n    if (this.hasSubGroups(group)) {\n      allGroupsToggled = group.groups.every((g) => {\n        return this.areAllGroupsAndSubGroupsToggled(g);\n      });\n    }\n    if (this.hasLayers(group)) {\n      allLayersToggled = group.layers.every((layer) => {\n        return this.layerInMap(layer);\n      });\n    }\n    return allGroupsToggled && allLayersToggled;\n  };\n\n  hasLayers = (group) => {\n    return group.layers && group.layers.length > 0;\n  };\n\n  hasSubGroups = (group) => {\n    return group.groups && group.groups.length > 0;\n  };\n  /**\n   * @summary Loops through groups of objects and changes visibility for all layers within group.\n   *\n   * @param {boolean} visibility\n   * @param {array|object} groupsArray\n   * @memberof LayerGroup\n   */\n  toggleGroups(visibility, groupsArray) {\n    // Sometimes groupsArray is an array of objects:\n    Array.isArray(groupsArray) &&\n      groupsArray.forEach((group) => {\n        // First call this function on all groups that might be inside this group\n        group.groups.length &&\n          group.groups.forEach((g) => {\n            this.toggleGroups(visibility, g);\n          });\n\n        // Next, call toggleLayers on all layers in group\n        this.toggleLayers(visibility, group.layers);\n      });\n\n    // … but sometimes it's not an array but rather an object:\n    typeof groupsArray === \"object\" &&\n      groupsArray !== null &&\n      groupsArray.hasOwnProperty(\"groups\") &&\n      this.toggleGroups(visibility, groupsArray.groups);\n\n    typeof groupsArray === \"object\" &&\n      groupsArray !== null &&\n      groupsArray.hasOwnProperty(\"layers\") &&\n      this.toggleLayers(visibility, groupsArray.layers);\n  }\n\n  toggleLayers(visibility, layers) {\n    this.props.app\n      .getMap()\n      .getAllLayers()\n      .filter((mapLayer) => {\n        return layers.some((layer) => layer.id === mapLayer.get(\"name\"));\n      })\n      .forEach((mapLayer) => {\n        if (mapLayer.get(\"layerType\") === \"group\") {\n          if (visibility === true) {\n            this.model.observer.publish(\"showLayer\", mapLayer);\n          } else {\n            this.model.observer.publish(\"hideLayer\", mapLayer);\n          }\n        }\n        mapLayer.setVisible(visibility);\n      });\n  }\n\n  getCheckbox = () => {\n    if (this.isToggled()) {\n      return <CheckBoxIcon sx={checkBoxIconStyle} />;\n    }\n    if (this.isSemiToggled()) {\n      return <CheckBoxIcon sx={{ ...checkBoxIconStyle, color: \"gray\" }} />;\n    }\n    return <CheckBoxOutlineBlankIcon sx={checkBoxIconStyle} />;\n  };\n  /**\n   * If Group has \"toggleable\" property enabled, render the toggle all checkbox.\n   *\n   * @returns React.Component\n   * @memberof LayerGroup\n   */\n  renderToggleAll() {\n    // TODO: Rename props.group.toggled to \"toggleable\" or something…\n\n    if (this.props.group.toggled) {\n      return (\n        <SummaryContainer\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this.isToggled()) {\n              this.toggleGroups(false, this.props.group.groups);\n              this.toggleLayers(false, this.props.group.layers);\n            } else {\n              this.toggleGroups(true, this.props.group.groups);\n              this.toggleLayers(true, this.props.group.layers);\n            }\n          }}\n        >\n          <div>{this.getCheckbox()}</div>\n          <HeadingTypography>{this.state.name}</HeadingTypography>\n        </SummaryContainer>\n      );\n    } else {\n      return (\n        <SummaryContainer>\n          <HeadingTypography>{this.state.name}</HeadingTypography>\n        </SummaryContainer>\n      );\n    }\n  }\n\n  render() {\n    const { expanded } = this.state;\n    return (\n      // If the layerItem is a child, it should be rendered a tad to the\n      // right. Apparently 21px.\n      <Box sx={{ marginLeft: this.props.child ? \"21px\" : \"0px\" }}>\n        <StyledAccordion\n          expanded={this.state.expanded}\n          TransitionProps={{\n            timeout: 0,\n          }}\n          onChange={() => {\n            this.setState({\n              expanded: !this.state.expanded,\n            });\n          }}\n        >\n          <StyledAccordionSummary>\n            <ExpandButtonWrapper>\n              {expanded ? (\n                <KeyboardArrowDownIcon onClick={() => this.toggleExpanded()} />\n              ) : (\n                <KeyboardArrowRightIcon onClick={() => this.toggleExpanded()} />\n              )}\n            </ExpandButtonWrapper>\n            {this.renderToggleAll()}\n          </StyledAccordionSummary>\n          <StyledAccordionDetails>\n            <div>\n              {this.state.layers.map((layer, i) => {\n                const mapLayer = this.model.layerMap[layer.id];\n                if (mapLayer) {\n                  return (\n                    <LayerItem\n                      key={mapLayer.get(\"name\")}\n                      layer={mapLayer}\n                      model={this.props.model}\n                      options={this.props.options}\n                      chapters={this.props.chapters}\n                      app={this.props.app}\n                      onOpenChapter={(chapter) => {\n                        const informativeWindow = this.props.app.windows.find(\n                          (window) => window.type === \"informative\"\n                        );\n                        informativeWindow.props.custom.open(chapter);\n                      }}\n                    />\n                  );\n                } else {\n                  return null;\n                }\n              })}\n              {this.renderLayerGroups()}\n            </div>\n          </StyledAccordionDetails>\n        </StyledAccordion>\n      </Box>\n    );\n  }\n}\n\nexport default LayerGroup;\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { styled } from \"@mui/material/styles\";\nimport { Button, Tooltip, Typography, Grid } from \"@mui/material\";\n\nimport IconWarning from \"@mui/icons-material/Warning\";\nimport CallMadeIcon from \"@mui/icons-material/CallMade\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport RadioButtonChecked from \"@mui/icons-material/RadioButtonChecked\";\nimport RadioButtonUnchecked from \"@mui/icons-material/RadioButtonUnchecked\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport TableViewIcon from \"@mui/icons-material/TableView\";\n\nimport LayerGroupItem from \"./LayerGroupItem.js\";\nimport LayerSettings from \"./LayerSettings.js\";\nimport DownloadLink from \"./DownloadLink.js\";\n\nconst LayerItemContainer = styled(\"div\")(({ theme }) => ({\n  paddingLeft: \"0\",\n  borderBottom: `${theme.spacing(0.2)} solid ${theme.palette.divider}`,\n}));\n\nconst LayerItemWrapper = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  marginTop: \"0\",\n}));\n\nconst LayerTogglerButtonWrapper = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  cursor: \"pointer\",\n  float: \"left\",\n  marginRight: \"5px\",\n}));\n\nconst InfoTextContainer = styled(\"div\")(({ theme }) => ({\n  margin: \"10px 45px\",\n}));\n\nconst Caption = styled(Typography)(({ theme }) => ({\n  cursor: \"pointer\",\n  fontSize: theme.typography.pxToRem(15),\n}));\n\nconst LegendIcon = styled(\"img\")(({ theme }) => ({\n  width: theme.typography.pxToRem(18),\n  height: theme.typography.pxToRem(18),\n  marginRight: \"5px\",\n}));\n\nconst LayerButtonsContainer = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n}));\n\nconst LayerButtonWrapper = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  width: 35,\n  height: 35,\n  cursor: \"pointer\",\n}));\n\nconst StyledList = styled(\"ul\")(() => ({\n  padding: 0,\n  margin: 0,\n  listStyle: \"none\",\n}));\n\nclass LayerItem extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { layer } = props;\n    const layerInfo = layer.get(\"layerInfo\");\n\n    this.isBackgroundLayer = layerInfo.layerType === \"base\";\n    this.caption = layerInfo.caption;\n    this.name = layer.get(\"name\");\n    this.legend = layerInfo.legend;\n    this.legendIcon = layerInfo.legendIcon;\n    this.infoTitle = layerInfo.infoTitle;\n    this.infoText = layerInfo.infoText;\n    this.infoUrl = layerInfo.infoUrl;\n    this.infoUrlText = layerInfo.infoUrlText;\n    this.infoOwner = layerInfo.infoOwner;\n    this.localObserver = layer.localObserver;\n    this.showAttributeTableButton = layerInfo.showAttributeTableButton || false;\n    this.usesMinMaxZoom = this.layerUsesMinMaxZoom();\n    this.minMaxZoomAlertOnToggleOnly = layer.get(\"minMaxZoomAlertOnToggleOnly\");\n\n    this.state = {\n      visible: layer.get(\"visible\"),\n      status: \"ok\",\n      zoomVisible: true,\n      open: false,\n      toggleSettings: false,\n      infoVisible: false,\n    };\n\n    // Subscribe to events sent when another background layer is clicked and\n    // disable all other layers to implement the RadioButton behaviour\n    if (this.isBackgroundLayer) {\n      layer.localObserver.subscribe(\"backgroundLayerChanged\", (activeLayer) => {\n        if (activeLayer !== this.name) {\n          if (!layer.isFakeMapLayer) {\n            layer.setVisible(false);\n          }\n          this.setState({\n            visible: false,\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Triggered when the component is successfully mounted into the DOM.\n   * @instance\n   */\n  componentDidMount() {\n    this.props.layer.on?.(\"change:visible\", (e) => {\n      const visible = !e.oldValue;\n      this.setState({\n        visible,\n      });\n\n      this.listenToZoomChange(visible);\n    });\n\n    if (this.state.visible) {\n      this.triggerZoomCheck(null, this.state.visible);\n    }\n    this.listenToZoomChange(this.state.visible);\n\n    // Set load status by subscribing to a global event. Expect ID (int) of layer\n    // and status (string \"ok\"|\"loaderror\"). Also, once status was set to \"loaderror\",\n    // don't change it back to \"ok\": we'll get a response for each tile, so most of\n    // the tiles might be \"ok\", but if only one of the tiles has \"loaderror\", we\n    // consider that the layer has failed loading and want to inform the user.\n    this.props.app.globalObserver.subscribe(\n      \"layerswitcher.wmsLayerLoadStatus\",\n      (d) => {\n        this.state.status !== \"loaderror\" &&\n          this.name === d.id &&\n          this.setState({\n            status: d.status,\n          });\n      }\n    );\n  }\n\n  layerUsesMinMaxZoom() {\n    const lprops = this.props.layer.getProperties();\n    const maxZ = lprops.maxZoom ?? 0;\n    const minZ = lprops.minZoom ?? 0;\n    // When reading min/max-Zoom from layer, its not consistent with the\n    // initial values from config. Suddenly Infinity is used.\n    return (maxZ > 0 && maxZ < Infinity) || (minZ > 0 && minZ < Infinity);\n  }\n\n  zoomEndHandler = (e) => {\n    const zoom = this.props.model.olMap.getView().getZoom();\n    const lprops = this.props.layer.getProperties();\n    const layerIsZoomVisible = zoom > lprops.minZoom && zoom <= lprops.maxZoom;\n\n    let showSnack = false;\n\n    if (this.minMaxZoomAlertOnToggleOnly === true) {\n      if (!this.state.visible && !layerIsZoomVisible && e?.type === \"click\") {\n        showSnack = true;\n      }\n    } else {\n      if (\n        !layerIsZoomVisible &&\n        (this.state.zoomVisible || !this.state.visible)\n      ) {\n        showSnack = true;\n      }\n    }\n\n    if (showSnack === true) {\n      this.showZoomSnack();\n    }\n\n    this.setState({\n      zoomVisible: layerIsZoomVisible,\n    });\n    return layerIsZoomVisible;\n  };\n\n  listenToZoomChange(bListen) {\n    if (!this.usesMinMaxZoom) return;\n\n    const eventName = \"core.zoomEnd\";\n    if (bListen && !this.zoomEndListener) {\n      this.zoomEndListener = this.props.app.globalObserver.subscribe(\n        eventName,\n        this.zoomEndHandler\n      );\n    } else {\n      if (this.zoomEndListener) {\n        this.props.app.globalObserver.unsubscribe(\n          eventName,\n          this.zoomEndListener\n        );\n        this.zoomEndListener = null;\n      }\n    }\n  }\n\n  showZoomSnack() {\n    if (this.zoomWarningSnack) return;\n    this.zoomWarningSnack = this.props.enqueueSnackbar(\n      `Lagret \"${this.caption}\" visas endast vid specifika skalor.`,\n      {\n        variant: \"warning\",\n        preventDuplicate: true,\n        onClose: () => {\n          this.zoomWarningSnack = null;\n        },\n      }\n    );\n  }\n\n  triggerZoomCheck(e, visible) {\n    if (!this.usesMinMaxZoom) return;\n\n    this.zoomEndHandler(e);\n\n    if (visible === false) {\n      if (!this.zoomWarningSnack) return;\n      this.props.closeSnackbar(this.zoomWarningSnack);\n      this.zoomWarningSnack = null;\n    }\n  }\n\n  /**\n   * Toggle visibility of this layer item.\n   * Also, if layer is being hidden, reset \"status\" (if layer loading failed,\n   * \"status\" is \"loaderror\", and it should be reset if user unchecks layer).\n   * @instance\n   */\n  toggleVisible = (e) => {\n    const layer = this.props.layer;\n    if (this.isBackgroundLayer) {\n      document.getElementById(\"map\").style.backgroundColor = \"#FFF\"; // sets the default background color to white\n      if (layer.isFakeMapLayer) {\n        switch (this.name) {\n          case \"-2\":\n            document.getElementById(\"map\").style.backgroundColor = \"#000\";\n            break;\n          case \"-1\":\n          default:\n            document.getElementById(\"map\").style.backgroundColor = \"#FFF\";\n            break;\n        }\n      } else {\n        layer.setVisible(true);\n      }\n      this.setState({ visible: true });\n      // Publish event to ensure all other background layers are disabled\n      layer.localObserver.publish(\"backgroundLayerChanged\", this.name);\n    } else {\n      const visible = !this.state.visible;\n      this.setState({\n        visible,\n      });\n      this.props.layer.setVisible(visible);\n      this.triggerZoomCheck(e, visible);\n    }\n  };\n\n  /**\n   * Render the load information component.\n   * @instance\n   * @return {external:ReactElement}\n   */\n  renderStatusButton() {\n    return (\n      this.state.status === \"loaderror\" && (\n        <Tooltip\n          disableInteractive\n          title=\"Lagret kunde inte laddas in. Kartservern svarar inte.\"\n        >\n          <LayerButtonWrapper>\n            <IconWarning />\n          </LayerButtonWrapper>\n        </Tooltip>\n      )\n    );\n  }\n\n  renderInfoButton = () => {\n    return this.isInfoEmpty() ? null : (\n      <Tooltip title=\"Mer information om lagret\">\n        <LayerButtonWrapper>\n          {this.state.infoVisible ? (\n            <RemoveCircleIcon onClick={this.toggleInfo} />\n          ) : (\n            <InfoIcon\n              onClick={this.toggleInfo}\n              sx={{\n                boxShadow: this.state.infoVisible\n                  ? \"rgb(204, 204, 204) 2px 3px 1px\"\n                  : \"inherit\",\n                borderRadius: \"100%\",\n              }}\n            />\n          )}\n        </LayerButtonWrapper>\n      </Tooltip>\n    );\n  };\n\n  renderMoreButton = () => {\n    return (\n      <Tooltip title=\"Fler inställningar\">\n        <LayerButtonWrapper>\n          {this.state.toggleSettings ? (\n            <CloseIcon onClick={this.toggleSettings} />\n          ) : (\n            <MoreHorizIcon onClick={this.toggleSettings} />\n          )}\n        </LayerButtonWrapper>\n      </Tooltip>\n    );\n  };\n\n  renderLegendImage() {\n    const src =\n      this.legend && this.legend[0] && this.legend[0].url\n        ? this.legend[0].url\n        : \"\";\n    return src ? <img width=\"30\" alt=\"legend\" src={src} /> : null;\n  }\n\n  isInfoEmpty() {\n    let chaptersWithLayer = this.findChapters(this.name, this.props.chapters);\n    return !(\n      this.infoCaption ||\n      this.infoUrl ||\n      this.infoOwner ||\n      this.infoText ||\n      chaptersWithLayer.length > 0\n    );\n  }\n\n  openInformative = (chapter) => (e) => {\n    this.props.onOpenChapter(chapter);\n  };\n\n  findChapters(id, chapters) {\n    let result = [];\n    if (Array.isArray(chapters)) {\n      result = chapters.reduce((chaptersWithLayer, chapter) => {\n        if (Array.isArray(chapter.layers)) {\n          if (chapter.layers.some((layerId) => layerId === id)) {\n            chaptersWithLayer = [...chaptersWithLayer, chapter];\n          }\n          if (chapter.chapters.length > 0) {\n            chaptersWithLayer = [\n              ...chaptersWithLayer,\n              ...this.findChapters(id, chapter.chapters),\n            ];\n          }\n        }\n        return chaptersWithLayer;\n      }, []);\n    }\n    return result;\n  }\n\n  renderChapterLinks(chapters) {\n    if (chapters && chapters.length > 0) {\n      let chaptersWithLayer = this.findChapters(this.name, chapters);\n      if (chaptersWithLayer.length > 0) {\n        return (\n          <InfoTextContainer>\n            <Typography>\n              Innehåll från denna kategori finns benämnt i följande kapitel i\n              översiktsplanen:\n            </Typography>\n            <StyledList>\n              {chaptersWithLayer.map((chapter, i) => {\n                return (\n                  <li key={i}>\n                    <Button\n                      size=\"small\"\n                      onClick={this.openInformative(chapter)}\n                    >\n                      {chapter.header}\n                      <CallMadeIcon sx={{ marginLeft: 1, fontSize: \"16px\" }} />\n                    </Button>\n                  </li>\n                );\n              })}\n            </StyledList>\n          </InfoTextContainer>\n        );\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  toggle() {\n    this.setState({\n      open: !this.state.open,\n    });\n  }\n\n  renderInfo() {\n    if (this.infoText) {\n      return (\n        <InfoTextContainer>\n          <Typography variant=\"subtitle2\">{this.infoTitle}</Typography>\n          <Typography\n            variant=\"body2\"\n            dangerouslySetInnerHTML={{\n              __html: this.infoText,\n            }}\n          />\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderMetadataLink() {\n    if (this.infoUrl) {\n      return (\n        <InfoTextContainer>\n          <a href={this.infoUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n            {this.infoUrlText || this.infoUrl}\n          </a>\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderOwner() {\n    if (this.infoOwner) {\n      return (\n        <InfoTextContainer>\n          <Typography\n            variant=\"body2\"\n            dangerouslySetInnerHTML={{ __html: this.infoOwner }}\n          />\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderDetails() {\n    if (this.state.infoVisible) {\n      return (\n        <div>\n          {this.renderInfo()}\n          {this.renderMetadataLink()}\n          {this.renderOwner()}\n          <div>{this.renderChapterLinks(this.props.chapters || [])}</div>\n        </div>\n      );\n    }\n  }\n\n  toggleSettings = () => {\n    this.setState({\n      toggleSettings: !this.state.toggleSettings,\n    });\n  };\n\n  toggleInfo = () => {\n    this.setState({\n      infoVisible: !this.state.infoVisible,\n    });\n  };\n\n  renderLegendIcon() {\n    return <LegendIcon alt=\"Teckenförklaring\" src={this.legendIcon} />;\n  }\n\n  getLayerToggler = () => {\n    const { visible } = this.state;\n    const icon = visible ? (\n      this.isBackgroundLayer ? (\n        <RadioButtonChecked />\n      ) : (\n        <CheckBoxIcon\n          sx={{\n            fill: (theme) =>\n              !this.state.zoomVisible && this.state.visible\n                ? theme.palette.warning.dark\n                : \"\",\n          }}\n        />\n      )\n    ) : this.isBackgroundLayer ? (\n      <RadioButtonUnchecked />\n    ) : (\n      <CheckBoxOutlineBlankIcon />\n    );\n    return <LayerTogglerButtonWrapper>{icon}</LayerTogglerButtonWrapper>;\n  };\n\n  #showAttributeTable = async () => {\n    try {\n      const url = this.props.layer.getSource().get(\"url\").replace(\"wms\", \"wfs\");\n      const { LAYERS } = this.props.layer.getSource().getParams();\n      // If URL already contains a query string part, we want to glue them together.\n      const glue = url.includes(\"?\") ? \"&\" : \"?\";\n      const getFeatureUrl = `${url}${glue}service=WFS&version=1.0.0&request=GetFeature&typeName=${LAYERS}&maxFeatures=5000&outputFormat=application%2Fjson`;\n      const describeFeatureTypeUrl = `${url}${glue}service=WFS&version=1.0.0&request=DescribeFeatureType&typeName=${LAYERS}&outputFormat=application%2Fjson`;\n      // TODO: QGIS Server doesn't support JSON response for DescribeFeatureType. We must\n      // fetch the result as GML2 and then parse it accordingly. This will require\n      // some more work than the current approach.\n      // const describeFeatureTypeUrl = `${url}${glue}service=WFS&version=1.0.0&request=DescribeFeatureType&typeName=${LAYERS}`;\n      const r1 = await fetch(getFeatureUrl);\n      const features = await r1.json();\n      const r2 = await fetch(describeFeatureTypeUrl);\n      const description = await r2.json();\n\n      const columns = description.featureTypes\n        .find((f) => f.typeName === LAYERS) // featureTypes contains an object, where typeName will be the same as the layer name we requested\n        .properties.filter((c) => !c.type.toLowerCase().includes(\"gml\")) // Best guess to try to filter out the geometry column, we don't want to show it\n        .map((c) => {\n          // Prepare an object that has the format of 'columns' prop for MUI's DataGrid\n          return {\n            field: c.name,\n            headerName: c.name,\n            type: c.localType === \"int\" ? \"number\" : c.localType, // DataGrid wants 'number', not 'int', see https://mui.com/components/data-grid/columns/#column-types\n            flex: 1,\n          };\n        });\n\n      const rows = features.features.map((r, i) => {\n        return { ...r.properties, id: i };\n      });\n\n      this.props.app.globalObserver.publish(\"core.showAttributeTable\", {\n        title: `${this.caption} (${LAYERS})`,\n        content: { columns, rows },\n      });\n    } catch (error) {\n      console.error(error);\n      console.log(this);\n      this.props.enqueueSnackbar(\n        `Serverfel: attributtabellen för lagret \"${this.caption}\" kunde inte visas`,\n        { variant: \"error\" }\n      );\n    }\n  };\n\n  render() {\n    const { layer, model, app, chapters } = this.props;\n\n    const cqlFilterVisible =\n      this.props.app.config.mapConfig.map?.cqlFilterVisible || false;\n\n    if (!this.caption) {\n      return null;\n    }\n\n    if (layer.get(\"layerType\") === \"group\") {\n      return (\n        <LayerGroupItem\n          appConfig={app.config.appConfig}\n          mapConfig={app.config.mapConfig}\n          layer={layer}\n          model={model}\n          options={this.props.options}\n          chapters={chapters}\n          cqlFilterVisible={cqlFilterVisible}\n          onOpenChapter={(chapter) => {\n            const informativeWindow = app.windows.find(\n              (window) => window.type === \"informative\"\n            );\n            informativeWindow.props.custom.open(chapter);\n          }}\n        />\n      );\n    }\n\n    return (\n      <LayerItemContainer\n        sx={{ marginLeft: this.isBackgroundLayer ? \"0px\" : \"45px\" }}\n      >\n        <LayerItemWrapper>\n          <Grid\n            wrap=\"nowrap\"\n            alignItems=\"center\"\n            alignContent=\"center\"\n            container\n            onClick={this.toggleVisible.bind(this)}\n          >\n            <Grid item>{this.getLayerToggler()}</Grid>\n            {this.legendIcon && this.renderLegendIcon()}\n            <Caption>{this.caption}</Caption>\n          </Grid>\n          <LayerButtonsContainer>\n            {layer.isFakeMapLayer ? null : (\n              <DownloadLink\n                layer={this.props.layer}\n                enableDownloadLink={\n                  this.props.app.config.mapConfig.map.enableDownloadLink\n                }\n              />\n            )}\n            {this.renderStatusButton()}\n            {this.renderInfoButton()}\n\n            {this.showAttributeTableButton && (\n              <Tooltip title=\"Visa lagrets attributtabell\">\n                <LayerButtonWrapper>\n                  <TableViewIcon onClick={this.#showAttributeTable} />\n                </LayerButtonWrapper>\n              </Tooltip>\n            )}\n            {this.renderMoreButton()}\n          </LayerButtonsContainer>\n        </LayerItemWrapper>\n        <div>\n          {this.renderDetails()}\n          {this.state.toggleSettings &&\n          this.state.infoVisible &&\n          !this.isInfoEmpty() ? (\n            <hr />\n          ) : null}\n          {layer.isFakeMapLayer ? null : (\n            <LayerSettings\n              options={this.props.options}\n              layer={layer}\n              toggled={this.state.toggleSettings}\n              showOpacity={true}\n              showLegend={true}\n              cqlFilterVisible={cqlFilterVisible}\n            />\n          )}\n        </div>\n      </LayerItemContainer>\n    );\n  }\n}\n\nexport default withSnackbar(LayerItem);\n"],"names":["StyledAccordion","styled","Accordion","borderRadius","boxShadow","backgroundImage","StyledAccordionSummary","AccordionSummary","minHeight","padding","overflow","transition","marginTop","marginBottom","StyledAccordionDetails","AccordionDetails","width","display","SummaryContainer","theme","flexBasis","borderBottom","spacing","palette","divider","HeadingTypography","Typography","fontSize","typography","pxToRem","ExpandButtonWrapper","float","checkBoxIconStyle","cursor","marginRight","LayerGroup","props","state","expanded","groups","layers","name","parent","toggled","chapters","layerVisibilityChanged","e","forceUpdate","getAllLayersInGroupAndSubGroups","reduce","group","hasSubGroups","getAllMapLayersReferencedByGroup","app","allLayersInGroup","getMap","getLayers","getArray","filter","mapLayer","find","layer","id","get","bindVisibleChangeForLayersInGroup","forEach","on","unbindVisibleChangeForLayersInGroup","un","handleChange","panel","event","setState","toggleExpanded","layerInMap","foundMapLayer","getVisible","areSubGroupsAndLayersSemiToggled","someSubItemToggled","hasLayers","some","g","areAllGroupsAndSubGroupsToggled","allGroupsToggled","allLayersToggled","every","length","getCheckbox","isToggled","sx","isSemiToggled","color","model","this","map","i","child","options","visibility","groupsArray","Array","isArray","toggleGroups","toggleLayers","hasOwnProperty","getAllLayers","observer","publish","setVisible","onClick","preventDefault","stopPropagation","marginLeft","TransitionProps","timeout","onChange","renderToggleAll","layerMap","onOpenChapter","chapter","windows","window","type","custom","open","renderLayerGroups","React","defaultProps","LayerItemContainer","paddingLeft","LayerItemWrapper","justifyContent","LayerTogglerButtonWrapper","alignItems","InfoTextContainer","margin","Caption","LegendIcon","height","LayerButtonsContainer","LayerButtonWrapper","StyledList","listStyle","LayerItem","zoomEndHandler","zoom","olMap","getView","getZoom","lprops","getProperties","layerIsZoomVisible","minZoom","maxZoom","showSnack","minMaxZoomAlertOnToggleOnly","visible","zoomVisible","showZoomSnack","toggleVisible","isBackgroundLayer","document","getElementById","style","backgroundColor","isFakeMapLayer","localObserver","triggerZoomCheck","renderInfoButton","isInfoEmpty","title","infoVisible","toggleInfo","renderMoreButton","toggleSettings","openInformative","getLayerToggler","icon","fill","warning","dark","url","getSource","replace","getParams","LAYERS","glue","includes","getFeatureUrl","describeFeatureTypeUrl","fetch","r1","json","features","r2","description","columns","featureTypes","f","typeName","properties","c","toLowerCase","field","headerName","localType","flex","rows","r","globalObserver","caption","content","console","error","log","enqueueSnackbar","variant","layerInfo","layerType","legend","legendIcon","infoTitle","infoText","infoUrl","infoUrlText","infoOwner","showAttributeTableButton","usesMinMaxZoom","layerUsesMinMaxZoom","status","subscribe","activeLayer","oldValue","listenToZoomChange","d","maxZ","minZ","Infinity","bListen","eventName","zoomEndListener","unsubscribe","zoomWarningSnack","preventDuplicate","onClose","closeSnackbar","disableInteractive","src","alt","chaptersWithLayer","findChapters","infoCaption","result","layerId","size","header","dangerouslySetInnerHTML","__html","href","target","rel","renderInfo","renderMetadataLink","renderOwner","renderChapterLinks","cqlFilterVisible","config","mapConfig","appConfig","wrap","alignContent","container","bind","item","renderLegendIcon","enableDownloadLink","renderStatusButton","renderDetails","showOpacity","showLegend","withSnackbar"],"sourceRoot":""}
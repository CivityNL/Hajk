{"version":3,"file":"static/js/5262.9c8245e4.chunk.js","mappings":"0VAgBe,SAASA,EAAT,GAIX,IAHFC,EAGC,EAHDA,cACAC,EAEC,EAFDA,UACAC,EACC,EADDA,MAIA,EAA0BC,EAAAA,SAAe,CACvCC,gBAAiB,GACjBC,uBAAwB,GACxBC,mBAAoB,OAHtB,eAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAaN,EAAAA,aAAkB,WACnCK,EAAS,CACPJ,gBAAiB,GACjBC,uBAAwB,GACxBC,mBAAoB,MAEvB,GAAE,IAIGI,EAAwBP,EAAAA,aAAkB,SAACC,GAC/CI,GAAS,SAACD,GAAD,eAAC,UAAgBA,GAAjB,IAAwBH,gBAAAA,GAAxB,GACV,GAAE,IAkBGO,EAAc,WAElBJ,EAAMD,oBACJL,EAAUW,cAAcL,EAAMD,oBAEhCG,GACD,EA8CD,OAPAN,EAAAA,WAAgB,WAEd,OADAH,EAAca,UAAU,yBAA0BH,GAC3C,WACLV,EAAcc,YAAY,yBAC3B,CACF,GAAE,CAACd,EAAeU,KAEZK,EAAAA,EAAAA,eACL,UAAC,IAAD,CACEC,KAAMT,EAAMH,gBAAgBa,OAAS,EACrCC,QAASP,EAETQ,YAAa,SAACC,GACZA,EAAEC,iBACH,EANH,WAQE,SAAC,IAAD,iDACA,SAAC,IAAD,WACE,SAAC,IAAD,CAAMC,GAAI,CAAEC,MAAO,OAAQC,UAAW,QAAtC,SACGjB,EAAMH,gBAAgBqB,KAAI,SAACC,EAASC,GAAV,OACzB,SAAC,KAAD,CACEC,gBAAc,EAEdC,aAAc,kBAjDD,SAACF,GAExB,IAAMG,EAAiBvB,EAAMH,gBAAgBuB,GAEvCI,EAAmB7B,EAAM8B,uBAAuBF,GAEtD7B,EAAUgC,WAAWF,EAAkB,CAAEG,QAAQ,IAEjD1B,GAAS,kBACJD,GADG,IAEND,mBAAoByB,IAEvB,CAqC+BI,CAAiBR,EAAvB,EACdS,aAAc,WAjCxB7B,EAAMD,oBACJL,EAAUW,cAAcL,EAAMD,mBAgCR,EAJhB,UAME,UAAC,IAAD,CACE+B,QAAS,kBAtFW,SAACC,GAEjC,IAAMC,GACoD,IAAxDhC,EAAMF,uBAAuBmC,QAAQF,GACjC/B,EAAMF,uBAAuBoC,QAAO,SAACC,GAAD,OAAOA,IAAMJ,CAAb,IADxC,kBAEQ/B,EAAMF,wBAFd,CAEsCiC,IAExC9B,GAAS,SAACD,GAAD,eAAC,UACLA,GADI,IAEPF,uBAAwBkC,GAFjB,GAIV,CA2E4BI,CAA0BhB,EAAhC,EACTiB,OAAK,EAFP,WAIE,SAAC,IAAD,WACE,SAAC,IAAD,CACEC,KAAK,QACLC,SAA0D,IAAjDvC,EAAMF,uBAAuBmC,QAAQb,GAC9CoB,UAAW,EACXC,eAAa,OAGjB,SAAC,IAAD,CAAcC,QAASvB,EAAQwB,cAhB5BvB,EAHkB,SAyB/B,UAAC,IAAD,YACE,SAAC,IAAD,CACEwB,SAAkD,IAAxC5C,EAAMF,uBAAuBY,OACvCoB,QAlFc,WACpB9B,EAAMF,uBAAuBoB,KAAI,SAACE,GAChC,OAAO1B,EAAUmD,oBAAoB7C,EAAMH,gBAAgBuB,GAC5D,IACDlB,GACD,EA2EK,iBAMA,SAAC,IAAD,CAAQ4B,QAAS1B,EAAjB,0BAGJ0C,SAASC,eAAe,OAE3B,C","sources":["plugins/Sketch/components/SelectFeaturesDialog.js"],"sourcesContent":["import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nexport default function SelectFeaturesDialog({\n  localObserver,\n  drawModel,\n  model,\n}) {\n  // Let's keep everything in one state here since all properties are\n  // changing at the same time (almost).\n  const [state, setState] = React.useState({\n    clickedFeatures: [],\n    selectedFeatureIndexes: [],\n    highlightedFeature: null,\n  });\n\n  // Resets the state back to init.\n  const resetState = React.useCallback(() => {\n    setState({\n      clickedFeatures: [],\n      selectedFeatureIndexes: [],\n      highlightedFeature: null,\n    });\n  }, []);\n\n  // Handles map-click-event from drawModel and updates the clickedFeatures\n  // with the payload.\n  const handleDrawSelectClick = React.useCallback((clickedFeatures) => {\n    setState((state) => ({ ...state, clickedFeatures }));\n  }, []);\n\n  // Handles selection of features in the dialog-list. If the feature-index is already\n  // selected, we remove it, otherwise we add it to the selection.\n  const handleFeatureSelectChange = (featureIndex) => {\n    // Create the new selected feature-indexes...\n    const newSelectedFeatureIndexes =\n      state.selectedFeatureIndexes.indexOf(featureIndex) !== -1\n        ? state.selectedFeatureIndexes.filter((i) => i !== featureIndex)\n        : [...state.selectedFeatureIndexes, featureIndex];\n    // ...and update the state\n    setState((state) => ({\n      ...state,\n      selectedFeatureIndexes: newSelectedFeatureIndexes,\n    }));\n  };\n\n  // Handles dialog abort, resets the state so that the dialog can close.\n  const handleAbort = () => {\n    // We have to remove the eventual highlighted feature when aborting...\n    state.highlightedFeature &&\n      drawModel.removeFeature(state.highlightedFeature);\n    // ...and reset the state.\n    resetState();\n  };\n\n  // Handles confirmation from the dialog. Let's the drawModel add the feature,\n  // and then the state is reset so that the dialog is closed.\n  const handleConfirm = () => {\n    state.selectedFeatureIndexes.map((index) => {\n      return drawModel.drawSelectedFeature(state.clickedFeatures[index]);\n    });\n    resetState();\n  };\n\n  // Handler for mouse-enter on list of clicked features. Creates a new\n  // feature (which is used to show where the clicked feature is in the map).\n  const handleMouseEnter = (index) => {\n    // Let's get the clicked feature we're currently hoovering.\n    const hoveredFeature = state.clickedFeatures[index];\n    // Then we can create a corresponding highlight-feature.\n    const highlightFeature = model.createHighlightFeature(hoveredFeature);\n    // We'll add the highlight-feature to the draw-layer...\n    drawModel.addFeature(highlightFeature, { silent: true });\n    // ...and update the state so that we can keep track of what we are highlighting.\n    setState({\n      ...state,\n      highlightedFeature: highlightFeature,\n    });\n  };\n\n  // Handler for mouse-leave on the list of clicked features. Removes the currently\n  // highlighted feature from the draw-layer.\n  const handleMouseLeave = () => {\n    state.highlightedFeature &&\n      drawModel.removeFeature(state.highlightedFeature);\n  };\n\n  // An effect that handles subscriptions (and un-subscriptions) to the observer-\n  // event fired from the drawModel when the user has clicked a feature with the\n  // \"select feature from map\"-tool active. The event will only be fired if there\n  // is more than one feature present at the location on which the user clicked.\n  // (If there's zero or one, the drawModel will take care of it).\n  React.useEffect(() => {\n    localObserver.subscribe(\"drawModel.select.click\", handleDrawSelectClick);\n    return () => {\n      localObserver.unsubscribe(\"drawModel.select.click\");\n    };\n  }, [localObserver, handleDrawSelectClick]);\n\n  return createPortal(\n    <Dialog\n      open={state.clickedFeatures.length > 1}\n      onClose={handleAbort}\n      // Must stop event-bubbling. Otherwise the parent element in react can be dragged etc.\n      onMouseDown={(e) => {\n        e.stopPropagation();\n      }}\n    >\n      <DialogTitle>VÃ¤lj de objekt du vill kopiera</DialogTitle>\n      <DialogContent>\n        <List sx={{ width: \"100%\", maxHeight: \"30vh\" }}>\n          {state.clickedFeatures.map((feature, index) => (\n            <ListItem\n              disableGutters\n              key={index}\n              onMouseEnter={() => handleMouseEnter(index)}\n              onMouseLeave={() => handleMouseLeave(index)}\n            >\n              <ListItemButton\n                onClick={() => handleFeatureSelectChange(index)}\n                dense\n              >\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={state.selectedFeatureIndexes.indexOf(index) !== -1}\n                    tabIndex={-1}\n                    disableRipple\n                  />\n                </ListItemIcon>\n                <ListItemText primary={feature.getId()} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          disabled={state.selectedFeatureIndexes.length === 0}\n          onClick={handleConfirm}\n        >\n          OK\n        </Button>\n        <Button onClick={handleAbort}>Avbryt</Button>\n      </DialogActions>\n    </Dialog>,\n    document.getElementById(\"map\")\n  );\n}\n"],"names":["SelectFeaturesDialog","localObserver","drawModel","model","React","clickedFeatures","selectedFeatureIndexes","highlightedFeature","state","setState","resetState","handleDrawSelectClick","handleAbort","removeFeature","subscribe","unsubscribe","createPortal","open","length","onClose","onMouseDown","e","stopPropagation","sx","width","maxHeight","map","feature","index","disableGutters","onMouseEnter","hoveredFeature","highlightFeature","createHighlightFeature","addFeature","silent","handleMouseEnter","onMouseLeave","onClick","featureIndex","newSelectedFeatureIndexes","indexOf","filter","i","handleFeatureSelectChange","dense","edge","checked","tabIndex","disableRipple","primary","getId","disabled","drawSelectedFeature","document","getElementById"],"sourceRoot":""}
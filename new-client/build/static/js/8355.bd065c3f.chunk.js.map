{"version":3,"file":"static/js/8355.bd065c3f.chunk.js","mappings":"mLAsEA,UA9D0B,SAAC,GAAkC,IAAhCA,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAGtC,EAA8BC,EAAAA,SAAe,MAA7C,eAAOC,EAAP,KAAgBC,EAAhB,KAGMC,EAAuBH,EAAAA,aAAkB,SAACI,GAEN,SAApCA,EAAaC,IAAI,gBACnBH,EAAWE,EAEd,GAAE,IAGGE,EAAmBN,EAAAA,aACvB,SAACO,GAG+B,IAA1BA,EAAeC,OACjBV,EAAUW,cAAcR,IAExBA,EAAQS,IAAI,YAAaH,GACzBT,EAAUa,4BAEZT,EAAW,KACZ,GACD,CAACJ,EAAWG,IAIRW,EAAmBZ,EAAAA,aAAkB,WACzCF,EAAUW,cAAcR,GACxBC,EAAW,KACZ,GAAE,CAACJ,EAAWG,IAUf,OAPAD,EAAAA,WAAgB,WAEd,OADAD,EAAcc,UAAU,yBAA0BV,GAC3C,WACLJ,EAAce,YAAY,yBAC3B,CACF,GAAE,CAAChB,EAAWC,EAAeI,IAEX,OAAZF,GACHc,EAAAA,EAAAA,eACE,SAAC,UAAD,CACEC,QAAS,CACPC,KAAM,GACNC,QAAQ,EACRC,WAAY,YACZC,WAAY,KACZC,UAAW,UAEbC,KAAkB,OAAZrB,EACNsB,QAASjB,EACTkB,QAASZ,IAEXa,SAASC,eAAe,QAE1B,IACL,C","sources":["plugins/Sketch/components/FeatureTextSetter.js"],"sourcesContent":["import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport Dialog from \"../../../components/Dialog/Dialog\";\n\n// This component has a couple of responsibilities:\n// - 1) Subscribe to text-feature-creation\n// - 2) Prompt the user with a modal containing a text-input-field\n// - 3) Applied the text from the modal to the supplied feature.\nconst FeatureTextSetter = ({ drawModel, localObserver }) => {\n  // We're gonna need to keep track of if we've been supplied with a feature\n  // that we are supposed to apply text to.\n  const [feature, setFeature] = React.useState(null);\n\n  // We are going to need a handler for when the event on the observer fires.\n  const handleFeatureCreated = React.useCallback((addedFeature) => {\n    // We're only interested in features with the type \"Text\"\n    if (addedFeature.get(\"DRAW_METHOD\") === \"Text\") {\n      setFeature(addedFeature);\n    }\n  }, []);\n\n  // We are also going to need a handler for when the user closes the dialog\n  const handleCloseClick = React.useCallback(\n    (textFieldValue) => {\n      // If the user did not write any text, we remove the feature from\n      // the draw-source. (Since we don't want text-features without text).\n      if (textFieldValue.length === 0) {\n        drawModel.removeFeature(feature);\n      } else {\n        feature.set(\"USER_TEXT\", textFieldValue);\n        drawModel.refreshFeaturesTextStyle();\n      }\n      setFeature(null);\n    },\n    [drawModel, feature]\n  );\n\n  // If the user aborts, we make sure to remove the feature from the source\n  const handleAbortClick = React.useCallback(() => {\n    drawModel.removeFeature(feature);\n    setFeature(null);\n  }, [drawModel, feature]);\n\n  // Let's add an effect where we can subscribe to the addFeature-event\n  React.useEffect(() => {\n    localObserver.subscribe(\"drawModel.featureAdded\", handleFeatureCreated);\n    return () => {\n      localObserver.unsubscribe(\"drawModel.featureAdded\");\n    };\n  }, [drawModel, localObserver, handleFeatureCreated]);\n\n  return feature !== null\n    ? createPortal(\n        <Dialog\n          options={{\n            text: \"\",\n            prompt: true,\n            headerText: \"Ange text\",\n            buttonText: \"Ok\",\n            abortText: \"Avbryt\",\n          }}\n          open={feature !== null}\n          onClose={handleCloseClick}\n          onAbort={handleAbortClick}\n        />,\n        document.getElementById(\"map\")\n      )\n    : null;\n};\n\nexport default FeatureTextSetter;\n"],"names":["drawModel","localObserver","React","feature","setFeature","handleFeatureCreated","addedFeature","get","handleCloseClick","textFieldValue","length","removeFeature","set","refreshFeaturesTextStyle","handleAbortClick","subscribe","unsubscribe","createPortal","options","text","prompt","headerText","buttonText","abortText","open","onClose","onAbort","document","getElementById"],"sourceRoot":""}
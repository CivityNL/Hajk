{"version":3,"file":"static/js/361.f9226acd.chunk.js","mappings":"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","sources":["components/Card.js","plugins/BaseWindowPlugin.js","plugins/DocumentHandler/documentWindow/DocumentWindowBase.js","plugins/DocumentHandler/documentWindow/Progress.js"],"sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Card as MUICard,\n  CardHeader,\n  CardActionArea,\n  Avatar,\n} from \"@mui/material\";\n\nconst StyledCard = styled(MUICard)(({ theme }) => ({\n  marginBottom: theme.spacing(1),\n  width: \"210px\",\n  [theme.breakpoints.down(\"sm\")]: {\n    boxShadow: \"none\",\n    borderBottom: \"1px solid #ccc\",\n    borderRadius: 0,\n    margin: 0,\n    width: \"100%\",\n    justifyContent: \"left\",\n  },\n}));\n\nconst StyledAvatar = styled(Avatar)(({ theme }) => ({\n  background: theme.palette.text.primary,\n}));\n\nclass Card extends React.PureComponent {\n  state = {\n    open: false,\n    text: \"\",\n  };\n\n  static propTypes = {\n    abstract: propTypes.string.isRequired,\n    icon: propTypes.object.isRequired,\n    onClick: propTypes.func.isRequired,\n    title: propTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    abstract: \"Beskrivning saknas\",\n    title: \"Titel saknas\",\n  };\n\n  render() {\n    const { abstract, icon, onClick, title } = this.props;\n\n    return (\n      <StyledCard onClick={onClick}>\n        <CardActionArea>\n          <CardHeader\n            avatar={<StyledAvatar>{icon}</StyledAvatar>}\n            title={title}\n            subheader={abstract}\n          />\n        </CardActionArea>\n      </StyledCard>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { isMobile } from \"./../utils/IsMobile\";\nimport { createPortal } from \"react-dom\";\nimport { Hidden, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\nimport Window from \"../components/Window.js\";\nimport Card from \"../components/Card.js\";\nimport PluginControlButton from \"../components/PluginControlButton\";\n\nclass BaseWindowPlugin extends React.PureComponent {\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    children: propTypes.object.isRequired,\n    custom: propTypes.object.isRequired,\n    map: propTypes.object.isRequired,\n    options: propTypes.object.isRequired,\n    type: propTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    // 'type' is basically a unique identifier for each plugin\n    this.type = props.type.toLowerCase() || undefined;\n\n    // There will be defaults in props.custom, so that each plugin has own default title/description\n    this.description = props.options.description || props.custom.description;\n\n    // Should Window be visible at start?\n    const visibleAtStart =\n      (this.props.app.config.mapConfig.map.clean === false && // Never show in clean mode\n        (isMobile\n          ? props.options.visibleAtStartMobile\n          : props.options.visibleAtStart)) ||\n      false;\n\n    // If plugin is shown at start, we want to register it as shown in the Analytics module too.\n    // Normally, the event would be sent when user clicks on the button that activates the plugin,\n    // but in this case there won't be any click as the window will be visible at start.\n    if (visibleAtStart) {\n      this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n        eventName: \"pluginShown\",\n        pluginName: this.type,\n        activeMap: this.props.app.config.activeMap,\n      });\n    }\n\n    // Title and Color are kept in state and not as class properties. Keeping them in state\n    // ensures re-render when new props arrive and update the state variables (see componentDidUpdate() too).\n    this.state = {\n      title: props.options.title || props.custom.title || \"Unnamed plugin\",\n      color: props.options.color || props.custom.color || null,\n      windowVisible: visibleAtStart,\n    };\n\n    // Title is a special case: we want to use the state.title and pass on to Window in order\n    // to update Window's title dynamically. At the same time, we want all other occurrences,\n    // e.g. Widget or Drawer button's label to remain the same.\n    this.title = props.options.title || props.custom.title || \"Unnamed plugin\";\n\n    // Try to get values from admin's option. Fallback to customs from Plugin defaults, or finally to hard-coded values.\n    this.width = props.options.width || props.custom.width || 400;\n    this.height = props.options.height || props.custom.height || \"auto\";\n    this.position = props.options.position || props.custom.position || \"left\";\n\n    // Register Window in our global register\n    props.app.registerWindowPlugin(this);\n\n    // Subscribe to a global event that makes it possible to show/hide Windows.\n    // First we prepare a unique event name for each plugin so it looks like '{pluginName}.showWindow'.\n    const eventName = `${this.type}.showWindow`;\n    // Next, subscribe to that event, expect 'opts' array.\n    // To find all places where this event is publish, search for 'globalObserver.publish(\"show'\n    props.app.globalObserver.subscribe(eventName, (opts) => {\n      this.showWindow(opts);\n    });\n\n    // Same as above, but to close the window.\n    const closeEventName = `${this.type}.closeWindow`;\n\n    props.app.globalObserver.subscribe(closeEventName, () => {\n      this.closeWindow();\n    });\n  }\n\n  // Does not run on initial render, but runs on subsequential re-renders.\n  componentDidUpdate(prevProps) {\n    // Window's title and color can be updated on-the-flight, so we keep them\n    // in state and ensure that state is updated when new props arrive.\n    prevProps.custom.title !== this.props.custom.title &&\n      this.setState({ title: this.props.custom.title });\n\n    prevProps.custom.color !== this.props.custom.color &&\n      this.setState({ color: this.props.custom.color });\n  }\n\n  pluginIsWidget(target) {\n    return [\"left\", \"right\"].includes(target);\n  }\n\n  handleButtonClick = (e) => {\n    this.showWindow({\n      hideOtherPluginWindows: true,\n      runCallback: true,\n    });\n    this.props.app.globalObserver.publish(\"core.onlyHideDrawerIfNeeded\");\n  };\n\n  showWindow = (opts) => {\n    const hideOtherPluginWindows = opts.hideOtherPluginWindows || true,\n      runCallback = opts.runCallback || true;\n\n    // Let the App know which tool is currently active\n    this.props.app.activeTool = this.type;\n\n    // Tell the Analytics model about this\n    this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n      eventName: \"pluginShown\",\n      pluginName: this.type,\n      activeMap: this.props.app.config.activeMap,\n    });\n\n    // Don't continue if visibility hasn't changed\n    if (this.state.windowVisible === true) {\n      return null;\n    }\n\n    hideOtherPluginWindows === true && this.props.app.onWindowOpen(this);\n\n    this.setState(\n      {\n        windowVisible: true,\n      },\n      () => {\n        // If there's a callback defined in custom, run it\n        runCallback === true &&\n          typeof this.props.custom.onWindowShow === \"function\" &&\n          this.props.custom.onWindowShow();\n      }\n    );\n  };\n\n  closeWindow = () => {\n    // If closeWindow was initiated by the tool that is currently\n    // active, we should unset the activeTool property\n    if (this.type === this.props.app.activeTool)\n      this.props.app.activeTool = undefined;\n\n    this.setState(\n      {\n        windowVisible: false,\n      },\n      () => {\n        typeof this.props.custom.onWindowHide === \"function\" &&\n          this.props.custom.onWindowHide();\n      }\n    );\n  };\n  /**\n   * @summary Render the plugin and its buttons according to settings in admin.\n   * @description See comments in code to follow the rendering logic.\n   * @param {*} custom\n   * @returns {object} React.Component\n   * @memberof BaseWindowPlugin\n   */\n  renderWindow(custom) {\n    const { target } = this.props.options;\n    // BaseWindowPlugin, which calls this method, will supply an object.\n    // If that object contains a render() function, we want to call it\n    // and bypass any other functionality from this method.\n    return typeof custom?.render === \"function\" ? (\n      custom.render()\n    ) : (\n      // If there was not custom render method, we do \"normal\" rendering.\n      // That includes rendering the plugin Window itself, as well as a\n      // button (that will trigger opening of the plugin Window).\n      <>\n        <Window\n          globalObserver={this.props.app.globalObserver}\n          title={this.state.title}\n          color={this.state.color}\n          onClose={this.closeWindow}\n          open={this.state.windowVisible}\n          onResize={this.props.custom.onResize}\n          onMaximize={this.props.custom.onMaximize}\n          onMinimize={this.props.custom.onMinimize}\n          draggingEnabled={this.props.custom.draggingEnabled}\n          customPanelHeaderButtons={this.props.custom.customPanelHeaderButtons}\n          resizingEnabled={this.props.custom.resizingEnabled}\n          scrollable={this.props.custom.scrollable}\n          allowMaximizedWindow={this.props.custom.allowMaximizedWindow}\n          disablePadding={this.props.custom.disablePadding}\n          width={this.width}\n          height={this.height}\n          position={this.position}\n          mode=\"window\"\n          layerswitcherConfig={this.props.app.config.mapConfig.tools.find(\n            (t) => t.type === \"layerswitcher\"\n          )}\n        >\n          {/* We have to pass windowVisible down to the children so that we can conditionally render\n          the <Tabs /> component, since it does not accept components with display: \"none\". We use the\n          windowVisible-prop to make sure that we don't render the <Tabs /> when the window\n          is not visible.*/}\n          {React.cloneElement(this.props.children, {\n            windowVisible: this.state.windowVisible,\n          })}\n        </Window>\n        {/* Drawer buttons and Widget buttons should render a Drawer button. */}\n        {(target === \"toolbar\" || this.pluginIsWidget(target)) &&\n          this.renderDrawerButton()}\n        {/* Widget buttons must also render a Widget */}\n        {this.pluginIsWidget(target) &&\n          this.renderWidgetButton(`${target}-column`)}\n        {/* Finally, render a Control button if target has that value */}\n        {target === \"control\" && this.renderControlButton()}\n      </>\n    );\n  }\n\n  /**\n   * This is a bit of a special case. This method will render\n   * not only plugins specified as Drawer plugins (target===toolbar),\n   * but it will also render Widget plugins - given some special condition.\n   *\n   * Those special conditions are small screens, where there's no screen\n   * estate to render the Widget button in Map Overlay.\n   */\n  renderDrawerButton() {\n    return createPortal(\n      <Hidden mdUp={this.pluginIsWidget(this.props.options.target)}>\n        <ListItem\n          button\n          divider={true}\n          selected={this.state.windowVisible}\n          onClick={this.handleButtonClick}\n        >\n          <ListItemIcon>{this.props.custom.icon}</ListItemIcon>\n          <ListItemText primary={this.title} />\n        </ListItem>\n      </Hidden>,\n      document.getElementById(\"plugin-buttons\")\n    );\n  }\n\n  renderWidgetButton(id) {\n    return createPortal(\n      // Hide Widget button on small screens, see renderDrawerButton too\n      <Hidden mdDown>\n        <Card\n          icon={this.props.custom.icon}\n          onClick={this.handleButtonClick}\n          title={this.title}\n          abstract={this.description}\n        />\n      </Hidden>,\n      document.getElementById(id)\n    );\n  }\n\n  renderControlButton() {\n    return createPortal(\n      <PluginControlButton\n        icon={this.props.custom.icon}\n        onClick={this.handleButtonClick}\n        title={this.title}\n        abstract={this.description}\n      />,\n      document.getElementById(\"plugin-control-buttons\")\n    );\n  }\n\n  render() {\n    // Don't render if \"clean\" query param is specified, otherwise go on\n    return (\n      this.props.app.config.mapConfig.map.clean !== true &&\n      this.renderWindow(this.props.custom)\n    );\n  }\n}\n\nexport default BaseWindowPlugin;\n","import React from \"react\";\nimport { ThemeProvider, StyledEngineProvider } from \"@mui/material/styles\";\nimport BaseWindowPlugin from \"../../BaseWindowPlugin\";\nimport DocumentViewer from \"./DocumentViewer\";\nimport PrintWindow from \"../printMenu/PrintWindow\";\nimport MenuBookIcon from \"@mui/icons-material/MenuBook\";\nimport Progress from \"./Progress\";\nimport { CustomLink } from \"../utils/ContentComponentFactory\";\nimport { withSnackbar } from \"notistack\";\nimport PrintIcon from \"@mui/icons-material/Print\";\n\nclass DocumentWindowBase extends React.PureComponent {\n  snackbarKey = null;\n\n  shouldShowDocumentOnStart = () => {\n    const { options } = this.props;\n    return options.documentOnStart ? true : false;\n  };\n\n  scrollInDocument = (headerIdentifier) => {\n    const { localObserver, model, document } = this.props;\n\n    if (headerIdentifier) {\n      localObserver.publish(\n        \"scroll-to-chapter\",\n        model.getHeaderRef(document, headerIdentifier)\n      );\n    } else {\n      localObserver.publish(\n        \"scroll-to-top\",\n        model.getHeaderRef(document, headerIdentifier)\n      );\n    }\n  };\n\n  showHeaderInDocument = ({ documentName, headerIdentifier }) => {\n    const { enqueueSnackbar } = this.props;\n    if (documentName) {\n      this.props.showDocument(documentName).then(\n        () => {\n          this.scrollInDocument(headerIdentifier);\n        },\n        () => {\n          enqueueSnackbar(\"Kunde inte öppna dokumentet\", {\n            variant: \"warning\",\n          });\n\n          console.warn(\n            \"Could not fetch document, link to document probably reference a document not present in panelmenu\"\n          );\n        }\n      );\n    }\n  };\n\n  displayMaplinkLoadingBar = () => {\n    const { enqueueSnackbar } = this.props;\n    this.snackbarKey = enqueueSnackbar(\"Kartan laddar... \", {\n      variant: \"information\",\n      persist: true,\n      preventDuplicate: true,\n      transitionDuration: { enter: 0, exit: 0 },\n      anchorOrigin: { vertical: \"bottom\", horizontal: \"center\" },\n    });\n  };\n\n  closeMaplinkLoadingBar = () => {\n    const { closeSnackbar } = this.props;\n    closeSnackbar(this.snackbarKey);\n  };\n\n  togglePrintWindow = () => {\n    this.setState({\n      showPrintWindow: !this.state.showPrintWindow,\n    });\n  };\n\n  handleInfoClickRequest = (infoClickEvent) => {\n    const htmlObject = document.createElement(\"span\");\n    htmlObject.innerHTML = infoClickEvent.payload.replace(/\\\\/g, \"\");\n    const aTag = htmlObject.getElementsByTagName(\"a\")[0];\n    if (aTag) {\n      infoClickEvent.resolve(\n        <CustomLink\n          localObserver={this.props.localObserver}\n          aTag={aTag}\n          bottomMargin={false}\n        ></CustomLink>\n      );\n    } else {\n      console.error(\n        \"Could not render DocumentHandler link for payload:\",\n        infoClickEvent.payload\n      );\n      // Must resolve with a value, even null will do, but something more helpful could be nice.\n      // The reason we must do it is because this value is used in React's render, and undefined will not render.\n      infoClickEvent.resolve(<b>Could not render DocumentHandler link</b>);\n    }\n  };\n\n  bindSubscriptions = () => {\n    const { localObserver, app } = this.props;\n    app.globalObserver.subscribe(\n      \"core.info-click-documenthandler\",\n      this.handleInfoClickRequest\n    );\n    localObserver.subscribe(\"set-active-document\", this.showHeaderInDocument);\n    localObserver.subscribe(\"maplink-loading\", this.displayMaplinkLoadingBar);\n    localObserver.subscribe(\n      \"map-animation-complete\",\n      this.closeMaplinkLoadingBar\n    );\n  };\n\n  isModelReady = () => {\n    const { model } = this.props;\n    return model ? true : false;\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const { localObserver } = this.props;\n\n    if (prevProps.model !== this.props.model) {\n      if (this.isModelReady()) {\n        this.bindSubscriptions();\n\n        if (this.shouldShowDocumentOnStart()) {\n          localObserver.publish(\"set-active-document\", {\n            documentName: this.props.options.documentOnStart,\n            headerIdentifier: null,\n          });\n        }\n      }\n    }\n  };\n\n  getDocumentViewer = () => {\n    const { documentWindowMaximized, document } = this.props;\n    return (\n      <DocumentViewer\n        documentWindowMaximized={documentWindowMaximized}\n        activeDocument={document}\n        togglePrintWindow={this.togglePrintWindow}\n        {...this.props}\n      />\n    );\n  };\n\n  render() {\n    const {\n      options,\n      localObserver,\n      documentWindowMaximized,\n      document,\n      togglePrintWindow,\n      onWindowHide,\n      showPrintWindow,\n      customTheme,\n      onMinimize,\n      onMaximize,\n    } = this.props;\n    const modelReady = this.isModelReady();\n    const customHeaderButtons = options.enablePrint\n      ? [\n          {\n            icon: <PrintIcon />,\n            description: \"Öppna utskrift\",\n            onClickCallback: togglePrintWindow,\n          },\n        ]\n      : [];\n    return (\n      <BaseWindowPlugin\n        {...this.props}\n        type=\"DocumentViewer\"\n        custom={{\n          icon: <MenuBookIcon />,\n          title: document?.documentTitle || options.windowTitle || \"Documents\",\n          color: document?.documentColor || \"#ffffff\",\n          customPanelHeaderButtons: customHeaderButtons,\n          description: \"En kort beskrivning som visas i widgeten\",\n          height: options.height || \"auto\",\n          width: options.width || 600,\n          scrollable: false,\n          onMinimize: onMinimize,\n          onMaximize: onMaximize,\n          onWindowHide: onWindowHide,\n          draggingEnabled: false,\n          resizingEnabled: false,\n          allowMaximizedWindow: false,\n        }}\n      >\n        {document != null && modelReady ? (\n          !showPrintWindow ? (\n            customTheme ? (\n              <StyledEngineProvider injectFirst>\n                <ThemeProvider theme={customTheme}>\n                  {this.getDocumentViewer()}\n                </ThemeProvider>\n              </StyledEngineProvider>\n            ) : (\n              this.getDocumentViewer()\n            )\n          ) : (\n            <PrintWindow\n              customTheme={customTheme}\n              activeDocument={document}\n              documentWindowMaximized={documentWindowMaximized}\n              togglePrintWindow={togglePrintWindow}\n              localObserver={localObserver}\n              options={this.props.options}\n              {...this.props}\n            />\n          )\n        ) : (\n          <Progress />\n        )}\n      </BaseWindowPlugin>\n    );\n  }\n}\n\nexport default withSnackbar(DocumentWindowBase);\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nclass Progress extends React.PureComponent {\n  render() {\n    return (\n      <Grid\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        container\n        sx={{\n          height: \"100%\",\n        }}\n      >\n        <CircularProgress\n          justify=\"center\"\n          sx={{\n            height: \"100%\",\n          }}\n        />\n      </Grid>\n    );\n  }\n}\n\nexport default Progress;\n"],"names":["StyledCard","styled","MUICard","theme","marginBottom","spacing","width","breakpoints","down","boxShadow","borderBottom","borderRadius","margin","justifyContent","StyledAvatar","Avatar","background","palette","text","primary","Card","state","open","this","props","abstract","icon","onClick","title","avatar","subheader","React","defaultProps","BaseWindowPlugin","handleButtonClick","e","showWindow","hideOtherPluginWindows","runCallback","app","globalObserver","publish","opts","activeTool","type","eventName","pluginName","activeMap","config","windowVisible","onWindowOpen","setState","custom","onWindowShow","closeWindow","undefined","onWindowHide","toLowerCase","description","options","visibleAtStart","mapConfig","map","clean","isMobile","visibleAtStartMobile","color","height","position","registerWindowPlugin","subscribe","closeEventName","prevProps","target","includes","render","onClose","onResize","onMaximize","onMinimize","draggingEnabled","customPanelHeaderButtons","resizingEnabled","scrollable","allowMaximizedWindow","disablePadding","mode","layerswitcherConfig","tools","find","t","children","pluginIsWidget","renderDrawerButton","renderWidgetButton","renderControlButton","createPortal","mdUp","button","divider","selected","document","getElementById","id","mdDown","renderWindow","DocumentWindowBase","snackbarKey","shouldShowDocumentOnStart","documentOnStart","scrollInDocument","headerIdentifier","localObserver","model","getHeaderRef","showHeaderInDocument","documentName","enqueueSnackbar","showDocument","then","variant","console","warn","displayMaplinkLoadingBar","persist","preventDuplicate","transitionDuration","enter","exit","anchorOrigin","vertical","horizontal","closeMaplinkLoadingBar","closeSnackbar","togglePrintWindow","showPrintWindow","handleInfoClickRequest","infoClickEvent","htmlObject","createElement","innerHTML","payload","replace","aTag","getElementsByTagName","resolve","CustomLink","bottomMargin","error","bindSubscriptions","isModelReady","componentDidUpdate","prevState","getDocumentViewer","documentWindowMaximized","activeDocument","customTheme","modelReady","customHeaderButtons","enablePrint","onClickCallback","documentTitle","windowTitle","documentColor","injectFirst","withSnackbar","Progress","alignItems","container","sx","justify"],"sourceRoot":""}
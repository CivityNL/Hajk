{"version":3,"file":"static/js/4083.ef805fcd.chunk.js","mappings":"kMAKe,SAASA,EAAgBC,GAEtC,MAAwCC,EAAAA,SAAe,CACrDC,qBAAqBC,EAAAA,EAAAA,gBACrBC,qBAAqBC,EAAAA,EAAAA,kBAFvB,eAAOC,EAAP,KAAqBC,EAArB,KAuBA,OAfAN,EAAAA,WAAgB,WACd,IAAMO,EAAiBR,EAAeS,UACpC,2BACA,WACEF,EAAgB,CACdL,qBAAqBC,EAAAA,EAAAA,gBACrBC,qBAAqBC,EAAAA,EAAAA,iBAExB,IAEH,OAAO,WACLG,EAAeE,aAChB,CACF,GAAE,CAACV,IAEGM,CACR,C","sources":["hooks/useCookieStatus.js"],"sourcesContent":["import React from \"react\";\nimport { functionalOk, thirdPartyOk } from \"../models/Cookie\";\n\n// A simple hook which will return an object stating wether functional- and third-party-cookies\n// are OK to use or not (depending on the users choice in the cookie-notice).\nexport default function useCookieStatus(globalObserver) {\n  // Let's combine both statuses in one state-object since they will always be updated at the same time.\n  const [cookieStatus, setCookieStatus] = React.useState({\n    functionalCookiesOk: functionalOk(),\n    thirdPartyCookiesOk: thirdPartyOk(),\n  });\n\n  // An effect subscribing to an event sent from the cookie-handler when the\n  // cookie-settings change. If the settings change, we make sure to update the\n  // state with the current cookie-status so that we can render the appropriate components.\n  React.useEffect(() => {\n    const cookieListener = globalObserver.subscribe(\n      \"core.cookieLevelChanged\",\n      () => {\n        setCookieStatus({\n          functionalCookiesOk: functionalOk(),\n          thirdPartyCookiesOk: thirdPartyOk(),\n        });\n      }\n    );\n    return () => {\n      cookieListener.unsubscribe();\n    };\n  }, [globalObserver]);\n\n  return cookieStatus;\n}\n"],"names":["useCookieStatus","globalObserver","React","functionalCookiesOk","functionalOk","thirdPartyCookiesOk","thirdPartyOk","cookieStatus","setCookieStatus","cookieListener","subscribe","unsubscribe"],"sourceRoot":""}
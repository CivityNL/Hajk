{"version":3,"file":"static/js/2830.0cf16c24.chunk.js","mappings":"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","sources":["plugins/Draw/DrawView.js","plugins/Draw/components/Symbology.js","../node_modules/@mui/icons-material/FolderOpen.js","../node_modules/@mui/icons-material/SaveAlt.js","../node_modules/@mui/material/esm/NativeSelect/NativeSelect.js"],"sourcesContent":["import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { styled } from \"@mui/material/styles\";\nimport Button from \"@mui/material/Button\";\nimport Divider from \"@mui/material/Divider\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\nimport SaveAltIcon from \"@mui/icons-material/SaveAlt\";\nimport NativeSelect from \"@mui/material/NativeSelect\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Input from \"@mui/material/Input\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Typography from \"@mui/material/Typography\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { withSnackbar } from \"notistack\";\nimport Dialog from \"../../components/Dialog/Dialog\";\nimport Symbology from \"./components/Symbology.js\";\n\n// The css-file is only targeting the ol-draw-interaction, and styles the tooltip.\n// TODO: Remove?\nimport \"./draw.css\";\n\nconst StyledFormControl = styled(FormControl)(() => ({\n  width: \"100%\",\n}));\n\nconst Row = styled(\"div\")(({ theme }) => ({\n  width: \"100%\",\n  marginBottom: theme.spacing(1),\n}));\n\nconst StyledDivider = styled(Divider)(({ theme }) => ({\n  marginTop: theme.spacing(2),\n  marginBottom: theme.spacing(1),\n}));\n\nclass DrawView extends React.PureComponent {\n  state = {\n    shape: \"LineString\",\n    drawMethod: \"add\",\n    displayText: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.model = this.props.model;\n    this.localObserver = this.props.localObserver;\n    this.globalObserver = this.props.globalObserver;\n    this.snackbarKey = null;\n    this.localObserver.subscribe(\"dialog\", (feature) => {\n      this.setState({\n        feature: feature,\n        dialog: true,\n        dialogPrompt: true,\n        dialogText: \"\",\n        dialogButtonText: \"OK\",\n        dialogAbortText: \"Avbryt\",\n        dialogCloseCallback: this.onCloseTextDialog,\n        dialogAbortCallback: this.onAbortTextDialog,\n      });\n    });\n    this.addMapDropListeners();\n  }\n\n  addMapDropListeners = () => {\n    const mapDiv = document.getElementById(\"map\");\n    [\"drop\", \"dragover\", \"dragend\", \"dragleave\", \"dragenter\"].forEach(\n      (eventName) => {\n        mapDiv.addEventListener(\n          eventName,\n          this.preventDefaultDropBehavior,\n          false\n        );\n      }\n    );\n    mapDiv.addEventListener(\"dragenter\", this.handleDragEnter, false);\n    mapDiv.addEventListener(\"drop\", this.handleDrop, false);\n  };\n\n  handleDragEnter = (e) => {\n    this.snackbarKey = this.props.enqueueSnackbar(\n      \"Släpp en KML-fil i kartan för att importera!\",\n      { preventDuplicate: true }\n    );\n  };\n\n  handleDrop = (e) => {\n    try {\n      const file = e.dataTransfer.files[0];\n      if (file) {\n        const fileType = file.type ? file.type : file.name.split(\".\").pop();\n        //Not sure about filetype for kml... Qgis- and Hajk-generated kml:s does not contain any information about type.\n        //The application/vnd... is a guess.\n        if (\n          fileType === \"kml\" ||\n          fileType === \"application/vnd.google-earth.kml+xml\"\n        ) {\n          this.globalObserver.publish(\"draw.showWindow\", {\n            hideOtherPlugins: false,\n          });\n          this.addDroppedKmlToMap(file);\n        }\n      }\n    } catch (error) {\n      this.props.enqueueSnackbar(\"KML-filen kunde inte importeras.\", {\n        variant: \"error\",\n      });\n      console.error(`Error importing KML-file... ${error}`);\n    }\n  };\n\n  addDroppedKmlToMap = (file) => {\n    const { model } = this.props;\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      model.import(reader.result, (error) => {\n        this.handleImportError(error);\n      });\n      this.props.closeSnackbar(this.snackbarKey);\n      this.snackbarKey = null;\n    };\n\n    reader.readAsText(file);\n  };\n\n  handleImportError = (error) => {\n    if (error === \"no-features-found\") {\n      this.props.enqueueSnackbar(\"Inga ritobjekt hittades i KML-filen.\", {\n        variant: \"warning\",\n      });\n    } else {\n      throw error;\n    }\n  };\n\n  preventDefaultDropBehavior = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  handleChange = (name) => (event) => {\n    this.setState({ [name]: event.target.value });\n    if (name === \"shape\") {\n      this.props.model.setType(event.target.value);\n    }\n    if (name === \"drawMethod\") {\n      this.props.model.setDrawMethod(event.target.value);\n    }\n  };\n\n  onAbortTextDialog = () => {\n    this.setState({\n      dialog: false,\n    });\n  };\n\n  onCloseTextDialog = (text) => {\n    this.props.model.openDialog(false);\n\n    const { feature } = this.state;\n    feature.set(\"type\", \"Text\");\n    feature.set(\"text\", text);\n    feature.setStyle(this.props.model.getStyle(feature));\n    this.setState({\n      dialog: false,\n    });\n    this.props.model.redraw();\n  };\n\n  renderDialog() {\n    if (this.state.dialog) {\n      this.props.model.openDialog(true);\n\n      return createPortal(\n        <Dialog\n          options={{\n            text: this.state.dialogText,\n            prompt: this.state.dialogPrompt,\n            headerText: this.state.dialogHeaderText || \"Ange text\",\n            buttonText: this.state.dialogButtonText || \"OK\",\n            abortText: this.state.dialogAbortText,\n            useLegacyNonMarkdownRenderer: true,\n          }}\n          open={this.state.dialog}\n          onClose={this.state.dialogCloseCallback}\n          onAbort={this.state.dialogAbortCallback}\n        />,\n        document.getElementById(\"map\")\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderForm() {\n    const { drawMethod } = this.state;\n\n    if (drawMethod === \"add\") {\n      return (\n        <>\n          <Row>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\" htmlFor=\"shape-native-helper\">\n                Typ av ritobjekt\n              </InputLabel>\n              <NativeSelect\n                value={this.state.shape}\n                onChange={this.handleChange(\"shape\")}\n                input={<Input name=\"shape\" id=\"shape-native-helper\" />}\n              >\n                <option value=\"LineString\">Linje</option>\n                <option value=\"Text\">Text</option>\n                <option value=\"Polygon\">Yta</option>\n                <option value=\"Square\">Rektangel</option>\n                <option value=\"Circle\">Cirkel</option>\n                <option value=\"Point\">Punkt</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </Row>\n          <StyledDivider>Ritmanér</StyledDivider>\n          <Row>\n            <Symbology type={this.state.shape} model={this.props.model} />\n          </Row>\n        </>\n      );\n    }\n\n    if (drawMethod === \"edit\") {\n      return (\n        <>\n          <Typography>\n            Klicka på ett ritobjekt i kartan som du vill editera. Du kan editera\n            dina egna ritobjekt. För att editera andra objekt använd\n            editeraverktyget.\n          </Typography>\n        </>\n      );\n    }\n\n    if (drawMethod === \"remove\") {\n      return (\n        <>\n          <Typography>\n            Klicka på ett ritobjekt i kartan som du vill ta bort. Du kan ta bort\n            dina egna ritobjekt. För att ta bort andra objekt använd\n            editeraverktyget.\n          </Typography>\n        </>\n      );\n    }\n\n    if (drawMethod === \"move\") {\n      return (\n        <>\n          <Typography>\n            Klicka på det ritobjekt i kartan som du vill flytta för att aktivera\n            flyttläge, dra därefter objektet till ny position. Du kan flytta\n            dina egna ritobjekt. För att flytta andra objekt använd\n            editeraverktyget.\n          </Typography>\n        </>\n      );\n    }\n\n    if (drawMethod === \"import\") {\n      return (\n        <>\n          <div>\n            <Button sx={{ width: \"100%\" }} onClick={this.openUploadDialog}>\n              <FolderOpenIcon />\n              &nbsp; Importera ritobjekt\n            </Button>\n          </div>\n          <div>\n            <Button sx={{ width: \"100%\" }} onClick={this.props.model.export}>\n              <SaveAltIcon />\n              &nbsp; Exportera ritobjekt\n            </Button>\n          </div>\n        </>\n      );\n    }\n  }\n\n  openUploadDialog = (e) => {\n    this.setState({\n      dialog: true,\n      dialogPrompt: false,\n      dialogHeaderText: \"Ladda upp innehåll\",\n      dialogText: this.renderImport(),\n      dialogButtonText: \"Avbryt\",\n      dialogCloseCallback: this.onCloseUploadDialog,\n    });\n  };\n\n  onCloseUploadDialog = () => {\n    this.setState({\n      dialog: false,\n    });\n    return;\n  };\n\n  renderImport() {\n    return (\n      <div>\n        <Typography>Välj KML-fil att importera:</Typography>\n        <Row>\n          <input\n            type=\"file\"\n            name=\"files[]\"\n            accept=\".kml\"\n            multiple={false}\n            id=\"file-uploader\"\n          />\n        </Row>\n        <Row>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            value=\"Ladda upp\"\n            onClick={() => {\n              var fileUploader = document.getElementById(\"file-uploader\");\n              var file = fileUploader.files[0];\n              var reader = new FileReader();\n              reader.onload = () => {\n                this.onCloseUploadDialog();\n                this.props.model.import(reader.result, (error) => {\n                  try {\n                    this.handleImportError(error);\n                  } catch (error) {\n                    console.error(`Error importing KML-file... ${error}`);\n                  }\n                });\n              };\n              if (file) {\n                reader.readAsText(file);\n              }\n            }}\n          >\n            Ladda upp\n          </Button>\n        </Row>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Row>\n            <Button\n              variant=\"contained\"\n              sx={{ width: \"100%\" }}\n              onClick={this.props.model.clear}\n            >\n              <DeleteIcon />\n              Ta bort alla ritobjekt\n            </Button>\n          </Row>\n          <Row>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={this.state.displayText}\n                  onChange={() => {\n                    this.setState({\n                      displayText: !this.state.displayText,\n                    });\n                    this.model.displayText = !this.model.displayText;\n                    this.localObserver.publish(\"update\");\n                  }}\n                  color=\"primary\"\n                />\n              }\n              label=\"Visa mått på ritobjekt\"\n            />\n          </Row>\n          <StyledDivider>Inställningar</StyledDivider>\n          <StyledFormControl>\n            <InputLabel variant=\"standard\" htmlFor=\"drawMethod-native-helper\">\n              Aktivitet\n            </InputLabel>\n            <NativeSelect\n              value={this.state.drawMethod}\n              onChange={this.handleChange(\"drawMethod\")}\n              input={<Input name=\"drawMethod\" id=\"drawMethod-native-helper\" />}\n            >\n              <option value=\"abort\">Ingen</option>\n              <option value=\"add\">Lägg till objekt</option>\n              <option value=\"remove\">Ta bort objekt</option>\n              <option value=\"edit\">Editera objekt</option>\n              <option value=\"move\">Flytta objekt</option>\n              <option value=\"import\">Importera/Exportera</option>\n            </NativeSelect>\n          </StyledFormControl>\n        </Row>\n        {this.renderForm()}\n        {this.renderDialog()}\n      </>\n    );\n  }\n}\n\nexport default withSnackbar(DrawView);\n","import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport { CompactPicker as ColorPicker } from \"react-color\";\nimport NativeSelect from \"@mui/material/NativeSelect\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Input from \"@mui/material/Input\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\n\nconst StyledFormControl = styled(FormControl)(({ theme }) => ({\n  width: \"100%\",\n  marginBottom: theme.spacing(1),\n}));\n\nconst Row = styled(\"div\")(({ theme }) => ({\n  width: \"100%\",\n  marginBottom: theme.spacing(1),\n}));\n\nclass Symbology extends React.PureComponent {\n  state = {\n    shape: \"LineString\",\n  };\n\n  componentDidMount() {\n    const { model } = this.props;\n    this.setState({\n      fontSize: model.fontSize,\n      fontTextColor: model.fontTextColor,\n      fontBackColor: model.fontBackColor,\n      fontStroke: model.fontStroke,\n      pointText: model.pointText,\n      pointColor: model.pointColor,\n      pointRadius: model.pointRadius,\n      lineColor: model.lineColor,\n      lineWidth: model.lineWidth,\n      lineStyle: model.lineStyle,\n      circleFillColor: model.circleFillColor,\n      circleLineColor: model.circleLineColor,\n      circleFillOpacity: model.circleFillOpacity,\n      circleLineStyle: model.circleLineStyle,\n      circleLineWidth: model.circleLineWidth,\n      circleRadius: model.circleRadius,\n      polygonLineColor: model.polygonLineColor,\n      polygonLineWidth: model.polygonLineWidth,\n      polygonLineStyle: model.polygonLineStyle,\n      polygonFillColor: model.polygonFillColor,\n      polygonFillOpacity: model.polygonFillOpacity,\n      squareFillColor: model.squareFillColor,\n      squareLineColor: model.squareLineColor,\n      squareFillOpacity: model.squareFillOpacity,\n      squareLineStyle: model.squareLineStyle,\n      squareLineWidth: model.squareLineWidth,\n      pointSettings: model.pointSettings,\n    });\n  }\n\n  update = (prop) => (e) => {\n    var value = e.hex ? e.hex : e.target.value,\n      state = {};\n\n    if (e.target && e.target.type === \"checkbox\") {\n      value = e.target.checked;\n    }\n\n    if (typeof value === \"string\") {\n      value = !Number.isNaN(parseFloat(value))\n        ? parseFloat(value)\n        : !Number.isNaN(parseInt(value))\n        ? parseInt(value)\n        : value;\n    }\n    state[prop] = value;\n    this.setState(state);\n    this.props.model[prop] = value;\n  };\n\n  renderPointSettings() {\n    switch (this.state.pointSettings) {\n      case \"point\":\n        return (\n          <Row>\n            <StyledFormControl>\n              <div>Färg</div>\n              <ColorPicker\n                color={this.state.pointColor}\n                onChange={this.update(\"pointColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Storlek</InputLabel>\n              <NativeSelect\n                value={this.state.pointRadius}\n                onChange={this.update(\"pointRadius\")}\n              >\n                <option value=\"4\">Liten</option>\n                <option value=\"7\">Normal</option>\n                <option value=\"14\">Stor</option>\n                <option value=\"20\">Större</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </Row>\n        );\n      case \"symbol\":\n        return <Row>Val av ikon är ännu inte tillgängligt.</Row>;\n      default:\n        return undefined;\n    }\n  }\n\n  render() {\n    const { type } = this.props;\n    switch (type) {\n      case \"Text\":\n        if (this.state.fontStroke === undefined) {\n          return <Row />;\n        }\n        return (\n          <div>\n            <Row>\n              <StyledFormControl>\n                <InputLabel variant=\"standard\">Textstorlek</InputLabel>\n                <NativeSelect\n                  value={this.state.fontSize}\n                  onChange={this.update(\"fontSize\")}\n                >\n                  <option value=\"8\">8</option>\n                  <option value=\"10\">10</option>\n                  <option value=\"12\">12</option>\n                  <option value=\"14\">14</option>\n                  <option value=\"16\">16</option>\n                  <option value=\"18\">18</option>\n                  <option value=\"20\">20</option>\n                  <option value=\"30\">30</option>\n                  <option value=\"40\">40</option>\n                  <option value=\"60\">60</option>\n                  <option value=\"80\">100</option>\n                </NativeSelect>\n              </StyledFormControl>\n            </Row>\n            <Row>\n              <StyledFormControl>\n                <div>Textfärg</div>\n                <ColorPicker\n                  color={this.state.fontTextColor}\n                  onChange={this.update(\"fontTextColor\")}\n                />\n              </StyledFormControl>\n            </Row>\n            <Row>\n              <StyledFormControl>\n                <div>Bakgrundsfärg text</div>\n                <ColorPicker\n                  color={this.state.fontBackColor}\n                  onChange={this.update(\"fontBackColor\")}\n                />\n              </StyledFormControl>\n            </Row>\n            <Row>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={this.state.fontStroke}\n                    onChange={this.update(\"fontStroke\")}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Ingen bakgrundsfärg\"\n              />\n            </Row>\n          </div>\n        );\n      case \"Point\":\n        return (\n          <div>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Välj typ</InputLabel>\n              <NativeSelect\n                value={this.state.pointSettings}\n                onChange={this.update(\"pointSettings\")}\n              >\n                <option key=\"point\" value=\"point\">\n                  Punkt\n                </option>\n                <option key=\"symbol\" value=\"symbol\">\n                  Symbol\n                </option>\n              </NativeSelect>\n            </StyledFormControl>\n            {this.renderPointSettings()}\n          </div>\n        );\n      case \"LineString\":\n        return (\n          <div>\n            <StyledFormControl>\n              <div>Färg</div>\n              <ColorPicker\n                color={this.state.lineColor}\n                onChange={this.update(\"lineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Tjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.lineWidth}\n                onChange={this.update(\"lineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Stil</InputLabel>\n              <NativeSelect\n                value={this.state.lineStyle}\n                onChange={this.update(\"lineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      case \"Circle\":\n        if (this.state.circleRadius === undefined) {\n          return <div />;\n        }\n        return (\n          <div>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Ange radie: </InputLabel>\n              <Input\n                type=\"text\"\n                value={this.state.circleRadius}\n                onChange={this.update(\"circleRadius\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Linjefärg</div>\n              <ColorPicker\n                color={this.state.circleLineColor}\n                onChange={this.update(\"circleLineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Fyllnadsfärg</div>\n              <ColorPicker\n                color={this.state.circleFillColor}\n                onChange={this.update(\"circleFillColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Opacitet</InputLabel>\n              <NativeSelect\n                value={this.state.circleFillOpacity}\n                onChange={this.update(\"circleFillOpacity\")}\n              >\n                <option value=\"0\">0% (genomskinlig)</option>\n                <option value=\"0.25\">25%</option>\n                <option value=\"0.5\">50%</option>\n                <option value=\"0.75\">75%</option>\n                <option value=\"1\">100% (fylld)</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjetjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.circleLineWidth}\n                onChange={this.update(\"circleLineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjestil</InputLabel>\n              <NativeSelect\n                value={this.state.circleLineStyle}\n                onChange={this.update(\"circleLineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      case \"Polygon\":\n        return (\n          <div>\n            <StyledFormControl>\n              <div>Linjefärg</div>\n              <ColorPicker\n                color={this.state.polygonLineColor}\n                onChange={this.update(\"polygonLineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Fyllnadsfärg</div>\n              <ColorPicker\n                color={this.state.polygonFillColor}\n                onChange={this.update(\"polygonFillColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Opacitet</InputLabel>\n              <NativeSelect\n                value={this.state.polygonFillOpacity}\n                onChange={this.update(\"polygonFillOpacity\")}\n              >\n                <option value=\"0\">0% (genomskinlig)</option>\n                <option value=\"0.25\">25%</option>\n                <option value=\"0.5\">50%</option>\n                <option value=\"0.75\">75%</option>\n                <option value=\"1\">100% (fylld)</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjetjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.polygonLineWidth}\n                onChange={this.update(\"polygonLineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjestil</InputLabel>\n              <NativeSelect\n                value={this.state.polygonLineStyle}\n                onChange={this.update(\"polygonLineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      case \"Square\":\n        return (\n          <div>\n            <StyledFormControl>\n              <div>Linjefärg</div>\n              <ColorPicker\n                color={this.state.squareLineColor}\n                onChange={this.update(\"squareLineColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <div>Fyllnadsfärg</div>\n              <ColorPicker\n                color={this.state.squareFillColor}\n                onChange={this.update(\"squareFillColor\")}\n              />\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Opacitet</InputLabel>\n              <NativeSelect\n                value={this.state.squareFillOpacity}\n                onChange={this.update(\"squareFillOpacity\")}\n              >\n                <option value=\"0\">0% (genomskinlig)</option>\n                <option value=\"0.25\">25%</option>\n                <option value=\"0.5\">50%</option>\n                <option value=\"0.75\">75%</option>\n                <option value=\"1\">100% (fylld)</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjetjocklek</InputLabel>\n              <NativeSelect\n                value={this.state.squareLineWidth}\n                onChange={this.update(\"squareLineWidth\")}\n              >\n                <option value=\"1\">Tunn</option>\n                <option value=\"3\">Normal</option>\n                <option value=\"5\">Tjock</option>\n                <option value=\"8\">Tjockare</option>\n              </NativeSelect>\n            </StyledFormControl>\n            <StyledFormControl>\n              <InputLabel variant=\"standard\">Linjestil</InputLabel>\n              <NativeSelect\n                value={this.state.squareLineStyle}\n                onChange={this.update(\"squareLineStyle\")}\n              >\n                <option value=\"solid\">Heldragen</option>\n                <option value=\"dash\">Streckad</option>\n                <option value=\"dot\">Punktad</option>\n              </NativeSelect>\n            </StyledFormControl>\n          </div>\n        );\n      default:\n        return <div />;\n    }\n  }\n}\n\nexport default Symbology;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z\"\n}), 'FolderOpen');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67 2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z\"\n}), 'SaveAlt');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n      _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\n\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\n\n\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n\n  const {\n    className,\n    children,\n    classes: classesProp = {},\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, _extends({\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: _extends({\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined\n      }, inputProps, input ? input.props.inputProps : {}),\n      ref\n    }, other, {\n      className: clsx(classes.root, input.props.className, className)\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;"],"names":["StyledFormControl","styled","FormControl","width","Row","marginBottom","theme","spacing","StyledDivider","Divider","marginTop","DrawView","props","state","shape","drawMethod","displayText","addMapDropListeners","mapDiv","document","getElementById","forEach","eventName","addEventListener","preventDefaultDropBehavior","handleDragEnter","handleDrop","e","snackbarKey","enqueueSnackbar","preventDuplicate","file","dataTransfer","files","fileType","type","name","split","pop","globalObserver","publish","hideOtherPlugins","addDroppedKmlToMap","error","variant","console","model","reader","FileReader","onload","import","result","handleImportError","closeSnackbar","readAsText","stopPropagation","preventDefault","handleChange","event","setState","target","value","setType","setDrawMethod","onAbortTextDialog","dialog","onCloseTextDialog","text","openDialog","feature","set","setStyle","getStyle","redraw","openUploadDialog","dialogPrompt","dialogHeaderText","dialogText","renderImport","dialogButtonText","dialogCloseCallback","onCloseUploadDialog","localObserver","subscribe","dialogAbortText","dialogAbortCallback","this","createPortal","options","prompt","headerText","buttonText","abortText","useLegacyNonMarkdownRenderer","open","onClose","onAbort","htmlFor","onChange","input","id","sx","onClick","export","accept","multiple","color","clear","control","checked","label","renderForm","renderDialog","React","withSnackbar","Symbology","update","prop","hex","Number","isNaN","parseFloat","parseInt","fontSize","fontTextColor","fontBackColor","fontStroke","pointText","pointColor","pointRadius","lineColor","lineWidth","lineStyle","circleFillColor","circleLineColor","circleFillOpacity","circleLineStyle","circleLineWidth","circleRadius","polygonLineColor","polygonLineWidth","polygonLineStyle","polygonFillColor","polygonFillOpacity","squareFillColor","squareLineColor","squareFillOpacity","squareLineStyle","squareLineWidth","pointSettings","undefined","renderPointSettings","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","_excluded","_excluded2","defaultInput","_jsx","Input","NativeSelect","inProps","ref","useThemeProps","className","children","classes","classesProp","IconComponent","ArrowDropDownIcon","inputProps","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","getNativeSelectUtilityClasses","useUtilityClasses","_extends","otherClasses","inputComponent","NativeSelectInput","clsx","muiName"],"sourceRoot":""}
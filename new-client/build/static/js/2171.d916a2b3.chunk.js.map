{"version":3,"file":"static/js/2171.d916a2b3.chunk.js","mappings":"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","sources":["plugins/LayerSwitcher/components/DrawOrder.js","plugins/LayerSwitcher/components/DrawOrderListItem.js","plugins/LayerSwitcher/components/DrawOrderOptions.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport DrawOrderListItem from \"./DrawOrderListItem\";\nimport DrawOrderOptions from \"./DrawOrderOptions\";\nimport { Chip, Divider } from \"@mui/material\";\n\nfunction DrawOrder({ app, map }) {\n  // A Set that will hold type of OL layers that should be shown.\n  // This is a user setting, changed by toggling a switch control.\n  const [filterList, setFilterList] = useState(\n    new Set([\"layer\", \"group\", \"base\"]) // Also \"system\" is available, but let's start without it\n  );\n\n  // A helper that grabs all visible OL layers, filters so that\n  // only the selected layer types are shown and sorts them\n  // in reverse numerical order (highest zIndex at top of the list).\n  const getSortedLayers = useCallback(() => {\n    return (\n      map\n        .getAllLayers()\n        .filter((l) => {\n          l.getZIndex() === undefined && l.setZIndex(-2);\n          return (\n            l.getVisible() === true &&\n            Array.from(filterList).includes(l.get(\"layerType\"))\n          );\n        })\n        // Reversed numerical order\n        .sort((a, b) => b.getZIndex() - a.getZIndex())\n    );\n  }, [filterList, map]);\n\n  useEffect(() => {\n    // Register a listener: when any layer's visibility changes make sure\n    // to update the list.\n    app.globalObserver.subscribe(\"core.layerVisibilityChanged\", (l) => {\n      setSortedLayers(getSortedLayers());\n    });\n  }, [app.globalObserver, getSortedLayers]);\n\n  const [sortedLayers, setSortedLayers] = useState(getSortedLayers());\n\n  // When values of the filterList set changes, let's update the list.\n  useEffect(() => {\n    setSortedLayers(getSortedLayers());\n  }, [filterList, getSortedLayers]);\n\n  // Main handler of this component. Takes care of layer zIndex ordering.\n  const handleLayerOrderChange = (layer, direction) => {\n    const oldZIndex = layer.getZIndex() || 0;\n\n    // Setup two variables that will have different values depending on\n    // whether we're moving the layer up or down the list.\n    let layerToBypass,\n      otherAffectedLayers = null;\n\n    if (direction > 0) {\n      // Increasing zIndex. We want to get everything above current layer and increase it too.\n      otherAffectedLayers = getSortedLayers().filter(\n        (l) => l.getZIndex() >= oldZIndex && layer !== l // Make sure to ignore current layer\n      );\n\n      // Abort if there are no layers above the current one\n      if (otherAffectedLayers.length === 0) return;\n\n      // Now we have a list of layers that are above the one we want to lift. Next thing to do\n      // is grab the _last_ layer in this list. That will be the layer that we want to \"go above\".\n      // The .pop() below does two things: it grabs the layer (so we can get it's zIndex) and it\n      // removes it from the array of other affected layers. We don't want to increase this one\n      // layer's zIndex (as opposed to everything else!).\n      layerToBypass = otherAffectedLayers.pop();\n    } else {\n      // Decreasing zIndex. Grab all layers with zIndex below the current layer's.\n      otherAffectedLayers = getSortedLayers().filter(\n        (l) => l.getZIndex() <= oldZIndex && layer !== l // Make sure to ignore current layer\n      );\n\n      // Abort if there are no layers below the current one\n      if (otherAffectedLayers.length === 0) return;\n\n      // The first layer (directly below the moved one) should remain untouched. So we\n      // use .shift() to removed it from the array of affected layers and save to a variable.\n      // That variable will be used later on to determine the zIndex of this layer so that\n      // the layer we're currently moving can bypass this one.\n      layerToBypass = otherAffectedLayers.shift();\n    }\n\n    // otherAffectedLayers is an array of layers that are not in direct contact with the\n    // layer being moved or the one below/above it. To ensure that their internal order\n    // remains the same, we move them one step up/down (depending on the direction).\n    otherAffectedLayers.forEach((la) =>\n      la.setZIndex(la.getZIndex() + direction)\n    );\n\n    // Finally, the layer that is to be moved must get a new zIndex. That value is determined\n    // by taking a look at the zIndex of the layer that we want to bypass and increased/decrease\n    // by one step.\n    layer.setZIndex(layerToBypass.getZIndex() + direction);\n\n    // When we're done setting OL layers' zIndexes, we can update the state of our component,\n    // so that the UI reflects the new order.\n    setSortedLayers(getSortedLayers());\n  };\n\n  const getLabelFromNumber = () =>\n    sortedLayers.length.toString() +\n    \" \" +\n    (sortedLayers.length === 1 ? \"AKTIVT LAGER\" : \"AKTIVA LAGER\");\n\n  return (\n    <Box>\n      <DrawOrderOptions\n        app={app}\n        filterList={filterList}\n        setFilterList={setFilterList}\n        map={map}\n      />\n      <Divider sx={{ pt: 2 }}>\n        <Chip label={getLabelFromNumber()} />\n      </Divider>\n      <List>\n        {sortedLayers.map((l) => (\n          <DrawOrderListItem\n            key={l.ol_uid}\n            changeOrder={handleLayerOrderChange}\n            layer={l}\n          />\n        ))}\n      </List>\n    </Box>\n  );\n}\n\nexport default DrawOrder;\n","import React, { useEffect } from \"react\";\n\nimport {\n  Icon,\n  IconButton,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Slider,\n  SvgIcon,\n  Tooltip,\n} from \"@mui/material\";\n\nimport ArrowUpward from \"@mui/icons-material/ArrowUpward\";\nimport ArrowDownward from \"@mui/icons-material/ArrowDownward\";\nimport FolderIcon from \"@mui/icons-material/Folder\";\nimport GppMaybeIcon from \"@mui/icons-material/GppMaybe\";\nimport LayersIcon from \"@mui/icons-material/Layers\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport WallpaperIcon from \"@mui/icons-material/Wallpaper\";\n\nfunction MouseClickIcon(props) {\n  return (\n    <Tooltip title=\"Lagret är klickbart i kartan\">\n      <SvgIcon {...props} viewBox=\"0 0 109.21 122.88\">\n        <path d=\"M86,122.31a5.57,5.57,0,0,1-.9.35,5.09,5.09,0,0,1-1,.18,5.46,5.46,0,0,1-1,0,6.77,6.77,0,0,1-1-.15,6,6,0,0,1-1-.36l0,0a5.51,5.51,0,0,1-.92-.53l0,0a6.41,6.41,0,0,1-.78-.69,5.19,5.19,0,0,1-.65-.87l-9.08-14.88-7.69,9a15.49,15.49,0,0,1-1.1,1.18c-.39.37-.78.71-1.18,1l-.08.06a12.19,12.19,0,0,1-1.2.82,9.66,9.66,0,0,1-1.24.63,6.91,6.91,0,0,1-1,.37,6.21,6.21,0,0,1-1,.22,7.55,7.55,0,0,1-1.06.07,7.19,7.19,0,0,1-1-.11,6.14,6.14,0,0,1-1.18-.35,5.42,5.42,0,0,1-1.06-.57,6.22,6.22,0,0,1-.92-.78l0,0a7.31,7.31,0,0,1-.75-1l-.11-.2-.09-.21L47.72,112l0-.17L40.91,43.26a4.52,4.52,0,0,1,0-1.33,4.3,4.3,0,0,1,.43-1.25,4.31,4.31,0,0,1,1.39-1.55l0,0a3.82,3.82,0,0,1,.9-.46,4.25,4.25,0,0,1,1-.24h0a4.31,4.31,0,0,1,1.29.05,4.67,4.67,0,0,1,1.25.44l.3.16c13.51,8.84,26.1,17.06,38.64,25.25l19,12.39a11.72,11.72,0,0,1,1,.72l0,0a8.78,8.78,0,0,1,.82.73l.06.07a7.41,7.41,0,0,1,.71.82,5.91,5.91,0,0,1,.57.87,6.42,6.42,0,0,1,.51,1.14,5.6,5.6,0,0,1,.26,1.17,5.44,5.44,0,0,1,0,1.21h0a6.59,6.59,0,0,1-.23,1.19,6.54,6.54,0,0,1-.94,1.88,6.41,6.41,0,0,1-.67.83,7.45,7.45,0,0,1-.82.76,10.42,10.42,0,0,1-1.16.83,12.92,12.92,0,0,1-1.34.7c-.47.21-1,.41-1.46.58a14.27,14.27,0,0,1-1.55.43h0c-2.77.54-5.53,1.21-8.27,1.87l-3.25.77,9,14.94a5.84,5.84,0,0,1,.46,1,5.59,5.59,0,0,1,.15,3.21l0,.1a5.53,5.53,0,0,1-.33.94,6.43,6.43,0,0,1-.51.89,5.62,5.62,0,0,1-.68.81,6,6,0,0,1-.82.67l-2,1.29A83,83,0,0,1,86,122.31ZM37.63,19.46a4,4,0,0,1-6.92,4l-8-14a4,4,0,0,1,6.91-4l8.06,14Zm-15,46.77a4,4,0,0,1,4,6.91l-14,8.06a4,4,0,0,1-4-6.91l14-8.06ZM20.56,39.84a4,4,0,0,1-2.07,7.72L3,43.36A4,4,0,0,1,5,35.64l15.53,4.2ZM82,41.17a4,4,0,0,1-4-6.91L92,26.2a4,4,0,0,1,4,6.91L82,41.17ZM63.46,20.57a4,4,0,1,1-7.71-2.06L59.87,3A4,4,0,0,1,67.59,5L63.46,20.57Zm20.17,96.36,9.67-5.86c-3.38-5.62-8.85-13.55-11.51-19.17a2.17,2.17,0,0,1-.12-.36,2.4,2.4,0,0,1,1.81-2.87c5.38-1.23,10.88-2.39,16.22-3.73a10.28,10.28,0,0,0,1.8-.58,6.11,6.11,0,0,0,1.3-.77,3.38,3.38,0,0,0,.38-.38.9.9,0,0,0,.14-.24l-.06-.18a2.15,2.15,0,0,0-.44-.53,5.75,5.75,0,0,0-.83-.63L47.06,45.75c2.11,21.36,5.2,44.1,6.45,65.31a6.28,6.28,0,0,0,.18,1,2.89,2.89,0,0,0,.26.62l.13.14a1,1,0,0,0,.29,0,2.76,2.76,0,0,0,.51-.17,5.71,5.71,0,0,0,1.28-.79,11.22,11.22,0,0,0,1.35-1.33c1.93-2.27,9.6-12.14,11.4-13.18a2.4,2.4,0,0,1,3.28.82l11.44,18.75Z\" />\n      </SvgIcon>\n    </Tooltip>\n  );\n}\n\nfunction MouseNoClickIcon(props) {\n  return (\n    <Tooltip title=\"Lagret är inte klickbart i kartan\">\n      <SvgIcon {...props} viewBox=\"0 0 109.21 122.88\">\n        <path d=\"m86,122.31a5.57,5.57 0 0 1 -0.9,0.35a5.09,5.09 0 0 1 -1,0.18a5.46,5.46 0 0 1 -1,0a6.77,6.77 0 0 1 -1,-0.15a6,6 0 0 1 -1,-0.36l0,0a5.51,5.51 0 0 1 -0.92,-0.53l0,0a6.41,6.41 0 0 1 -0.78,-0.69a5.19,5.19 0 0 1 -0.65,-0.87l-9.08,-14.88l-7.69,9a15.49,15.49 0 0 1 -1.1,1.18c-0.39,0.37 -0.78,0.71 -1.18,1l-0.08,0.06a12.19,12.19 0 0 1 -1.2,0.82a9.66,9.66 0 0 1 -1.24,0.63a6.91,6.91 0 0 1 -1,0.37a6.21,6.21 0 0 1 -1,0.22a7.55,7.55 0 0 1 -1.06,0.07a7.19,7.19 0 0 1 -1,-0.11a6.14,6.14 0 0 1 -1.18,-0.35a5.42,5.42 0 0 1 -1.06,-0.57a6.22,6.22 0 0 1 -0.92,-0.78l0,0a7.31,7.31 0 0 1 -0.75,-1l-0.11,-0.2l-0.09,-0.21l-1.29,-3.49l0,-0.17l-6.81,-68.57a4.52,4.52 0 0 1 0,-1.33a4.3,4.3 0 0 1 0.43,-1.25a4.31,4.31 0 0 1 1.39,-1.55l0,0a3.82,3.82 0 0 1 0.9,-0.46a4.25,4.25 0 0 1 1,-0.24l0,0a4.31,4.31 0 0 1 1.29,0.05a4.67,4.67 0 0 1 1.25,0.44l0.3,0.16c13.51,8.84 26.1,17.06 38.64,25.25l19,12.39a11.72,11.72 0 0 1 1,0.72l0,0a8.78,8.78 0 0 1 0.82,0.73l0.06,0.07a7.41,7.41 0 0 1 0.71,0.82a5.91,5.91 0 0 1 0.57,0.87a6.42,6.42 0 0 1 0.51,1.14a5.6,5.6 0 0 1 0.26,1.17a5.44,5.44 0 0 1 0,1.21l0,0a6.59,6.59 0 0 1 -0.23,1.19a6.54,6.54 0 0 1 -0.94,1.88a6.41,6.41 0 0 1 -0.67,0.83a7.45,7.45 0 0 1 -0.82,0.76a10.42,10.42 0 0 1 -1.16,0.83a12.92,12.92 0 0 1 -1.34,0.7c-0.47,0.21 -1,0.41 -1.46,0.58a14.27,14.27 0 0 1 -1.55,0.43l0,0c-2.77,0.54 -5.53,1.21 -8.27,1.87l-3.25,0.77l9,14.94a5.84,5.84 0 0 1 0.46,1a5.59,5.59 0 0 1 0.15,3.21l0,0.1a5.53,5.53 0 0 1 -0.33,0.94a6.43,6.43 0 0 1 -0.51,0.89a5.62,5.62 0 0 1 -0.68,0.81a6,6 0 0 1 -0.82,0.67l-2,1.29a83,83 0 0 1 -8.62,5.17zm-48.37,-102.85a4,4 0 0 1 -6.92,4l-8,-14a4,4 0 0 1 6.91,-4l8.06,14l-0.05,0zm-15,46.77a4,4 0 0 1 4,6.91l-14,8.06a4,4 0 0 1 -4,-6.91l14,-8.06zm-2.07,-26.39a4,4 0 0 1 -2.07,7.72l-15.49,-4.2a4,4 0 0 1 2,-7.72l15.53,4.2l0.03,0zm61.44,1.33a4,4 0 0 1 -4,-6.91l14,-8.06a4,4 0 0 1 4,6.91l-14,8.06zm-18.54,-20.6a4,4 0 1 1 -7.71,-2.06l4.12,-15.51a4,4 0 0 1 7.72,2l-4.13,15.57zm20.17,96.36l9.67,-5.86c-3.38,-5.62 -8.85,-13.55 -11.51,-19.17a2.17,2.17 0 0 1 -0.12,-0.36a2.4,2.4 0 0 1 1.81,-2.87c5.38,-1.23 10.88,-2.39 16.22,-3.73a10.28,10.28 0 0 0 1.8,-0.58a6.11,6.11 0 0 0 1.3,-0.77a3.38,3.38 0 0 0 0.38,-0.38a0.9,0.9 0 0 0 0.14,-0.24l-0.06,-0.18a2.15,2.15 0 0 0 -0.44,-0.53a5.75,5.75 0 0 0 -0.83,-0.63l-54.93,-35.88c2.11,21.36 5.2,44.1 6.45,65.31a6.28,6.28 0 0 0 0.18,1a2.89,2.89 0 0 0 0.26,0.62l0.13,0.14a1,1 0 0 0 0.29,0a2.76,2.76 0 0 0 0.51,-0.17a5.71,5.71 0 0 0 1.28,-0.79a11.22,11.22 0 0 0 1.35,-1.33c1.93,-2.27 9.6,-12.14 11.4,-13.18a2.4,2.4 0 0 1 3.28,0.82l11.44,18.75l0,0.01z\" />\n        <line\n          stroke=\"#000\"\n          strokeWidth=\"7\"\n          y2=\"3.7693\"\n          x2=\"105.56343\"\n          y1=\"118.83671\"\n          x1=\"3.92054\"\n        />\n      </SvgIcon>\n    </Tooltip>\n  );\n}\n\nexport default function DrawOrderListItem({ changeOrder, layer }) {\n  // We want let user toggle a layer on/off without actually removing it\n  // from the list of visible layers. To accomplish this, we will change\n  // the layer's opacity between 0 and 1.\n\n  // We keep the opacity in state…\n  const [opacity, setOpacity] = React.useState(layer.get(\"opacity\"));\n\n  // …and let a useEffect manage the actual OL layer's opacity.\n  useEffect(() => {\n    layer.set(\"opacity\", opacity);\n  }, [layer, opacity]);\n\n  const handleOpacitySliderChange = (event, newValue) => {\n    setOpacity(newValue);\n  };\n\n  const handleVisibilityButtonClick = () => {\n    setOpacity(opacity === 0 ? 1 : 0);\n  };\n\n  // To make the layers list more fun, we want to display an icon next to\n  // the layer.\n  const getIconFromLayer = (layer) => {\n    // Some layers can have a \"infoclickIcon\" property. If so, use it.\n    const layerSpecificIcon =\n      layer.get(\"layerInfo\")?.infoclickIcon || layer.get(\"infoclickIcon\");\n    if (layerSpecificIcon !== undefined) {\n      return <Icon>{layerSpecificIcon}</Icon>;\n    } else {\n      // Else, let's pick an icon depending on the layer's type.\n      switch (layer.get(\"layerType\")) {\n        case \"layer\":\n          return <LayersIcon />;\n        case \"group\":\n          return <FolderIcon />;\n        case \"base\":\n          return <WallpaperIcon />;\n        case \"system\":\n        default:\n          return <GppMaybeIcon />;\n      }\n    }\n  };\n\n  const getFriendlyTypeFromLayer = (layer) => {\n    switch (layer.get(\"layerType\")) {\n      case \"layer\":\n        return \"Lager\";\n      case \"group\":\n        return \"Grupplager\";\n      case \"base\":\n        return \"Bakgrundslager\";\n      case \"system\":\n      default:\n        return \"Systemlager\";\n    }\n  };\n\n  const isLayerQueryable = (layer) => {\n    // The simplest option. Vector layers will have this property set.\n    if (layer.get(\"queryable\") === true) {\n      return true;\n    }\n\n    // If we got this far, we must search further. The WMS and WMTS layers\n    // lack a handy top property. The 'queryable' property is set on each\n    // sublayer instead.\n    // One problem is that we display grouplayers as one item in the list.\n    // The 'queryable' settings is a property of each sublayer though, so we\n    // can have a situation where only one sublayer is queryable in a grouplayer.\n    // In this case, we want to display the item in the list as queryable (even\n    // if only one of its ingredients is). The simple solution is to search for\n    // the first sublayer that has the property sat to true - if we find it, we\n    // consider the entire group queryable.\n    return (\n      layer.layersInfo !== undefined &&\n      Object.values(layer.layersInfo).findIndex(\n        (sl) => sl.queryable === true\n      ) !== -1\n    );\n  };\n\n  return (\n    <ListItem disablePadding>\n      <ListItemButton\n        sx={{\n          // When a layer is toggled off, we want to make it look\n          // more \"light\" in the list.\n          opacity: opacity > 0 ? 1 : 0.38,\n        }}\n        disableRipple\n        disableTouchRipple\n      >\n        <ListItemIcon>\n          <Tooltip title={getFriendlyTypeFromLayer(layer)}>\n            {getIconFromLayer(layer)}\n          </Tooltip>\n        </ListItemIcon>\n\n        <ListItemIcon>\n          {layer.get(\"layerType\") !== \"system\" &&\n            (isLayerQueryable(layer) ? (\n              <MouseClickIcon />\n            ) : (\n              <MouseNoClickIcon />\n            ))}\n        </ListItemIcon>\n        <ListItemText\n          primary={layer.get(\"caption\")}\n          secondary={\n            <Slider\n              aria-label=\"Layer opacity\"\n              value={opacity}\n              onChange={handleOpacitySliderChange}\n              size=\"small\"\n              min={0}\n              max={1}\n              step={0.01}\n            />\n          }\n        />\n        <Tooltip title={(opacity > 0 ? \"Dölj \" : \"Visa \") + \"lager\"}>\n          <IconButton onClick={handleVisibilityButtonClick}>\n            {opacity > 0 ? <VisibilityOff /> : <Visibility />}\n          </IconButton>\n        </Tooltip>\n        <IconButton\n          disabled={opacity === 0}\n          onClick={() => changeOrder(layer, +1)}\n        >\n          <ArrowUpward />\n        </IconButton>\n        <IconButton\n          disabled={opacity === 0}\n          onClick={() => changeOrder(layer, -1)}\n        >\n          <ArrowDownward />\n        </IconButton>\n      </ListItemButton>\n    </ListItem>\n  );\n}\n","import * as React from \"react\";\nimport { useSnackbar } from \"notistack\";\n\nimport LocalStorageHelper from \"utils/LocalStorageHelper\";\n\nimport {\n  Button,\n  Divider,\n  ListItemIcon,\n  ListItemText,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport FolderOpen from \"@mui/icons-material/FolderOpen\";\nimport GppMaybeIcon from \"@mui/icons-material/GppMaybe\";\nimport Save from \"@mui/icons-material/Save\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\n\nexport default function DrawOrderOptions({\n  app,\n  filterList,\n  setFilterList,\n  map,\n}) {\n  // Prepare the Snackbar - we want to display nice messages when\n  // user saves/restores layers.\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Element that we will anchor the options menu to is\n  // held in state. If it's null (unanchored), we can tell\n  // that the menu should be hidden.\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const optionsMenuIsOpen = Boolean(anchorEl);\n\n  // Show the options menu by setting an anchor element\n  const handleShowMoreOptionsClick = (e) => {\n    setAnchorEl(e.currentTarget);\n  };\n\n  // Hides the options menu by resetting the anchor element\n  const handleCloseOptionsMenu = () => {\n    setAnchorEl(null);\n  };\n\n  /**\n   * Take care of saving active layers so that they can be restored layer.\n   * For time being we're only saving in local storage, but this may change\n   * in the future.\n   * We take care of saving **all non-system layers**.\n   * We save the opacity as well as the layers' internal order (by reading\n   * the value of zIndex).\n   */\n  const handleSave = () => {\n    // Grab layers to be saved by…\n    const layers = map\n      .getAllLayers() //\n      .filter((l) => l.getVisible() === true && l.get(\"layerType\") !== \"system\") // …filtering out system layers.\n      .map((l) => {\n        // Create an array of objects. For each layer, we want to read its…\n        return { i: l.get(\"name\"), z: l.getZIndex(), o: l.getOpacity() }; // …name, zIndex and opacity.\n      });\n\n    // Let's create some metadata about our saved layers. User might want to know\n    // how many layers are saved and when they were saved.\n    // First, we try to get the map's name. We can't be certain that this exists (not\n    // all maps have the userSpecificMaps property), so we must be careful.\n    const mapName =\n      Array.isArray(app.config.userSpecificMaps) &&\n      app.config.userSpecificMaps.find(\n        (m) => m.mapConfigurationName === app.config.activeMap\n      )?.mapConfigurationTitle;\n\n    // Next, let's put together the metadata object…\n    const metadata = {\n      savedAt: new Date(),\n      numberOfLayers: layers.length,\n      ...(mapName && { mapName }), // …if we have a map name, let's add it too.\n    };\n\n    // Let's combine it all to an object that will be saved.\n    const objectToSave = { layers, metadata };\n\n    const currentLsSettings = LocalStorageHelper.get(\"layerswitcher\");\n\n    // TODO: Determine whether this should be a functional or required cookie,\n    // add the appropriate hook and describe here https://github.com/hajkmap/Hajk/wiki/Cookies-in-Hajk.\n    LocalStorageHelper.set(\"layerswitcher\", {\n      ...currentLsSettings,\n      savedLayers: objectToSave,\n    });\n\n    enqueueSnackbar(`${metadata.numberOfLayers} lager sparades utan problem`, {\n      variant: \"success\",\n    });\n  };\n\n  const handleRestore = () => {\n    // Let's be safe about parsing JSON\n    try {\n      const { metadata, layers } = LocalStorageHelper._experimentalGet(\n        \"layerswitcher.savedLayers\"\n      );\n\n      map\n        .getAllLayers() // Traverse all layers…\n        .filter((l) => l.get(\"layerType\") !== \"system\") // …ignore system layers.\n        .forEach((l) => {\n          // See if the current layer is in the list of saved layers.\n          const match = layers.find((rl) => rl.i === l.get(\"name\"));\n          // If yes…\n          if (match) {\n            // …read and set some options.\n            l.setZIndex(match.z);\n            l.setOpacity(match.o);\n            l.setVisible(true);\n          } else {\n            // If not, ensure that the layer is hidden.\n            l.setVisible(false);\n          }\n        });\n\n      enqueueSnackbar(\n        `${metadata.numberOfLayers} lager återställdes från tidigare session`,\n        {\n          variant: \"success\",\n        }\n      );\n    } catch (error) {\n      enqueueSnackbar(\n        \"Innan du kan återställa måste du spara dina befintliga lager först.\"\n      );\n    }\n  };\n\n  // Handler function for the show/hide system layers toggle\n  const handleSystemLayerSwitchChange = () => {\n    if (filterList.has(\"system\")) {\n      filterList.delete(\"system\");\n      setFilterList(new Set(filterList));\n    } else {\n      filterList.add(\"system\");\n      setFilterList(new Set(filterList));\n    }\n  };\n\n  return (\n    <>\n      <Button\n        aria-controls={optionsMenuIsOpen ? \"basic-menu\" : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={optionsMenuIsOpen ? \"true\" : undefined}\n        onClick={handleShowMoreOptionsClick}\n        endIcon={<KeyboardArrowDownIcon />}\n      >\n        Fler alternativ\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={optionsMenuIsOpen}\n        onClose={handleCloseOptionsMenu}\n      >\n        <MenuItem\n          onClick={() => {\n            handleSave();\n            handleCloseOptionsMenu();\n          }}\n        >\n          <ListItemIcon>\n            <Save fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Spara aktiva lager</ListItemText>\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            handleRestore();\n            handleCloseOptionsMenu();\n          }}\n        >\n          <ListItemIcon>\n            <FolderOpen fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Återställ sparade lager</ListItemText>\n        </MenuItem>\n        <Divider />\n        <MenuItem\n          onClick={() => {\n            handleSystemLayerSwitchChange();\n            handleCloseOptionsMenu();\n          }}\n        >\n          <ListItemIcon>\n            <GppMaybeIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>{`${\n            filterList.has(\"system\") ? \"Dölj\" : \"Visa\"\n          } systemlager`}</ListItemText>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n}\n"],"names":["app","map","useState","Set","filterList","setFilterList","getSortedLayers","useCallback","getAllLayers","filter","l","undefined","getZIndex","setZIndex","getVisible","Array","from","includes","get","sort","a","b","useEffect","globalObserver","subscribe","setSortedLayers","sortedLayers","handleLayerOrderChange","layer","direction","layerToBypass","oldZIndex","otherAffectedLayers","length","pop","shift","forEach","la","sx","pt","label","toString","changeOrder","ol_uid","MouseClickIcon","props","title","viewBox","d","MouseNoClickIcon","stroke","strokeWidth","y2","x2","y1","x1","DrawOrderListItem","React","opacity","setOpacity","set","disablePadding","disableRipple","disableTouchRipple","getFriendlyTypeFromLayer","layerSpecificIcon","infoclickIcon","getIconFromLayer","layersInfo","Object","values","findIndex","sl","queryable","isLayerQueryable","primary","secondary","value","onChange","event","newValue","size","min","max","step","onClick","disabled","DrawOrderOptions","enqueueSnackbar","useSnackbar","anchorEl","setAnchorEl","optionsMenuIsOpen","Boolean","handleCloseOptionsMenu","e","currentTarget","endIcon","open","onClose","layers","i","z","o","getOpacity","mapName","isArray","config","userSpecificMaps","find","m","mapConfigurationName","activeMap","mapConfigurationTitle","metadata","savedAt","Date","numberOfLayers","objectToSave","currentLsSettings","LocalStorageHelper","savedLayers","variant","handleSave","fontSize","match","rl","setVisible","error","handleRestore","has","delete","add"],"sourceRoot":""}
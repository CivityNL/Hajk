{"version":3,"file":"static/js/3214.8a79cf81.chunk.js","mappings":"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","sources":["plugins/LayerSwitcher/components/CQLFilter.js","plugins/LayerSwitcher/components/DownloadLink.js","plugins/LayerSwitcher/components/LayerGroupItem.js","plugins/LayerSwitcher/components/LayerSettings.js","plugins/LayerSwitcher/components/VectorFilter.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  InputLabel,\n  OutlinedInput,\n  IconButton,\n  InputAdornment,\n  Tooltip,\n} from \"@mui/material\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\n\nconst CQLFilter = ({ layer }) => {\n  const source = layer.getSource();\n  const currentCqlFilterValue =\n    (typeof source.getParams === \"function\" &&\n      source.getParams()?.CQL_FILTER) ||\n    \"\";\n\n  const [cqlFilter, setCqlFilter] = useState(currentCqlFilterValue);\n\n  const updateFilter = () => {\n    let filter = cqlFilter.trim();\n    if (filter.length === 0) filter = undefined; // If length === 0, unset filter.\n    layer.getSource().updateParams({ CQL_FILTER: filter });\n  };\n\n  return (\n    <>\n      <InputLabel htmlFor=\"cqlfilter\">Ange CQL-filter</InputLabel>\n      <OutlinedInput\n        id=\"cqlfilter\"\n        type=\"text\"\n        multiline\n        fullWidth\n        placeholder=\"foo='bar' AND fii='baz'\"\n        value={cqlFilter}\n        onChange={(e) => setCqlFilter(e.target.value)}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <Tooltip\n              disableInteractive\n              title=\"Tryck för att ladda om lagret med angivet filter\"\n            >\n              <IconButton edge=\"end\" onClick={updateFilter} size=\"large\">\n                <RefreshIcon />\n              </IconButton>\n            </Tooltip>\n          </InputAdornment>\n        }\n      />\n    </>\n  );\n};\n\nexport default CQLFilter;\n","import React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloudDownloadIcon from \"@mui/icons-material/CloudDownload\";\n\n/**\n * @summary Renders a Download button which on click downloads the current layer as KML\n *\n * @param {Object} { index = 0, parent }\n * @returns {React.Component}\n */\nfunction DownloadLink({ index = 0, layer, enableDownloadLink = false }) {\n  const layerName = Array.isArray(layer.subLayers)\n    ? encodeURI(layer.subLayers[index])\n    : null;\n  const wmsUrl = layer.get(\"url\");\n  const downloadUrl = `${wmsUrl}/kml?layers=${layerName}&mode=download`;\n\n  const handleDownloadClick = () => {\n    document.location = downloadUrl;\n  };\n\n  return enableDownloadLink\n    ? layerName !== null && (\n        <IconButton\n          aria-label=\"download\"\n          onClick={handleDownloadClick}\n          size=\"small\"\n        >\n          <CloudDownloadIcon />\n        </IconButton>\n      )\n    : null;\n}\n\nexport default DownloadLink;\n","import React, { Component } from \"react\";\nimport { Button, Tooltip, Typography, Grid, Box } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport IconWarning from \"@mui/icons-material/Warning\";\nimport CallMadeIcon from \"@mui/icons-material/CallMade\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport RemoveCircleIcon from \"@mui/icons-material/RemoveCircle\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport LayerSettings from \"./LayerSettings.js\";\nimport DownloadLink from \"./DownloadLink\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\n\nconst ExpandButtonWrapper = styled(\"div\")(() => ({\n  display: \"flex\",\n  float: \"left\",\n  cursor: \"pointer\",\n}));\n\nconst LayerInfo = styled(\"div\")(({ theme }) => ({\n  width: \"100%\",\n  borderBottom: `${theme.spacing(0.2)} solid ${theme.palette.divider}`,\n}));\n\nconst LayerSummaryContainer = styled((props) => (\n  <Grid\n    justifyContent=\"space-between\"\n    container\n    alignItems=\"center\"\n    wrap=\"nowrap\"\n    {...props}\n  />\n))(({ theme }) => ({\n  width: \"100%\",\n}));\n\nconst SummaryButtonsContainer = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n}));\n\nconst SummaryButtonWrapper = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  width: 35,\n  height: 35,\n  cursor: \"pointer\",\n}));\n\nconst Caption = styled(Typography)(({ theme }) => ({\n  cursor: \"pointer\",\n  fontSize: theme.typography.pxToRem(15),\n}));\n\nconst CheckBoxWrapper = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  cursor: \"pointer\",\n  float: \"left\",\n  marginRight: \"5px\",\n}));\n\nconst LegendImage = styled(\"img\")(({ theme }) => ({\n  marginLeft: theme.spacing(0.4),\n  maxWidth: \"250px\",\n}));\n\nconst LegendIcon = styled(\"img\")(({ theme }) => ({\n  width: theme.typography.pxToRem(18),\n  height: theme.typography.pxToRem(18),\n  marginRight: \"5px\",\n}));\n\nconst InfoTextContainer = styled(\"div\")(() => ({\n  margin: \"10px 45px\",\n}));\n\nconst StyledList = styled(\"ul\")(() => ({\n  padding: 0,\n  margin: 0,\n  listStyle: \"none\",\n}));\n\nclass LayerGroupItem extends Component {\n  constructor(props) {\n    super(props);\n    const layerInfo = props.layer.get(\"layerInfo\");\n    this.state = {\n      caption: layerInfo.caption,\n      visible: props.layer.get(\"visible\"),\n      visibleSubLayers: props.layer.get(\"visible\") ? props.layer.subLayers : [],\n      expanded: false,\n      name: props.layer.get(\"name\"),\n      legend: layerInfo.legend,\n      status: \"ok\",\n      infoVisible: false,\n      infoTitle: layerInfo.infoTitle,\n      infoText: layerInfo.infoText,\n      infoUrl: layerInfo.infoUrl,\n      infoUrlText: layerInfo.infoUrlText,\n      infoOwner: layerInfo.infoOwner,\n      infoExpanded: false,\n      instruction: layerInfo.instruction,\n      open: false,\n      opacityValue: 1,\n      toggleSettings: false,\n      toggleSubLayerSettings: {},\n    };\n    this.toggleSubLayerSettings = this.toggleSubLayerSettings.bind(this);\n    this.renderSubLayer = this.renderSubLayer.bind(this);\n\n    this.hideExpandArrow = layerInfo?.hideExpandArrow === true ? true : false;\n  }\n  /**\n   * Triggered when the component is successfully mounted into the DOM.\n   * @instance\n   */\n  componentDidMount() {\n    const { model } = this.props;\n    model.globalObserver.subscribe(\"layerswitcher.hideLayer\", this.setHidden);\n    model.globalObserver.subscribe(\"layerswitcher.showLayer\", this.setVisible);\n    model.observer.subscribe(\"hideLayer\", this.setHidden);\n    model.observer.subscribe(\"showLayer\", this.setVisible);\n    model.observer.subscribe(\"toggleGroup\", this.toggleGroupVisible);\n\n    // Set load status by subscribing to a global event. Expect ID (int) of layer\n    // and status (string \"ok\"|\"loaderror\"). Also, once status was set to \"loaderror\",\n    // don't change it back to \"ok\": we'll get a response for each tile, so most of\n    // the tiles might be \"ok\", but if only one of the tiles has \"loaderror\", we\n    // consider that the layer has failed loading and want to inform the user.\n    model.globalObserver.subscribe(\"layerswitcher.wmsLayerLoadStatus\", (d) => {\n      this.state.status !== \"loaderror\" &&\n        this.state.name === d.id &&\n        this.setState({\n          status: d.status,\n        });\n    });\n  }\n\n  /**\n   * Render the load information component.\n   * @instance\n   * @return {external:ReactElement}\n   */\n  renderStatus() {\n    return (\n      this.state.status === \"loaderror\" && (\n        <Tooltip\n          disableInteractive\n          title=\"Lagret kunde inte laddas in. Kartservern svarar inte.\"\n        >\n          <SummaryButtonWrapper>\n            <IconWarning />\n          </SummaryButtonWrapper>\n        </Tooltip>\n      )\n    );\n  }\n\n  renderLegendImage() {\n    const src =\n      this.state.legend[0] && this.state.legend[0].url\n        ? this.state.legend[0].url\n        : \"\";\n    return src ? <img width=\"60\" alt=\"legend\" src={src} /> : null;\n  }\n\n  openInformative = (chapter) => (e) => {\n    this.props.onOpenChapter(chapter);\n  };\n\n  findChapters(id, chapters) {\n    var result = [];\n    if (Array.isArray(chapters)) {\n      result = chapters.reduce((chaptersWithLayer, chapter) => {\n        if (Array.isArray(chapter.layers)) {\n          if (chapter.layers.some((layerId) => layerId === id)) {\n            chaptersWithLayer = [...chaptersWithLayer, chapter];\n          }\n          if (chapter.chapters.length > 0) {\n            chaptersWithLayer = [\n              ...chaptersWithLayer,\n              ...this.findChapters(id, chapter.chapters),\n            ];\n          }\n        }\n        return chaptersWithLayer;\n      }, []);\n    }\n    return result;\n  }\n\n  renderChapterLinks(chapters) {\n    if (chapters && chapters.length > 0) {\n      const chaptersWithLayer = this.findChapters(\n        this.props.layer.get(\"name\"),\n        chapters\n      );\n      if (chaptersWithLayer.length > 0) {\n        return (\n          <InfoTextContainer>\n            <Typography>\n              Innehåll från denna kategori finns benämnt i följande kapitel i\n              översiktsplanen:\n            </Typography>\n            <StyledList>\n              {chaptersWithLayer.map((chapter, i) => {\n                return (\n                  <li key={i}>\n                    <Button\n                      size=\"small\"\n                      onClick={this.openInformative(chapter)}\n                    >\n                      {chapter.header}\n                      <CallMadeIcon sx={{ marginLeft: 1, fontSize: \"16px\" }} />\n                    </Button>\n                  </li>\n                );\n              })}\n            </StyledList>\n          </InfoTextContainer>\n        );\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  toggleVisible = (layer) => (e) => {\n    const visible = !this.state.visible;\n    this.setState({\n      visible: visible,\n    });\n    layer.setVisible(visible);\n  };\n\n  toggle() {\n    this.setState({\n      open: !this.state.open,\n    });\n  }\n\n  toggleInfo() {\n    this.setState({\n      infoVisible: !this.state.infoVisible,\n    });\n  }\n\n  isInfoEmpty() {\n    const chaptersWithLayer = this.findChapters(\n      this.props.layer.get(\"name\"),\n      this.props.chapters\n    );\n    const { infoCaption, infoUrl, infoOwner, infoText } = this.state;\n    return !(\n      infoCaption ||\n      infoUrl ||\n      infoOwner ||\n      infoText ||\n      chaptersWithLayer.length > 0\n    );\n  }\n\n  setHidden = (l) => {\n    const { layer } = this.props;\n    if (l === layer) {\n      // Fix underlying source\n      this.props.layer.getSource().updateParams({\n        // Ensure that the list of sublayers is emptied (otherwise they'd be\n        // \"remembered\" the next time user toggles group)\n        LAYERS: \"\",\n        // Remove any filters\n        CQL_FILTER: null,\n      });\n\n      // Hide the layer in OL\n      layer.setVisible(false);\n\n      // Update UI state\n      this.setState({\n        visible: false,\n        visibleSubLayers: [],\n      });\n    }\n  };\n\n  setVisible = (la) => {\n    let l,\n      subLayersToShow = null;\n\n    // If the incoming parameter is an object that contains additional subLayersToShow,\n    // let's filter out the necessary objects from it\n    if (la.hasOwnProperty(\"layer\") && la.hasOwnProperty(\"subLayersToShow\")) {\n      subLayersToShow = la.subLayersToShow;\n      l = la.layer;\n    } else {\n      // In this case the incoming parameter is the actual OL Layer and there is\n      // no need to further filter. Just set subLayers to everything that's in this\n      // layer, and the incoming object itself as the working 'l' variable.\n      subLayersToShow = this.props.layer.subLayers;\n      l = la;\n    }\n\n    // Now we can be sure that we have the working 'l' variable and can compare\n    // it to the 'layer' object in current props. Note that this is necessary, as\n    // every single LayerGroupItem is subscribing to the event that calls this method,\n    // so without this check we'd end up running this for every LayerGroupItem, which\n    // is not intended.\n    if (l === this.props.layer) {\n      // Show the OL layer\n      this.props.layer.setVisible(true);\n\n      // Set LAYERS and STYLES so that the exact sublayers that are needed\n      // will be visible\n      this.props.layer.getSource().updateParams({\n        // join(), so we always provide a string as value to LAYERS\n        LAYERS: subLayersToShow.join(),\n        CQL_FILTER: null,\n        // Extract .style property from each sub layer.\n        // Join them into a string that will be used to\n        // reset STYLES param for the GET request.\n        STYLES: Object.entries(this.props.layer.layersInfo)\n          .filter((k) => subLayersToShow.indexOf(k[0]) !== -1)\n          .map((l) => l[1].style)\n          .join(\",\"),\n      });\n\n      this.setState({\n        visible: true,\n        visibleSubLayers: subLayersToShow,\n      });\n    }\n  };\n\n  toggleGroupVisible = (layer) => (e) => {\n    const visible = !this.state.visible;\n    if (visible) {\n      this.setVisible(layer);\n    } else {\n      this.setHidden(layer);\n    }\n  };\n\n  toggleLayerVisible = (subLayer) => (e) => {\n    var visibleSubLayers = [...this.state.visibleSubLayers],\n      isVisible = visibleSubLayers.some(\n        (visibleSubLayer) => visibleSubLayer === subLayer\n      ),\n      layerVisibility;\n\n    const { visible } = this.state;\n    layerVisibility = visible;\n\n    if (isVisible) {\n      visibleSubLayers = visibleSubLayers.filter(\n        (visibleSubLayer) => visibleSubLayer !== subLayer\n      );\n    } else {\n      visibleSubLayers.push(subLayer);\n    }\n\n    if (!visible && visibleSubLayers.length > 0) {\n      layerVisibility = true;\n    }\n\n    if (visibleSubLayers.length === 0) {\n      layerVisibility = false;\n    }\n\n    if (visibleSubLayers.length >= 1) {\n      // Create an Array to be used as STYLES param, it should only contain selected sublayers' styles\n      let visibleSubLayersStyles = [];\n      visibleSubLayers.forEach((subLayer) => {\n        visibleSubLayersStyles.push(\n          this.props.layer.layersInfo[subLayer].style\n        );\n      });\n\n      this.props.layer.getSource().updateParams({\n        // join(), so we always provide a string as value to LAYERS\n        LAYERS: visibleSubLayers.join(),\n        // Filter STYLES to only contain styles for currently visible layers,\n        // and maintain the order from layersInfo (it's crucial that the order\n        // of STYLES corresponds exactly to the order of LAYERS!)\n        STYLES: Object.entries(this.props.layer.layersInfo)\n          .filter((k) => visibleSubLayers.indexOf(k[0]) !== -1)\n          .map((l) => l[1].style)\n          .join(\",\"),\n        CQL_FILTER: null,\n      });\n      this.props.layer.setVisible(layerVisibility);\n      this.setState({\n        visible: layerVisibility,\n        visibleSubLayers: visibleSubLayers,\n      });\n    } else {\n      this.setHidden(this.props.layer);\n    }\n  };\n\n  renderLegendIcon(url) {\n    return <LegendIcon alt=\"Teckenförklaringsikon\" src={url} />;\n  }\n\n  renderSubLayer(layer, subLayer, index) {\n    const { visibleSubLayers } = this.state;\n    const visible = visibleSubLayers.some(\n      (visibleSubLayer) => visibleSubLayer === subLayer\n    );\n    const toggleSettings = this.toggleSubLayerSettings.bind(this, index);\n    const legendIcon = layer.layersInfo[subLayer].legendIcon;\n    return (\n      <LayerInfo key={index}>\n        <LayerSummaryContainer>\n          <Grid container alignItems=\"center\" wrap=\"nowrap\">\n            <CheckBoxWrapper onClick={this.toggleLayerVisible(subLayer)}>\n              {visible ? <CheckBoxIcon /> : <CheckBoxOutlineBlankIcon />}\n            </CheckBoxWrapper>\n            {legendIcon && this.renderLegendIcon(legendIcon)}\n            <Caption>{layer.layersInfo[subLayer].caption}</Caption>\n          </Grid>\n          <SummaryButtonsContainer>\n            <SummaryButtonWrapper>\n              <DownloadLink\n                index={index}\n                layer={this.props.layer}\n                enableDownloadLink={this.props.mapConfig.map.enableDownloadLink}\n              />\n            </SummaryButtonWrapper>\n            <SummaryButtonWrapper>\n              {this.state.toggleSubLayerSettings[index] ? (\n                <CloseIcon onClick={() => toggleSettings()} />\n              ) : (\n                <MoreHorizIcon onClick={() => toggleSettings()} />\n              )}\n            </SummaryButtonWrapper>\n          </SummaryButtonsContainer>\n        </LayerSummaryContainer>\n        {this.state.toggleSubLayerSettings[index] ? (\n          <Grid item xs={12}>\n            <LegendImage\n              alt=\"Teckenförklaring\"\n              src={this.props.layer.layersInfo[subLayer].legend}\n            />\n          </Grid>\n        ) : null}\n      </LayerInfo>\n    );\n  }\n\n  renderSubLayers() {\n    const { open } = this.state;\n    const { layer } = this.props;\n\n    if (open) {\n      return (\n        <Box sx={{ marginLeft: \"45px\" }}>\n          {layer.subLayers.map((subLayer, index) =>\n            this.renderSubLayer(layer, subLayer, index)\n          )}\n        </Box>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderInfo() {\n    const { infoTitle, infoText } = this.state;\n    if (infoText) {\n      return (\n        <InfoTextContainer>\n          <Typography variant=\"subtitle2\">{infoTitle}</Typography>\n          <Typography\n            variant=\"body2\"\n            dangerouslySetInnerHTML={{\n              __html: infoText,\n            }}\n          />\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderMetadataLink() {\n    const { infoUrl, infoUrlText } = this.state;\n    if (infoUrl) {\n      return (\n        <InfoTextContainer>\n          <a href={infoUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n            {infoUrlText || infoUrl}\n          </a>\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderOwner() {\n    const { infoOwner } = this.state;\n    if (infoOwner) {\n      return (\n        <InfoTextContainer>\n          <Typography\n            variant=\"body2\"\n            dangerouslySetInnerHTML={{ __html: infoOwner }}\n          ></Typography>\n        </InfoTextContainer>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderDetails() {\n    if (this.state.infoVisible) {\n      return (\n        <div>\n          {this.renderInfo()}\n          {this.renderMetadataLink()}\n          {this.renderOwner()}\n          <div>{this.renderChapterLinks(this.props.chapters || [])}</div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  toggleSettings() {\n    this.setState({\n      toggleSettings: !this.state.toggleSettings,\n    });\n  }\n\n  toggleSubLayerSettings(index) {\n    var selected = this.state.toggleSubLayerSettings;\n    selected[index] = !selected[index];\n    this.setState({ toggleSubLayerSettings: selected });\n  }\n\n  renderInfoToggler = () => {\n    return (\n      !this.isInfoEmpty() && (\n        <SummaryButtonWrapper>\n          {this.state.infoVisible ? (\n            <RemoveCircleIcon onClick={() => this.toggleInfo()} />\n          ) : (\n            <InfoIcon\n              onClick={() => this.toggleInfo()}\n              style={{\n                boxShadow: this.state.infoVisible\n                  ? \"rgb(204, 204, 204) 2px 3px 1px\"\n                  : \"inherit\",\n                borderRadius: \"100%\",\n              }}\n            />\n          )}\n        </SummaryButtonWrapper>\n      )\n    );\n  };\n\n  render() {\n    const { cqlFilterVisible, layer } = this.props;\n    const { open, visible, visibleSubLayers, toggleSettings, infoVisible } =\n      this.state;\n\n    function getCheckBox() {\n      return (\n        <CheckBoxWrapper>\n          {!visible ? (\n            <CheckBoxOutlineBlankIcon />\n          ) : visibleSubLayers.length !== layer.subLayers.length ? (\n            <CheckBoxIcon sx={{ fill: \"gray\" }} />\n          ) : (\n            <CheckBoxIcon />\n          )}\n        </CheckBoxWrapper>\n      );\n    }\n    const legendIcon = layer.get(\"layerInfo\").legendIcon;\n    return (\n      <Grid\n        sx={{\n          marginLeft: this.hideExpandArrow ? \"45px\" : \"21px\",\n        }}\n      >\n        <Grid container alignItems=\"center\" wrap=\"nowrap\">\n          {this.hideExpandArrow === false && (\n            <ExpandButtonWrapper>\n              {open ? (\n                <KeyboardArrowDownIcon onClick={() => this.toggle()} />\n              ) : (\n                <KeyboardArrowRightIcon onClick={() => this.toggle()} />\n              )}\n            </ExpandButtonWrapper>\n          )}\n          <LayerInfo>\n            <LayerSummaryContainer>\n              <Grid\n                container\n                alignItems=\"center\"\n                wrap=\"nowrap\"\n                onClick={this.toggleGroupVisible(layer)}\n              >\n                {getCheckBox()}\n                {legendIcon && this.renderLegendIcon(legendIcon)}\n                <Caption>{layer.get(\"caption\")}</Caption>\n              </Grid>\n              <SummaryButtonsContainer>\n                {this.renderStatus()}\n                {this.renderInfoToggler()}\n                <SummaryButtonWrapper>\n                  {toggleSettings ? (\n                    <CloseIcon onClick={() => this.toggleSettings()} />\n                  ) : (\n                    <MoreHorizIcon onClick={() => this.toggleSettings()} />\n                  )}\n                </SummaryButtonWrapper>\n              </SummaryButtonsContainer>\n            </LayerSummaryContainer>\n          </LayerInfo>\n        </Grid>\n        {this.renderDetails()}\n        {toggleSettings && infoVisible && !this.isInfoEmpty() ? <hr /> : null}\n        <div>\n          <LayerSettings\n            options={this.props.options}\n            layer={layer}\n            cqlFilterVisible={cqlFilterVisible}\n            observer={this.props.model.observer}\n            toggled={toggleSettings}\n            showOpacity={true}\n            showLegend={false}\n          />\n        </div>\n        {this.renderSubLayers()}\n      </Grid>\n    );\n  }\n}\n\nexport default LayerGroupItem;\n","import React from \"react\";\nimport VectorFilter from \"./VectorFilter\";\nimport CQLFilter from \"./CQLFilter\";\nimport Typography from \"@mui/material/Typography\";\nimport Slider from \"@mui/material/Slider\";\nimport { styled } from \"@mui/material/styles\";\n\nconst SettingsContainer = styled(\"div\")(({ theme }) => ({\n  overflow: \"hidden\",\n  paddingLeft: \"45px\",\n  paddingRight: \"30px\",\n  paddingBottom: \"10px\",\n  paddingTop: \"10px\",\n}));\n\nconst SliderContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  flexFlow: \"row nowrap\",\n  alignItems: \"center\",\n}));\n\nconst SliderTextWrapper = styled(\"div\")(({ theme }) => ({\n  flex: \"0 1 auto\",\n  minWidth: \"40px\",\n}));\n\nconst SliderWrapper = styled(\"div\")(({ theme }) => ({\n  padding: \"0 16px\",\n  flex: \"1 1 auto\",\n  \"& > span\": {\n    top: \"4px\",\n  },\n}));\n\nclass LayerSettings extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { layer } = props;\n    const layerInfo = layer.get(\"layerInfo\");\n\n    this.state = {\n      opacityValue: layer.get(\"opacity\"),\n      legend: layerInfo.legend,\n    };\n\n    // Ensure that state is updated when OL Layer's opacity changes\n    layer.on?.(\"change:opacity\", this.updateOpacity);\n  }\n\n  // Ensure that opacity slider's value gets updated when\n  // opacity is changed programmatically (e.g. via BreadCrumbs)\n  updateOpacity = (e) => {\n    const opacityValue = e.target.getOpacity();\n    this.setState({\n      opacityValue,\n    });\n  };\n\n  renderOpacitySlider() {\n    const opacityValue = this.state.opacityValue;\n    return (\n      <SliderContainer>\n        <SliderTextWrapper>\n          <Typography variant=\"subtitle2\">Opacitet:</Typography>\n        </SliderTextWrapper>\n        <SliderWrapper>\n          <Slider\n            size=\"small\"\n            value={opacityValue}\n            min={0}\n            max={1}\n            step={0.05}\n            onChange={this.opacitySliderChanged}\n          />\n        </SliderWrapper>\n        <SliderTextWrapper>\n          <Typography variant=\"subtitle2\">\n            {Math.trunc(100 * opacityValue.toFixed(2))} %\n          </Typography>\n        </SliderTextWrapper>\n      </SliderContainer>\n    );\n  }\n\n  /* This function does two things:\n   * 1) it updates opacityValue, which is in state,\n   *    and is important as <Slider> uses it to set\n   *    its internal value.\n   * 2) it changes OL layer's opacity\n   *\n   * As <Slider> is set up to return a value between\n   * 0 and 1 and it has a step of 0.1, we don't have\n   * to worry about any conversion and rounding here.\n   * */\n  opacitySliderChanged = (event, opacityValue) => {\n    this.props.layer.setOpacity(opacityValue);\n  };\n\n  toggle = (e) => {\n    this.setState({\n      toggled: !this.state.toggled,\n    });\n  };\n\n  renderSettings() {\n    return (\n      <div>\n        <SettingsContainer>\n          {this.props.options?.enableTransparencySlider !== false &&\n          this.props.showOpacity\n            ? this.renderOpacitySlider()\n            : null}\n          {this.props.showLegend ? this.renderLegendImage() : null}\n          {this.props.layer.getProperties().filterable ? (\n            <VectorFilter layer={this.props.layer} />\n          ) : null}\n          {this.props.cqlFilterVisible && (\n            <CQLFilter layer={this.props.layer} />\n          )}\n        </SettingsContainer>\n      </div>\n    );\n  }\n\n  renderLegendImage() {\n    const index = this.props.index ? this.props.index : 0;\n    const src = this.state.legend?.[index]?.url ?? \"\";\n\n    return src ? (\n      <div>\n        <img max-width=\"250px\" alt=\"Teckenförklaring\" src={src} />\n      </div>\n    ) : null;\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.props.toggled ? this.renderSettings() : null}</div>\n      </div>\n    );\n  }\n}\n\nexport default LayerSettings;\n","import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { Vector as VectorLayer } from \"ol/layer\";\nimport { hfetch } from \"utils/FetchWrapper\";\n\nconst StyledFormControl = styled(FormControl)(({ theme }) => ({\n  margin: theme.spacing(1),\n  minWidth: 120,\n}));\n\nconst StyledTypography = styled(Typography)(({ theme }) => ({\n  fontWeight: 500,\n}));\n\nclass VectorFilter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterAttribute: props.layer.get(\"filterAttribute\") || \"\",\n      filterValue: props.layer.get(\"filterValue\") || \"\",\n      filterComparer: props.layer.get(\"filterComparer\") || \"\",\n      layerProperties: [],\n    };\n    this.loadFeatureInfo();\n  }\n\n  /**\n   * @summary Prepare entries for dropdown, will contain possible values for filterAttribute.\n   *\n   * @memberof VectorFilter\n   */\n  loadFeatureInfo = () => {\n    const { url, featureType } = this.props.layer.getProperties();\n    hfetch(\n      url +\n        `?service=WFS&request=describeFeatureType&outputFormat=application/json&typename=${featureType}`\n    ).then((response) => {\n      response.json().then((featureInfo) => {\n        const featureTypeInfo = featureInfo.featureTypes.find(\n          (type) => type.typeName === featureType\n        );\n        if (featureTypeInfo && Array.isArray(featureTypeInfo.properties)) {\n          const layerProperties = featureTypeInfo.properties\n            .filter((property) => property.type !== \"gml:Geometry\")\n            .map((property) => property.name);\n          this.setState({\n            layerProperties,\n          });\n        }\n      });\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  /**\n   * @summary Reads filter options from state, applies them on layer and refreshes the source.\n   *\n   * @memberof VectorFilter\n   */\n  setFilter = (e) => {\n    this.props.layer.set(\"filterAttribute\", this.state.filterAttribute);\n    this.props.layer.set(\"filterComparer\", this.state.filterComparer);\n    this.props.layer.set(\"filterValue\", this.state.filterValue);\n\n    this.props.layer.getSource().refresh();\n  };\n\n  /**\n   * @ Resets the UI to no filter and reloads the source\n   *\n   * @memberof VectorFilter\n   */\n  resetFilter = (e) => {\n    // Reset the UI\n    this.setState({\n      filterAttribute: \"\",\n      filterValue: \"\",\n      filterComparer: \"\",\n    });\n\n    // Reset filter options on layer\n    this.props.layer.set(\"filterAttribute\", \"\");\n    this.props.layer.set(\"filterComparer\", \"\");\n    this.props.layer.set(\"filterValue\", \"\");\n\n    // Refresh source\n    this.props.layer.getSource().refresh();\n  };\n\n  render() {\n    const { layer } = this.props;\n    if (layer instanceof VectorLayer) {\n      return (\n        <>\n          <StyledTypography variant=\"subtitle2\">\n            Filtrera innehåll baserat på attribut\n          </StyledTypography>\n          <StyledFormControl>\n            <InputLabel htmlFor=\"attribute\">Attribut</InputLabel>\n            <Select\n              value={this.state.filterAttribute}\n              onChange={this.handleChange}\n              inputProps={{\n                name: \"filterAttribute\",\n                id: \"attribute\",\n              }}\n            >\n              {this.state.layerProperties.map((property, i) => {\n                return (\n                  <MenuItem key={i} value={property}>\n                    {property}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </StyledFormControl>\n          <StyledFormControl>\n            <InputLabel htmlFor=\"comparer\">Jämförare</InputLabel>\n            <Select\n              value={this.state.filterComparer}\n              onChange={this.handleChange}\n              inputProps={{\n                name: \"filterComparer\",\n                id: \"comparer\",\n              }}\n            >\n              <MenuItem value=\"gt\">Större än</MenuItem>\n              <MenuItem value=\"lt\">Mindre än</MenuItem>\n              <MenuItem value=\"eq\">Lika med</MenuItem>\n              <MenuItem value=\"not\">Skilt från</MenuItem>\n            </Select>\n          </StyledFormControl>\n          <StyledFormControl>\n            <Input\n              value={this.state.filterValue}\n              onChange={this.handleChange}\n              placeholder=\"Filtervärde\"\n              inputProps={{\n                name: \"filterValue\",\n                \"aria-label\": \"Värde\",\n              }}\n            />\n          </StyledFormControl>\n\n          <Button variant=\"contained\" color=\"primary\" onClick={this.setFilter}>\n            Aktivera\n          </Button>\n          <Button onClick={this.resetFilter}>Återställ</Button>\n        </>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default VectorFilter;\n"],"names":["layer","source","getSource","currentCqlFilterValue","getParams","CQL_FILTER","useState","cqlFilter","setCqlFilter","htmlFor","id","type","multiline","fullWidth","placeholder","value","onChange","e","target","endAdornment","position","disableInteractive","title","edge","onClick","filter","trim","length","undefined","updateParams","size","index","enableDownloadLink","layerName","Array","isArray","subLayers","encodeURI","wmsUrl","get","downloadUrl","document","location","ExpandButtonWrapper","styled","display","float","cursor","LayerInfo","theme","width","borderBottom","spacing","palette","divider","LayerSummaryContainer","props","justifyContent","container","alignItems","wrap","SummaryButtonsContainer","SummaryButtonWrapper","height","Caption","Typography","fontSize","typography","pxToRem","CheckBoxWrapper","marginRight","LegendImage","marginLeft","maxWidth","LegendIcon","InfoTextContainer","margin","StyledList","padding","listStyle","LayerGroupItem","openInformative","chapter","onOpenChapter","toggleVisible","visible","state","setState","setVisible","setHidden","l","LAYERS","visibleSubLayers","la","subLayersToShow","hasOwnProperty","join","STYLES","Object","entries","layersInfo","k","indexOf","map","style","toggleGroupVisible","toggleLayerVisible","subLayer","layerVisibility","isVisible","some","visibleSubLayer","push","visibleSubLayersStyles","forEach","renderInfoToggler","isInfoEmpty","infoVisible","toggleInfo","boxShadow","borderRadius","layerInfo","caption","expanded","name","legend","status","infoTitle","infoText","infoUrl","infoUrlText","infoOwner","infoExpanded","instruction","open","opacityValue","toggleSettings","toggleSubLayerSettings","bind","renderSubLayer","hideExpandArrow","model","this","globalObserver","subscribe","observer","d","src","url","alt","chapters","result","reduce","chaptersWithLayer","layers","layerId","findChapters","i","header","sx","infoCaption","legendIcon","renderLegendIcon","mapConfig","item","xs","variant","dangerouslySetInnerHTML","__html","href","rel","renderInfo","renderMetadataLink","renderOwner","renderChapterLinks","selected","cqlFilterVisible","toggle","fill","renderStatus","renderDetails","options","toggled","showOpacity","showLegend","renderSubLayers","Component","SettingsContainer","overflow","paddingLeft","paddingRight","paddingBottom","paddingTop","SliderContainer","flexFlow","SliderTextWrapper","flex","minWidth","SliderWrapper","top","LayerSettings","updateOpacity","getOpacity","opacitySliderChanged","event","setOpacity","on","min","max","step","Math","trunc","toFixed","enableTransparencySlider","renderOpacitySlider","renderLegendImage","getProperties","filterable","renderSettings","React","StyledFormControl","FormControl","StyledTypography","fontWeight","VectorFilter","loadFeatureInfo","featureType","hfetch","then","response","json","featureInfo","featureTypeInfo","featureTypes","find","typeName","properties","layerProperties","property","handleChange","setFilter","set","filterAttribute","filterComparer","filterValue","refresh","resetFilter","VectorLayer","inputProps","color"],"sourceRoot":""}
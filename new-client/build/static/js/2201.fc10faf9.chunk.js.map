{"version":3,"file":"static/js/2201.fc10faf9.chunk.js","mappings":"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","sources":["plugins/Measure/MeasureView.js","../node_modules/@mui/material/esm/NativeSelect/NativeSelect.js"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Button from \"@mui/material/Button\";\nimport NativeSelect from \"@mui/material/NativeSelect\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Grid from \"@mui/material/Grid\";\nimport Input from \"@mui/material/Input\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport { withSnackbar } from \"notistack\";\nimport { Typography } from \"@mui/material\";\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  marginTop: theme.spacing(1),\n}));\n\nclass MeasureView extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.model = props.model;\n    this.app = props.app;\n    this.localObserver = props.localObserver;\n    this.state = {\n      shape: this.model.getType(),\n    };\n  }\n\n  handleChange = (name) => (event) => {\n    this.setState({ [name]: event.target.value });\n    this.model.setType(event.target.value);\n  };\n\n  render() {\n    return (\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Typography variant=\"body1\">\n            Vid ritning av sträckor och arealer är det möjligt att hålla ner\n            Shift-tangenten. Då kan man rita sträckan/arealen på fri hand.\n            <br />\n            <br />\n            För att avsluta en mätning, klicka igen på sista punkten eller tryck\n            på Esc-tangenten.\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <InputLabel variant=\"standard\" htmlFor=\"measure-native-helper\">\n              Typ av mätning\n            </InputLabel>\n            <NativeSelect\n              value={this.state.shape}\n              onChange={this.handleChange(\"shape\")}\n              input={<Input name=\"shape\" id=\"measure-native-helper\" />}\n            >\n              <option value=\"Point\">Punkt</option>\n              <option value=\"LineString\">Sträcka</option>\n              <option value=\"Circle\">Cirkel</option>\n              <option value=\"Polygon\">Areal</option>\n            </NativeSelect>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <StyledButton\n            variant=\"contained\"\n            fullWidth\n            onClick={this.model.clear}\n          >\n            Rensa mätning\n          </StyledButton>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withSnackbar(MeasureView);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"],\n      _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getNativeSelectUtilityClasses } from './nativeSelectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getNativeSelectUtilityClasses, classes);\n};\n\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\n\n\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n\n  const {\n    className,\n    children,\n    classes: classesProp = {},\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(input, _extends({\n      // Most of the logic is implemented in `NativeSelectInput`.\n      // The `Select` component is a simple API wrapper to expose something better to play with.\n      inputComponent: NativeSelectInput,\n      inputProps: _extends({\n        children,\n        classes: otherClasses,\n        IconComponent,\n        variant: fcs.variant,\n        type: undefined\n      }, inputProps, input ? input.props.inputProps : {}),\n      ref\n    }, other, {\n      className: clsx(classes.root, input.props.className, className)\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;"],"names":["StyledButton","styled","Button","marginTop","theme","spacing","MeasureView","props","handleChange","name","event","setState","target","value","model","setType","app","localObserver","state","shape","getType","container","item","xs","variant","fullWidth","htmlFor","this","onChange","input","id","onClick","clear","React","withSnackbar","_excluded","_excluded2","defaultInput","_jsx","Input","NativeSelect","inProps","ref","useThemeProps","className","children","classes","classesProp","IconComponent","ArrowDropDownIcon","inputProps","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","fcs","formControlState","states","ownerState","composeClasses","root","getNativeSelectUtilityClasses","useUtilityClasses","_extends","otherClasses","inputComponent","NativeSelectInput","type","undefined","clsx","muiName"],"sourceRoot":""}
{"version":3,"file":"static/js/3624.107f6109.chunk.js","mappings":"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","sources":["plugins/Collector/CollectorModel.js"],"sourcesContent":["import { WFS } from \"ol/format\";\nimport { Style, Stroke, Fill, Circle, RegularShape, Icon } from \"ol/style\";\nimport { MultiPoint, Polygon } from \"ol/geom\";\nimport Feature from \"ol/Feature\";\nimport Vector from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport { all as strategyAll } from \"ol/loadingstrategy\";\nimport { Draw } from \"ol/interaction\";\nimport X2JS from \"x2js\";\nimport { hfetch } from \"utils/FetchWrapper\";\n\nclass CollectorModel {\n  constructor(settings) {\n    this.app = settings.app;\n    this.map = settings.map;\n    this.observer = settings.observer;\n    this.globalObserver = settings.globalObserver;\n    this.activeServices = [settings.options.serviceId];\n    this.sources = [settings.options.serviceConfig];\n    this.vectorSource = undefined;\n    this.layer = undefined;\n    this.select = undefined;\n    this.modify = undefined;\n    this.key = undefined;\n    this.editFeature = undefined;\n    this.editSource = undefined;\n    this.filty = false;\n    this.saving = false;\n    this.geometryName = \"geom\";\n    this.wkt = settings.options.wkt ?? false;\n    this.serviceConfig = settings.options.serviceConfig;\n    if (this.serviceConfig) {\n      this.setFormValuesFromConfig();\n      this.setLayer(settings.options.serviceConfig);\n    } else {\n      console.warn(\"Edit service is missing or not properly configured.\");\n    }\n  }\n\n  setFormValuesFromConfig = () => {\n    if (this.serviceConfig) {\n      this.formValues = this.serviceConfig.editableFields.reduce(\n        (obj, field) => {\n          obj[field.name] = this.valueByDataType(field);\n          return obj;\n        },\n        {}\n      );\n    } else {\n      this.formValues = {};\n    }\n  };\n\n  valueByDataType(field) {\n    switch (field.dataType) {\n      case \"date-time\":\n        return new Date().getTime();\n      case \"int\":\n      case \"number\":\n        return 0;\n      case \"string\":\n        if (field.textType === \"flerval\") {\n          return field.values.map((f) => ({ checked: false, value: f }));\n        }\n        return \"\";\n      default:\n        return \"\";\n    }\n  }\n\n  write(features) {\n    var format = new WFS(),\n      lr = this.editSource.layers[0].split(\":\"),\n      fp = lr.length === 2 ? lr[0] : \"\",\n      ft = lr.length === 2 ? lr[1] : lr[0],\n      options = {\n        featureNS: this.editSource.uri,\n        featurePrefix: fp,\n        featureType: ft,\n        hasZ: false,\n        version: \"1.1.0\", // or \"1.0.0\"\n        srsName: this.editSource.projection,\n      };\n\n    return format.writeTransaction(\n      features.inserts,\n      features.updates,\n      features.deletes,\n      options\n    );\n  }\n\n  refreshLayer(layerName) {\n    var source,\n      foundLayer = this.map\n        .getLayers()\n        .getArray()\n        .find((layer) => {\n          var match = false;\n          if (layer.getSource().getParams) {\n            let params = layer.getSource().getParams();\n            if (typeof params === \"object\") {\n              let paramName = params.LAYERS.split(\":\");\n              let layerSplit = layerName.split(\":\");\n              if (paramName.length === 2 && layerSplit.length === 2) {\n                match = layerName === params.LAYERS;\n              }\n              if (paramName.length === 1) {\n                match = layerSplit[1] === params.LAYERS;\n              }\n            }\n          }\n          return match;\n        });\n\n    if (foundLayer) {\n      source = foundLayer.getSource();\n      source.changed();\n      source.updateParams({ time: Date.now() });\n      this.map.updateSize();\n    }\n  }\n\n  parseWFSTresponse(response) {\n    var str =\n      typeof response !== \"string\"\n        ? new XMLSerializer().serializeToString(response)\n        : response;\n    return new X2JS().xml2js(str);\n  }\n\n  transact(features, done) {\n    var node = this.write(features),\n      serializer = new XMLSerializer(),\n      src = this.editSource,\n      payload = node ? serializer.serializeToString(node) : undefined;\n\n    if (payload && this.saving === false) {\n      this.saving = true;\n      hfetch(src.url, {\n        method: \"POST\",\n        body: payload,\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"text/xml\",\n        },\n      })\n        .then((response) => {\n          this.saving = false;\n          response.text().then((wfsResponseText) => {\n            this.refreshLayer(src.layers[0]);\n            this.vectorSource\n              .getFeatures()\n              .filter((f) => f.modification !== undefined)\n              .forEach((f) => (f.modification = undefined));\n            done(this.parseWFSTresponse(wfsResponseText));\n          });\n        })\n        .catch((response) => {\n          this.saving = false;\n          response.text().then((errorMessage) => {\n            done(errorMessage);\n          });\n        });\n    }\n  }\n\n  save(done) {\n    var inserts = this.vectorSource.getFeatures();\n    const formValues = { ...this.formValues };\n    Object.keys(formValues).forEach((key) => {\n      if (Array.isArray(formValues[key])) {\n        formValues[key] = formValues[key]\n          .filter((v) => v.checked)\n          .map((v) => v.value)\n          .join(\", \");\n      }\n    });\n\n    if (inserts.length === 0) {\n      inserts.push(new Feature());\n    }\n\n    if (inserts.length > 0) {\n      inserts[0].setProperties(formValues);\n      this.transact({ inserts: inserts }, done);\n    }\n  }\n\n  getSelectStyle(feature) {\n    return [\n      new Style({\n        stroke: new Stroke({\n          color: \"rgba(0, 255, 255, 1)\",\n          width: 3,\n        }),\n        fill: new Fill({\n          color: \"rgba(0, 0, 0, 0.5)\",\n        }),\n        image: new Circle({\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0.5)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(0, 255, 255, 1)\",\n            width: 2,\n          }),\n          radius: 3,\n        }),\n      }),\n      new Style({\n        image: new RegularShape({\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0.2)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(0, 0, 0, 1)\",\n            width: 2,\n          }),\n          points: 4,\n          radius: 8,\n          angle: Math.PI / 4,\n        }),\n        geometry: (feature) => {\n          var coordinates =\n            feature.getGeometry() instanceof Polygon\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n          return new MultiPoint(coordinates);\n        },\n      }),\n    ];\n  }\n\n  getVectorStyle(feature) {\n    return [\n      new Style({\n        stroke: new Stroke({\n          color: \"rgba(255, 165, 20, 1)\",\n          width: 3,\n        }),\n        fill: new Fill({\n          color: \"rgba(255, 165, 20, 0.5)\",\n        }),\n        image: new Icon({\n          scale: 1 / 2,\n          anchor: [0.5, 1],\n          anchorXUnits: \"fraction\",\n          anchorYUnits: \"fraction\",\n          src: \"marker_x2.png\",\n        }),\n      }),\n    ];\n  }\n\n  getHiddenStyle(feature) {\n    return [\n      new Style({\n        stroke: new Stroke({\n          color: \"rgba(0, 0, 0, 0)\",\n          width: 0,\n        }),\n        fill: new Fill({\n          color: \"rgba(1, 2, 3, 0)\",\n        }),\n        image: new Circle({\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(0, 0, 0, 0)\",\n            width: 0,\n          }),\n          radius: 0,\n        }),\n      }),\n    ];\n  }\n\n  getSketchStyle() {\n    return [\n      new Style({\n        fill: new Fill({\n          color: \"rgba(255, 255, 255, 0.5)\",\n        }),\n        stroke: new Stroke({\n          color: \"rgba(0, 0, 0, 0.5)\",\n          width: 4,\n        }),\n        image: new Circle({\n          radius: 6,\n          fill: new Fill({\n            color: \"rgba(0, 0, 0, 0.5)\",\n          }),\n          stroke: new Stroke({\n            color: \"rgba(255, 255, 255, 0.5)\",\n            width: 2,\n          }),\n        }),\n      }),\n    ];\n  }\n\n  refreshEditingLayer() {\n    var mapLayers = this.map\n      .getLayers()\n      .getArray()\n      .filter(\n        (layer) => layer.getProperties().caption === this.editSource.caption\n      );\n\n    mapLayers.forEach((mapLayer) => {\n      if (mapLayer.getSource) {\n        let s = mapLayer.getSource();\n        if (s.clear) {\n          s.clear();\n        }\n        if (s.getParams) {\n          var params = s.getParams();\n          params.t = new Date().getMilliseconds();\n          s.updateParams(params);\n        }\n        if (s.changed) {\n          s.changed();\n        }\n      }\n    });\n  }\n\n  setLayer(serviceConfig) {\n    this.source = serviceConfig;\n    this.filty = true;\n    this.vectorSource = new VectorSource({\n      strategy: strategyAll,\n      projection: this.source.projection,\n    });\n\n    this.layer = new Vector({\n      layerType: \"system\",\n      zIndex: 5000,\n      name: \"pluginCollector\",\n      caption: \"Collector layer\",\n      source: this.vectorSource,\n      style: this.getVectorStyle(),\n    });\n\n    if (this.layer) {\n      this.map.removeLayer(this.layer);\n    }\n\n    this.map.addLayer(this.layer);\n    this.editSource = this.source;\n    this.editFeature = null;\n    this.observer.publish(\"editSource\", this.source);\n    this.observer.publish(\"editFeature\", null);\n    this.observer.publish(\"layerChanged\", this.layer);\n  }\n\n  activateAdd(geometryType) {\n    this.draw = new Draw({\n      source: this.vectorSource,\n      style: this.getSketchStyle(),\n      type: geometryType,\n      geometryName: this.geometryName,\n    });\n\n    this.draw.on(\"drawend\", (event) => {\n      // WKT supports insertion of multiple features and clear should therefore\n      // not be executed in this case\n      if (!this.wkt) {\n        this.vectorSource.clear();\n      }\n      event.feature.modification = \"added\";\n    });\n    this.map.addInteraction(this.draw);\n    this.map.clickLock.add(\"collector\");\n  }\n\n  activateInteraction(type, geometryType) {\n    if (type === \"add\") {\n      this.activateAdd(geometryType);\n    }\n    if (type === \"move\") {\n      this.activateMove();\n    }\n    if (type === \"modify\") {\n      this.activateModify();\n    }\n    if (type === \"remove\") {\n      this.map.clickLock.add(\"collector\");\n      this.activateRemove();\n    }\n    this.map.snapHelper.add(\"collector\");\n  }\n\n  deactivateInteraction() {\n    this.map.snapHelper.delete(\"collector\");\n    if (this.select) {\n      this.map.removeInteraction(this.select);\n    }\n    if (this.modify) {\n      this.map.removeInteraction(this.modify);\n    }\n    if (this.draw) {\n      this.map.removeInteraction(this.draw);\n    }\n    if (this.move) {\n      this.map.removeInteraction(this.move);\n    }\n    if (this.snap) {\n      this.map.removeInteraction(this.snap);\n    }\n    if (this.remove) {\n      this.remove = false;\n      this.map.clickLock.delete(\"collector\");\n\n      this.map.un(\"singleclick\", this.removeSelected);\n    }\n  }\n\n  reset() {\n    if (this.vectorSource) {\n      this.vectorSource.clear();\n    }\n    this.map.clickLock.delete(\"collector\");\n\n    this.deactivateInteraction();\n    this.setFormValuesFromConfig();\n    this.observer.publish(\"reset\");\n  }\n\n  deactivate() {\n    this.reset();\n    this.observer.publish(\"editFeature\", this.editFeature);\n    this.observer.publish(\"editSource\", this.editSource);\n    this.observer.publish(\"deactivate\");\n  }\n\n  getSources() {\n    return this.sources.filter((source) => {\n      return this.activeServices.some((serviceId) => serviceId === source.id);\n    });\n  }\n}\n\nexport default CollectorModel;\n"],"names":["CollectorModel","settings","setFormValuesFromConfig","serviceConfig","formValues","editableFields","reduce","obj","field","name","valueByDataType","this","app","map","observer","globalObserver","activeServices","options","serviceId","sources","vectorSource","undefined","layer","select","modify","key","editFeature","editSource","filty","saving","geometryName","wkt","setLayer","console","warn","dataType","Date","getTime","textType","values","f","checked","value","features","format","WFS","lr","layers","split","fp","length","ft","featureNS","uri","featurePrefix","featureType","hasZ","version","srsName","projection","writeTransaction","inserts","updates","deletes","layerName","source","foundLayer","getLayers","getArray","find","match","getSource","getParams","params","paramName","LAYERS","layerSplit","changed","updateParams","time","now","updateSize","response","str","XMLSerializer","serializeToString","X2JS","xml2js","done","node","write","serializer","src","payload","hfetch","url","method","body","credentials","headers","then","text","wfsResponseText","refreshLayer","getFeatures","filter","modification","forEach","parseWFSTresponse","catch","errorMessage","Object","keys","Array","isArray","v","join","push","Feature","setProperties","transact","feature","Style","stroke","Stroke","color","width","fill","Fill","image","Circle","radius","RegularShape","points","angle","Math","PI","geometry","coordinates","getGeometry","Polygon","getCoordinates","MultiPoint","Icon","scale","anchor","anchorXUnits","anchorYUnits","getProperties","caption","mapLayer","s","clear","t","getMilliseconds","VectorSource","strategy","strategyAll","Vector","layerType","zIndex","style","getVectorStyle","removeLayer","addLayer","publish","geometryType","draw","Draw","getSketchStyle","type","on","event","addInteraction","clickLock","add","activateAdd","activateMove","activateModify","activateRemove","snapHelper","delete","removeInteraction","move","snap","remove","un","removeSelected","deactivateInteraction","reset","some","id"],"sourceRoot":""}
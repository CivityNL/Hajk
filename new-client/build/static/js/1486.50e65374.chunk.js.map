{"version":3,"file":"static/js/1486.50e65374.chunk.js","mappings":"uKAeMA,EAAU,qBADS,OAGnBC,EAAAA,WACJ,WAAYC,IAAW,eACrBC,KAAKC,IAAMF,EAASE,IACpBD,KAAKE,IAAMH,EAASG,IACpBF,KAAKG,UAAY,GAEjBH,KAAKI,iBACN,CAmIA,OAnIA,wCAED,WACE,OAAOJ,KAAKC,IACTI,YACAC,WACAC,QACC,SAACC,GAAD,OACEA,EAAMC,cACND,EAAME,gBAAgBC,OACtBC,EAAAA,EAAAA,gBAAeJ,EAAME,gBAAgBC,KAHvC,IAKDV,KAAI,SAACO,GAAD,OAAWA,EAAME,gBAAgBC,IAAjC,IACJE,KAAK,IACT,iCAED,SAAiBC,GACf,IAAIC,EAASD,EAAUE,MAAM,KAC7BhB,KAAKC,IACFI,YACAC,WACAC,QACC,SAACC,GAAD,OACEA,EAAME,gBAAgBC,OACtBC,EAAAA,EAAAA,gBAAeJ,EAAME,gBAAgBC,KAFvC,IAIDM,SAAQ,SAACT,GACRA,EAAMU,WAAWH,EAAOI,QAAQX,EAAME,gBAAgBC,OAAS,EAChE,GACJ,4BAED,WACE,IAAMS,EAAOpB,KAAKC,IAAIoB,UAChBC,EAAaF,EAAKG,YAClBC,EAAM,CACVC,EAAGH,EAAW,GACdI,EAAGJ,EAAW,GACdK,EAAGP,EAAKQ,WAGV,OAAO,QACLC,EAAG7B,KAAKE,IAAI4B,OAAOC,UACnBC,EAAGhC,KAAKiC,oBACLT,EAEN,6CAED,SAA6BU,GAC3B,IAAIC,EAAWnC,KAAKG,UAAU+B,GAC1BC,GACFnC,KAAKoC,YAAYD,EAEpB,4BAED,SAAYA,GACV,GAAKA,EAAL,CAIA,IAAIE,EAAKrC,KAAKsC,mBAAmBH,GACjCnC,KAAKuC,iBAAiBF,EAAGtC,SAASiC,GAClC,IAAIZ,EAAOpB,KAAKC,IAAIoB,UACpBD,EAAKoB,UAAU,CAACH,EAAGtC,SAAS0B,EAAGY,EAAGtC,SAAS2B,IAC3CN,EAAKqB,QAAQJ,EAAGtC,SAAS4B,GACzBU,EAAK,IAPJ,CAQF,gCAED,WACE,IAAIK,EAAkBC,aAAaC,QAAQ/C,GAC3C,IAAK6C,EAAiB,CAGpBC,aAAaE,QAAQhD,EAFF,MAGnB6C,EAHmB,IAIpB,CACD1C,KAAKG,UAAY2C,KAAKC,MAAML,EAC7B,+BAED,WAEEC,aAAaE,QAAQhD,EAAYiD,KAAKE,UAAUhD,KAAKG,WACtD,mCAED,SAAmBgC,GACjB,IAAIc,EAAU,KAKd,OAJId,KACFc,GAAO,UAAQd,IACPpC,SAAW+C,KAAKC,MAAMG,KAAKf,EAASpC,YAEvCkD,CACR,uCAED,SAAuBtC,GACrB,OAAOX,KAAKG,UAAUgD,MAAK,SAAChB,GAAD,OAAcA,EAASxB,OAASA,CAAhC,GAC5B,gCAED,SAAgBwB,GACVA,IACFA,EAASpC,SAAWqD,KAAKN,KAAKE,UAAUhD,KAAKqD,gBAC7CrD,KAAKsD,iBAER,4BAED,SAAY3C,GAA6B,IAAvB4C,EAAsB,wDAClCpB,EAAWnC,KAAKwD,uBAAuB7C,GAE3C,GAAIwB,EAIF,OAHqB,IAAjBoB,GACFvD,KAAKyD,gBAAgBtB,IAEhB,EAGT,IAAIpC,EAAWC,KAAKqD,cASpB,OARArD,KAAKG,UAAUuD,KAAK,CAClB/C,KAAMA,EACNZ,SAAUqD,KAAKN,KAAKE,UAAUjD,IAC9B4D,UAAW,EACXC,UAAU,IAEZ5D,KAAKsD,kBAEE,CACR,+BAED,SAAenB,GACb,IAAID,EAAQlC,KAAKG,UAAUgB,QAAQgB,GAC/BD,GAAS,IACXlC,KAAKG,UAAU0D,OAAO3B,EAAO,GAC7BlC,KAAKsD,iBAER,OA1IGxD,GA6IN,W","sources":["plugins/Bookmarks/BookmarksModel.js"],"sourcesContent":["/**\n * @summary Handles the users bookmarks in localStorage\n * @description  Read/Writes bookmarks\n *\n * @class BookmarksModel\n */\n\n/**\n * Store bookmarks using a key with version.\n * In future we might want to create backwardcompatibility if we add functionality.\n */\n\nimport { isValidLayerId } from \"../../utils/Validator\";\n\nconst bookmarksVersion = \"1.0\";\nconst storageKey = `bookmarks_v${bookmarksVersion}`;\n\nclass BookmarksModel {\n  constructor(settings) {\n    this.map = settings.map;\n    this.app = settings.app;\n    this.bookmarks = [];\n\n    this.readFromStorage();\n  }\n\n  getVisibleLayers() {\n    return this.map\n      .getLayers()\n      .getArray()\n      .filter(\n        (layer) =>\n          layer.getVisible() &&\n          layer.getProperties().name &&\n          isValidLayerId(layer.getProperties().name)\n      )\n      .map((layer) => layer.getProperties().name)\n      .join(\",\");\n  }\n\n  setVisibleLayers(strLayers) {\n    let layers = strLayers.split(\",\");\n    this.map\n      .getLayers()\n      .getArray()\n      .filter(\n        (layer) =>\n          layer.getProperties().name &&\n          isValidLayerId(layer.getProperties().name)\n      )\n      .forEach((layer) => {\n        layer.setVisible(layers.indexOf(layer.getProperties().name) > -1);\n      });\n  }\n\n  getMapState() {\n    const view = this.map.getView();\n    const viewCenter = view.getCenter();\n    const pos = {\n      x: viewCenter[0],\n      y: viewCenter[1],\n      z: view.getZoom(),\n    };\n\n    return {\n      m: this.app.config.activeMap,\n      l: this.getVisibleLayers(),\n      ...pos,\n    };\n  }\n\n  setMapStateFromBookmarkIndex(index) {\n    let bookmark = this.bookmarks[index];\n    if (bookmark) {\n      this.setMapState(bookmark);\n    }\n  }\n\n  setMapState(bookmark) {\n    if (!bookmark) {\n      return;\n    }\n\n    let bm = this.getDecodedBookmark(bookmark);\n    this.setVisibleLayers(bm.settings.l);\n    let view = this.map.getView();\n    view.setCenter([bm.settings.x, bm.settings.y]);\n    view.setZoom(bm.settings.z);\n    bm = null;\n  }\n\n  readFromStorage() {\n    let storedBookmarks = localStorage.getItem(storageKey);\n    if (!storedBookmarks) {\n      let emptyJSONArr = \"[]\";\n      // TODO: Describe in https://github.com/hajkmap/Hajk/wiki/Cookies-in-Hajk and add the functionalOk() hook\n      localStorage.setItem(storageKey, emptyJSONArr);\n      storedBookmarks = emptyJSONArr;\n    }\n    this.bookmarks = JSON.parse(storedBookmarks);\n  }\n\n  writeToStorage() {\n    // TODO: Describe in https://github.com/hajkmap/Hajk/wiki/Cookies-in-Hajk and add the functionalOk() hook\n    localStorage.setItem(storageKey, JSON.stringify(this.bookmarks));\n  }\n\n  getDecodedBookmark(bookmark) {\n    let decoded = null;\n    if (bookmark) {\n      decoded = { ...bookmark };\n      decoded.settings = JSON.parse(atob(bookmark.settings));\n    }\n    return decoded;\n  }\n\n  bookmarkWithNameExists(name) {\n    return this.bookmarks.find((bookmark) => bookmark.name === name);\n  }\n\n  replaceBookmark(bookmark) {\n    if (bookmark) {\n      bookmark.settings = btoa(JSON.stringify(this.getMapState()));\n      this.writeToStorage();\n    }\n  }\n\n  addBookmark(name, allowReplace = false) {\n    let bookmark = this.bookmarkWithNameExists(name);\n\n    if (bookmark) {\n      if (allowReplace === true) {\n        this.replaceBookmark(bookmark);\n      }\n      return false;\n    }\n\n    let settings = this.getMapState();\n    this.bookmarks.push({\n      name: name,\n      settings: btoa(JSON.stringify(settings)),\n      sortOrder: 0,\n      favorite: false,\n    });\n    this.writeToStorage();\n\n    return true;\n  }\n\n  removeBookmark(bookmark) {\n    let index = this.bookmarks.indexOf(bookmark);\n    if (index > -1) {\n      this.bookmarks.splice(index, 1);\n      this.writeToStorage();\n    }\n  }\n}\n\nexport default BookmarksModel;\n"],"names":["storageKey","BookmarksModel","settings","this","map","app","bookmarks","readFromStorage","getLayers","getArray","filter","layer","getVisible","getProperties","name","isValidLayerId","join","strLayers","layers","split","forEach","setVisible","indexOf","view","getView","viewCenter","getCenter","pos","x","y","z","getZoom","m","config","activeMap","l","getVisibleLayers","index","bookmark","setMapState","bm","getDecodedBookmark","setVisibleLayers","setCenter","setZoom","storedBookmarks","localStorage","getItem","setItem","JSON","parse","stringify","decoded","atob","find","btoa","getMapState","writeToStorage","allowReplace","bookmarkWithNameExists","replaceBookmark","push","sortOrder","favorite","splice"],"sourceRoot":""}
{"version":3,"file":"static/js/6430.b1102cf0.chunk.js","mappings":"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","sources":["plugins/Coordinates/CoordinatesTransformRow.js"],"sourcesContent":["import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport NumberFormat from \"react-number-format\";\nimport { transform } from \"ol/proj\";\nimport { withSnackbar } from \"notistack\";\nimport Grid from \"@mui/material/Grid\";\n\nclass CoordinatesTransformRow extends React.PureComponent {\n  state = {\n    errorX: \"\",\n    errorY: \"\",\n    coordinateX: \"\",\n    coordinateY: \"\",\n    coordinateXFloat: 0,\n    coordinateYFloat: 0,\n    wasLastChanged: false,\n    wasModified: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.model = this.props.model;\n    this.transformation = this.props.transformation;\n    this.localObserver = this.props.model.localObserver;\n\n    this.localObserver.subscribe(\"newCoordinates\", (incomingCoords) => {\n      // Force a change if the new coords from map click or user location since\n      // there might be a transformation with the same code as on the map\n      if (\n        incomingCoords[\"proj\"] !== this.transformation.code ||\n        incomingCoords[\"force\"]\n      ) {\n        const transformedCoords = transform(\n          incomingCoords[\"coordinates\"],\n          incomingCoords[\"proj\"],\n          this.props.transformation.code\n        );\n        this.setState({\n          errorX: \"\",\n          errorY: \"\",\n          wasModified: true,\n          coordinateX: transformedCoords[0].toFixed(\n            this.transformation.precision\n          ),\n          coordinateY: transformedCoords[1].toFixed(\n            this.transformation.precision\n          ),\n          coordinateXFloat: transformedCoords[0],\n          coordinateYFloat: transformedCoords[1],\n          wasLastChanged: false,\n        });\n      } else {\n        this.setState({ wasLastChanged: true, wasModified: true });\n      }\n    });\n\n    this.localObserver.subscribe(\"resetCoordinates\", () => {\n      this.setState({\n        errorX: \"\",\n        errorY: \"\",\n        coordinateX: \"\",\n        coordinateY: \"\",\n        coordinateXFloat: 0,\n        coordinateYFloat: 0,\n      });\n    });\n  }\n\n  handleInputX(event) {\n    if (\n      (!this.props.inverseAxis && event.value === this.state.coordinateX) ||\n      (this.props.inverseAxis && event.value === this.state.coordinateY)\n    ) {\n      // Nothing was changed so do nothing, this happens since the value is\n      // changed multiple times during formatting and we do not want to create\n      // infinite loops\n      return;\n    }\n    if (!this.props.inverseAxis) {\n      // Validate that the changed data is a finite number\n      this.setState({\n        coordinateX: event.value,\n        coordinateXFloat: event.floatValue,\n        wasModified: true,\n      });\n    } else {\n      this.setState({\n        coordinateY: event.value,\n        coordinateYFloat: event.floatValue,\n        wasModified: true,\n      });\n    }\n    if (isNaN(event.floatValue) || !isFinite(event.floatValue)) {\n      this.setState({ errorX: \"Ange ett decimaltal\" });\n    } else {\n      this.setState({ errorX: \"\" });\n      const updatedValue = event.floatValue;\n\n      if (!this.props.inverseAxis) {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [updatedValue, this.state.coordinateYFloat],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      } else {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [this.state.coordinateXFloat, updatedValue],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      }\n    }\n  }\n\n  handleInputY(event) {\n    if (\n      (!this.props.inverseAxis && event.value === this.state.coordinateY) ||\n      (this.props.inverseAxis && event.value === this.state.coordinateX)\n    ) {\n      // Nothing was changed so do nothing, this happens since the value is\n      // changed multiple times during formatting and we do not want to create\n      // infinite loops\n      return;\n    }\n    if (!this.props.inverseAxis) {\n      // Validate that the changed data is a finite number\n      this.setState({\n        coordinateY: event.value,\n        coordinateYFloat: event.floatValue,\n        wasModified: true,\n      });\n    } else {\n      this.setState({\n        coordinateX: event.value,\n        coordinateXFloat: event.floatValue,\n        wasModified: true,\n      });\n    }\n    if (isNaN(event.floatValue) || !isFinite(event.floatValue)) {\n      this.setState({ errorY: \"Ange ett decimaltal\" });\n    } else {\n      this.setState({ errorY: \"\" });\n      const updatedValue = event.floatValue;\n\n      if (!this.props.inverseAxis) {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [this.state.coordinateXFloat, updatedValue],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      } else {\n        // publish the new value so all other transformations and the marker is updated\n        this.localObserver.publish(\"newCoordinates\", {\n          coordinates: [updatedValue, this.state.coordinateYFloat],\n          proj: this.props.transformation.code,\n          force: false,\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    let xCoord = this.props.inverseAxis\n      ? this.state.coordinateY\n      : this.state.coordinateX;\n    let yCoord = this.props.inverseAxis\n      ? this.state.coordinateX\n      : this.state.coordinateY;\n\n    if (this.model.showFieldsOnStart || this.state.wasModified) {\n      return (\n        <Grid container item spacing={2} rowSpacing={1}>\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" style={{ fontWeight: 600 }}>\n              {this.transformation\n                ? this.transformation.title +\n                  \" (\" +\n                  this.transformation.code +\n                  \")\"\n                : \"\"}\n            </Typography>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <NumberFormat\n              label={this.props.transformation.xtitle}\n              margin=\"dense\"\n              variant=\"outlined\"\n              size=\"small\"\n              value={xCoord}\n              name=\"numberformatX\"\n              type=\"text\"\n              onValueChange={(values) => {\n                this.handleInputX(values);\n              }}\n              axis={this.props.transformation.inverseAxis ? \"X\" : \"Y\"}\n              error={this.state.errorX !== \"\"}\n              helperText={this.state.errorX}\n              thousandSeparator={this.model.thousandSeparator ? \" \" : false}\n              customInput={TextField}\n              fullWidth={true}\n            />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <NumberFormat\n              label={this.props.transformation.ytitle}\n              margin=\"dense\"\n              size=\"small\"\n              variant=\"outlined\"\n              value={yCoord}\n              name=\"numberformatY\"\n              type=\"text\"\n              onValueChange={(values) => {\n                this.handleInputY(values);\n              }}\n              axis={this.props.transformation.inverseAxis ? \"Y\" : \"X\"}\n              error={this.state.errorY !== \"\"}\n              helperText={this.state.errorY}\n              thousandSeparator={this.model.thousandSeparator ? \" \" : false}\n              customInput={TextField}\n              fullWidth={true}\n            />\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\nexport default withSnackbar(CoordinatesTransformRow);\n"],"names":["CoordinatesTransformRow","props","state","errorX","errorY","coordinateX","coordinateY","coordinateXFloat","coordinateYFloat","wasLastChanged","wasModified","model","transformation","localObserver","subscribe","incomingCoords","code","transformedCoords","transform","setState","toFixed","precision","event","this","inverseAxis","value","floatValue","isNaN","isFinite","updatedValue","publish","coordinates","proj","force","xCoord","yCoord","showFieldsOnStart","container","item","spacing","rowSpacing","xs","variant","style","fontWeight","title","md","label","xtitle","margin","size","name","type","onValueChange","values","handleInputX","axis","error","helperText","thousandSeparator","customInput","TextField","fullWidth","ytitle","handleInputY","React","withSnackbar"],"sourceRoot":""}
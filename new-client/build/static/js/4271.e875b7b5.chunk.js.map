{"version":3,"file":"static/js/4271.e875b7b5.chunk.js","mappings":"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","sources":["components/Card.js","plugins/Anchor/Anchor.js","plugins/Anchor/AnchorModel.js","plugins/Anchor/AnchorView.js","plugins/BaseWindowPlugin.js"],"sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Card as MUICard,\n  CardHeader,\n  CardActionArea,\n  Avatar,\n} from \"@mui/material\";\n\nconst StyledCard = styled(MUICard)(({ theme }) => ({\n  marginBottom: theme.spacing(1),\n  width: \"210px\",\n  [theme.breakpoints.down(\"sm\")]: {\n    boxShadow: \"none\",\n    borderBottom: \"1px solid #ccc\",\n    borderRadius: 0,\n    margin: 0,\n    width: \"100%\",\n    justifyContent: \"left\",\n  },\n}));\n\nconst StyledAvatar = styled(Avatar)(({ theme }) => ({\n  background: theme.palette.text.primary,\n}));\n\nclass Card extends React.PureComponent {\n  state = {\n    open: false,\n    text: \"\",\n  };\n\n  static propTypes = {\n    abstract: propTypes.string.isRequired,\n    icon: propTypes.object.isRequired,\n    onClick: propTypes.func.isRequired,\n    title: propTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    abstract: \"Beskrivning saknas\",\n    title: \"Titel saknas\",\n  };\n\n  render() {\n    const { abstract, icon, onClick, title } = this.props;\n\n    return (\n      <StyledCard onClick={onClick}>\n        <CardActionArea>\n          <CardHeader\n            avatar={<StyledAvatar>{icon}</StyledAvatar>}\n            title={title}\n            subheader={abstract}\n          />\n        </CardActionArea>\n      </StyledCard>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport BaseWindowPlugin from \"../BaseWindowPlugin\";\n\nimport ShareIcon from \"@mui/icons-material/Share\";\n\nimport AnchorView from \"./AnchorView\";\nimport AnchorModel from \"./AnchorModel\";\nimport Observer from \"react-event-observer\";\n\nclass Anchor extends React.PureComponent {\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    map: propTypes.object.isRequired,\n    options: propTypes.object.isRequired,\n  };\n\n  // cleanUrl is lifted here so that it can be handled in both Model and View\n  state = {\n    cleanUrl: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.options = props.options;\n    this.title = this.options.title || \"Dela\";\n    this.app = props.app;\n\n    this.localObserver = Observer();\n    this.anchorModel = new AnchorModel({\n      app: props.app,\n      getCleanUrl: this.getCleanUrl,\n      localObserver: this.localObserver,\n      map: props.map,\n    });\n  }\n  /**\n   * @summary Used by Model to get current value of the state variable\n   *\n   * @returns {boolean} @param cleanUrl\n   */\n  getCleanUrl = () => {\n    return this.state.cleanUrl;\n  };\n\n  toggleCleanUrl = () => {\n    this.setState({ cleanUrl: !this.state.cleanUrl }, (d) => {\n      this.localObserver.publish(\"mapUpdated\", this.anchorModel.getAnchor());\n    });\n  };\n\n  render() {\n    return (\n      <BaseWindowPlugin\n        {...this.props}\n        type=\"Anchor\"\n        custom={{\n          icon: <ShareIcon />,\n          title: \"Dela\",\n          description: \"Skapa en länk och dela det du ser i kartan med andra\",\n          height: \"dynamic\",\n          width: 512,\n          top: undefined,\n          left: undefined,\n        }}\n      >\n        <AnchorView\n          cleanUrl={this.state.cleanUrl}\n          localObserver={this.localObserver}\n          model={this.anchorModel}\n          options={this.props.options}\n          toggleCleanUrl={this.toggleCleanUrl}\n        />\n      </BaseWindowPlugin>\n    );\n  }\n}\n\nexport default Anchor;\n","import { isValidLayerId } from \"../../utils/Validator\";\nclass AnchorModel {\n  constructor(settings) {\n    this.app = settings.app;\n    this.getCleanUrl = settings.getCleanUrl;\n    this.cqlFilters = {};\n    this.map = settings.map;\n    this.localObserver = settings.localObserver;\n\n    // Update the URL when map view changes\n    this.map.getView().on(\"change\", this.update);\n\n    // Update the URL when search phrase changes\n    this.app.globalObserver.subscribe(\"search.searchPhraseChanged\", () => {\n      this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n    });\n\n    this.map\n      .getLayers()\n      .getArray()\n      .forEach((layer) => {\n        // Grab an unique ID for each layer, we'll need this to save CQL filter value for each layer\n        const layerId = layer.get(\"name\");\n\n        // Update anchor each time layer visibility changes (to reflect current visible layers)\n        layer.on(\"change:visible\", (event) => {\n          this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n        });\n\n        // Update anchor each time an underlying Source changes in some way (could be new CQL params, for example).\n        layer.getSource().on(\"change\", ({ target }) => {\n          if (typeof target.getParams !== \"function\") return;\n\n          // Update CQL filters only if a real value exists\n          const cqlFilterForCurrentLayer = target.getParams()?.CQL_FILTER;\n          if (\n            cqlFilterForCurrentLayer !== null &&\n            cqlFilterForCurrentLayer !== undefined\n          ) {\n            this.cqlFilters[layerId] = cqlFilterForCurrentLayer;\n          }\n\n          // Publish the event\n          this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n        });\n      });\n  }\n\n  update = (e) => {\n    // If view is still animating, postpone updating Anchor\n    e.target.getAnimating() === false &&\n      this.localObserver.publish(\"mapUpdated\", this.getAnchor());\n  };\n\n  getMap() {\n    return this.map;\n  }\n\n  getVisibleLayers() {\n    return this.map\n      .getLayers()\n      .getArray()\n      .filter((layer) => {\n        return (\n          // We consider a layer to be visible only if…\n          layer.getVisible() && // …it's visible…\n          layer.getProperties().name &&\n          isValidLayerId(layer.getProperties().name) // …has a specified name property…\n        );\n      })\n      .map((layer) => layer.getProperties().name)\n      .join(\",\");\n  }\n\n  getAnchor() {\n    // Read some \"optional\" values so we have them prepared.\n    // If some conditions aren't met, we won't add them to the\n    // anchor string, in order to keep the string short.\n    const q = document.getElementById(\"searchInputField\")?.value.trim() || \"\";\n    const f = this.cqlFilters;\n    const clean = this.getCleanUrl();\n\n    // Split current URL on the \"?\" and just get the first part. This\n    // way we'll get rid of any unwanted search params, without messing\n    // up the remaining portion of URL (protocol, host, path, hash).\n    const url = new URL(document.location.href.split(\"?\")[0]);\n\n    // The following params are always appended\n    url.searchParams.append(\"m\", this.app.config.activeMap);\n    url.searchParams.append(\"x\", this.map.getView().getCenter()[0]);\n    url.searchParams.append(\"y\", this.map.getView().getCenter()[1]);\n    url.searchParams.append(\"z\", this.map.getView().getZoom());\n    url.searchParams.append(\"l\", this.getVisibleLayers());\n\n    // Optionally, append those too:\n    // Only add 'clean' if the value is true\n    clean === true && url.searchParams.append(\"clean\", clean);\n    // Only add 'f' if it isn't an empty object\n    Object.keys(f).length > 0 &&\n      url.searchParams.append(\"f\", JSON.stringify(f));\n    // Only add 'q' if it isn't empty\n    q.length > 0 && url.searchParams.append(\"q\", q);\n\n    return url.toString();\n  }\n}\n\nexport default AnchorModel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { styled } from \"@mui/material/styles\";\nimport { withSnackbar } from \"notistack\";\n\nimport {\n  Box,\n  Button,\n  FormControlLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  TextField,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\n\nimport FileCopyIcon from \"@mui/icons-material/FileCopy\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nconst StyledTextField = styled(TextField)(({ theme }) => ({\n  marginBottom: theme.spacing(2),\n  \"& input\": {\n    fontFamily: \"monospace\",\n  },\n}));\n\nclass AnchorView extends React.PureComponent {\n  static propTypes = {\n    cleanUrl: PropTypes.bool.isRequired,\n    closeSnackbar: PropTypes.func.isRequired,\n    enqueueSnackbar: PropTypes.func.isRequired,\n    localObserver: PropTypes.object.isRequired,\n    model: PropTypes.object.isRequired,\n    toggleCleanUrl: PropTypes.func.isRequired,\n  };\n\n  state = {\n    anchor: this.props.model.getAnchor(),\n  };\n\n  constructor(props) {\n    super(props);\n    this.model = this.props.model;\n    this.localObserver = this.props.localObserver;\n  }\n\n  componentDidMount() {\n    this.localObserver.subscribe(\"mapUpdated\", (anchor) => {\n      this.setState({\n        anchor: anchor,\n      });\n    });\n  }\n\n  handleClickOnCopyToClipboard = (e) => {\n    const input = document.getElementById(\"anchorUrl\");\n    input.select();\n    document.execCommand(\"copy\") &&\n      this.props.enqueueSnackbar(\"Kopiering till urklipp lyckades!\", {\n        variant: \"info\",\n      });\n  };\n\n  render() {\n    const allowCreatingCleanUrls =\n      this.props.options.allowCreatingCleanUrls ?? true;\n    return (\n      <Box sx={{ width: \"100%\" }}>\n        <Grid container item spacing={2} columns={12}>\n          <Grid item xs={12}>\n            <Typography>\n              Skapa en länk med kartans synliga lager, aktuella zoomnivå och\n              utbredning.\n            </Typography>\n          </Grid>\n        </Grid>\n        {allowCreatingCleanUrls && (\n          <Box sx={{ ml: { xs: 0, sm: 3 } }}>\n            <Grid container item spacing={2} columns={12}>\n              <Grid item xs={12}>\n                <RadioGroup\n                  aria-label=\"copy-url\"\n                  name=\"copy-url\"\n                  onChange={this.props.toggleCleanUrl}\n                >\n                  <FormControlLabel\n                    checked={!this.props.cleanUrl}\n                    value=\"default\"\n                    control={<Radio color=\"primary\" />}\n                    label=\"Skapa länk till karta\"\n                  />\n                  <FormControlLabel\n                    checked={this.props.cleanUrl}\n                    value=\"clean\"\n                    control={<Radio color=\"primary\" />}\n                    label=\"Skapa länk till karta utan verktyg etc.\"\n                  />\n                </RadioGroup>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n        <Box sx={{ ml: { xs: 0, sm: 7 }, mr: { xs: 0, sm: 7 } }}>\n          <Grid container item spacing={2} columns={12}>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth={true}\n                id=\"anchorUrl\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                value={this.state.anchor}\n                variant=\"outlined\"\n                size=\"small\"\n              />\n            </Grid>\n          </Grid>\n        </Box>\n        {document.queryCommandSupported(\"copy\") && (\n          <Box sx={{ ml: { xs: 0, sm: 7 }, mr: { xs: 0, sm: 7 } }}>\n            <Grid container spacing={2} columns={12}>\n              <Grid item xs={6}>\n                <Tooltip title=\"Kopiera länk till urklipp\">\n                  <Button\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    component=\"a\"\n                    endIcon={<FileCopyIcon />}\n                    onClick={this.handleClickOnCopyToClipboard}\n                  >\n                    Kopiera länk\n                  </Button>\n                </Tooltip>\n              </Grid>\n              <Grid item xs={6}>\n                <Tooltip title=\"Öppna länk i nytt fönster\">\n                  <Button\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    endIcon={<OpenInNewIcon />}\n                    href={this.state.anchor}\n                    target=\"_blank\"\n                  >\n                    Öppna länk\n                  </Button>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n      </Box>\n    );\n  }\n}\n\nexport default withSnackbar(AnchorView);\n","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { isMobile } from \"./../utils/IsMobile\";\nimport { createPortal } from \"react-dom\";\nimport { Hidden, ListItem, ListItemIcon, ListItemText } from \"@mui/material\";\nimport Window from \"../components/Window.js\";\nimport Card from \"../components/Card.js\";\nimport PluginControlButton from \"../components/PluginControlButton\";\n\nclass BaseWindowPlugin extends React.PureComponent {\n  static propTypes = {\n    app: propTypes.object.isRequired,\n    children: propTypes.object.isRequired,\n    custom: propTypes.object.isRequired,\n    map: propTypes.object.isRequired,\n    options: propTypes.object.isRequired,\n    type: propTypes.string.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    // 'type' is basically a unique identifier for each plugin\n    this.type = props.type.toLowerCase() || undefined;\n\n    // There will be defaults in props.custom, so that each plugin has own default title/description\n    this.description = props.options.description || props.custom.description;\n\n    // Should Window be visible at start?\n    const visibleAtStart =\n      (this.props.app.config.mapConfig.map.clean === false && // Never show in clean mode\n        (isMobile\n          ? props.options.visibleAtStartMobile\n          : props.options.visibleAtStart)) ||\n      false;\n\n    // If plugin is shown at start, we want to register it as shown in the Analytics module too.\n    // Normally, the event would be sent when user clicks on the button that activates the plugin,\n    // but in this case there won't be any click as the window will be visible at start.\n    if (visibleAtStart) {\n      this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n        eventName: \"pluginShown\",\n        pluginName: this.type,\n        activeMap: this.props.app.config.activeMap,\n      });\n    }\n\n    // Title and Color are kept in state and not as class properties. Keeping them in state\n    // ensures re-render when new props arrive and update the state variables (see componentDidUpdate() too).\n    this.state = {\n      title: props.options.title || props.custom.title || \"Unnamed plugin\",\n      color: props.options.color || props.custom.color || null,\n      windowVisible: visibleAtStart,\n    };\n\n    // Title is a special case: we want to use the state.title and pass on to Window in order\n    // to update Window's title dynamically. At the same time, we want all other occurrences,\n    // e.g. Widget or Drawer button's label to remain the same.\n    this.title = props.options.title || props.custom.title || \"Unnamed plugin\";\n\n    // Try to get values from admin's option. Fallback to customs from Plugin defaults, or finally to hard-coded values.\n    this.width = props.options.width || props.custom.width || 400;\n    this.height = props.options.height || props.custom.height || \"auto\";\n    this.position = props.options.position || props.custom.position || \"left\";\n\n    // Register Window in our global register\n    props.app.registerWindowPlugin(this);\n\n    // Subscribe to a global event that makes it possible to show/hide Windows.\n    // First we prepare a unique event name for each plugin so it looks like '{pluginName}.showWindow'.\n    const eventName = `${this.type}.showWindow`;\n    // Next, subscribe to that event, expect 'opts' array.\n    // To find all places where this event is publish, search for 'globalObserver.publish(\"show'\n    props.app.globalObserver.subscribe(eventName, (opts) => {\n      this.showWindow(opts);\n    });\n\n    // Same as above, but to close the window.\n    const closeEventName = `${this.type}.closeWindow`;\n\n    props.app.globalObserver.subscribe(closeEventName, () => {\n      this.closeWindow();\n    });\n  }\n\n  // Does not run on initial render, but runs on subsequential re-renders.\n  componentDidUpdate(prevProps) {\n    // Window's title and color can be updated on-the-flight, so we keep them\n    // in state and ensure that state is updated when new props arrive.\n    prevProps.custom.title !== this.props.custom.title &&\n      this.setState({ title: this.props.custom.title });\n\n    prevProps.custom.color !== this.props.custom.color &&\n      this.setState({ color: this.props.custom.color });\n  }\n\n  pluginIsWidget(target) {\n    return [\"left\", \"right\"].includes(target);\n  }\n\n  handleButtonClick = (e) => {\n    this.showWindow({\n      hideOtherPluginWindows: true,\n      runCallback: true,\n    });\n    this.props.app.globalObserver.publish(\"core.onlyHideDrawerIfNeeded\");\n  };\n\n  showWindow = (opts) => {\n    const hideOtherPluginWindows = opts.hideOtherPluginWindows || true,\n      runCallback = opts.runCallback || true;\n\n    // Let the App know which tool is currently active\n    this.props.app.activeTool = this.type;\n\n    // Tell the Analytics model about this\n    this.props.app.globalObserver.publish(\"analytics.trackEvent\", {\n      eventName: \"pluginShown\",\n      pluginName: this.type,\n      activeMap: this.props.app.config.activeMap,\n    });\n\n    // Don't continue if visibility hasn't changed\n    if (this.state.windowVisible === true) {\n      return null;\n    }\n\n    hideOtherPluginWindows === true && this.props.app.onWindowOpen(this);\n\n    this.setState(\n      {\n        windowVisible: true,\n      },\n      () => {\n        // If there's a callback defined in custom, run it\n        runCallback === true &&\n          typeof this.props.custom.onWindowShow === \"function\" &&\n          this.props.custom.onWindowShow();\n      }\n    );\n  };\n\n  closeWindow = () => {\n    // If closeWindow was initiated by the tool that is currently\n    // active, we should unset the activeTool property\n    if (this.type === this.props.app.activeTool)\n      this.props.app.activeTool = undefined;\n\n    this.setState(\n      {\n        windowVisible: false,\n      },\n      () => {\n        typeof this.props.custom.onWindowHide === \"function\" &&\n          this.props.custom.onWindowHide();\n      }\n    );\n  };\n  /**\n   * @summary Render the plugin and its buttons according to settings in admin.\n   * @description See comments in code to follow the rendering logic.\n   * @param {*} custom\n   * @returns {object} React.Component\n   * @memberof BaseWindowPlugin\n   */\n  renderWindow(custom) {\n    const { target } = this.props.options;\n    // BaseWindowPlugin, which calls this method, will supply an object.\n    // If that object contains a render() function, we want to call it\n    // and bypass any other functionality from this method.\n    return typeof custom?.render === \"function\" ? (\n      custom.render()\n    ) : (\n      // If there was not custom render method, we do \"normal\" rendering.\n      // That includes rendering the plugin Window itself, as well as a\n      // button (that will trigger opening of the plugin Window).\n      <>\n        <Window\n          globalObserver={this.props.app.globalObserver}\n          title={this.state.title}\n          color={this.state.color}\n          onClose={this.closeWindow}\n          open={this.state.windowVisible}\n          onResize={this.props.custom.onResize}\n          onMaximize={this.props.custom.onMaximize}\n          onMinimize={this.props.custom.onMinimize}\n          draggingEnabled={this.props.custom.draggingEnabled}\n          customPanelHeaderButtons={this.props.custom.customPanelHeaderButtons}\n          resizingEnabled={this.props.custom.resizingEnabled}\n          scrollable={this.props.custom.scrollable}\n          allowMaximizedWindow={this.props.custom.allowMaximizedWindow}\n          disablePadding={this.props.custom.disablePadding}\n          width={this.width}\n          height={this.height}\n          position={this.position}\n          mode=\"window\"\n          layerswitcherConfig={this.props.app.config.mapConfig.tools.find(\n            (t) => t.type === \"layerswitcher\"\n          )}\n        >\n          {/* We have to pass windowVisible down to the children so that we can conditionally render\n          the <Tabs /> component, since it does not accept components with display: \"none\". We use the\n          windowVisible-prop to make sure that we don't render the <Tabs /> when the window\n          is not visible.*/}\n          {React.cloneElement(this.props.children, {\n            windowVisible: this.state.windowVisible,\n          })}\n        </Window>\n        {/* Drawer buttons and Widget buttons should render a Drawer button. */}\n        {(target === \"toolbar\" || this.pluginIsWidget(target)) &&\n          this.renderDrawerButton()}\n        {/* Widget buttons must also render a Widget */}\n        {this.pluginIsWidget(target) &&\n          this.renderWidgetButton(`${target}-column`)}\n        {/* Finally, render a Control button if target has that value */}\n        {target === \"control\" && this.renderControlButton()}\n      </>\n    );\n  }\n\n  /**\n   * This is a bit of a special case. This method will render\n   * not only plugins specified as Drawer plugins (target===toolbar),\n   * but it will also render Widget plugins - given some special condition.\n   *\n   * Those special conditions are small screens, where there's no screen\n   * estate to render the Widget button in Map Overlay.\n   */\n  renderDrawerButton() {\n    return createPortal(\n      <Hidden mdUp={this.pluginIsWidget(this.props.options.target)}>\n        <ListItem\n          button\n          divider={true}\n          selected={this.state.windowVisible}\n          onClick={this.handleButtonClick}\n        >\n          <ListItemIcon>{this.props.custom.icon}</ListItemIcon>\n          <ListItemText primary={this.title} />\n        </ListItem>\n      </Hidden>,\n      document.getElementById(\"plugin-buttons\")\n    );\n  }\n\n  renderWidgetButton(id) {\n    return createPortal(\n      // Hide Widget button on small screens, see renderDrawerButton too\n      <Hidden mdDown>\n        <Card\n          icon={this.props.custom.icon}\n          onClick={this.handleButtonClick}\n          title={this.title}\n          abstract={this.description}\n        />\n      </Hidden>,\n      document.getElementById(id)\n    );\n  }\n\n  renderControlButton() {\n    return createPortal(\n      <PluginControlButton\n        icon={this.props.custom.icon}\n        onClick={this.handleButtonClick}\n        title={this.title}\n        abstract={this.description}\n      />,\n      document.getElementById(\"plugin-control-buttons\")\n    );\n  }\n\n  render() {\n    // Don't render if \"clean\" query param is specified, otherwise go on\n    return (\n      this.props.app.config.mapConfig.map.clean !== true &&\n      this.renderWindow(this.props.custom)\n    );\n  }\n}\n\nexport default BaseWindowPlugin;\n"],"names":["StyledCard","styled","MUICard","theme","marginBottom","spacing","width","breakpoints","down","boxShadow","borderBottom","borderRadius","margin","justifyContent","StyledAvatar","Avatar","background","palette","text","primary","Card","state","open","this","props","abstract","icon","onClick","title","avatar","subheader","React","defaultProps","Anchor","cleanUrl","getCleanUrl","toggleCleanUrl","setState","d","localObserver","publish","anchorModel","getAnchor","options","app","Observer","AnchorModel","map","type","custom","description","height","top","undefined","left","model","settings","update","e","target","getAnimating","cqlFilters","getView","on","globalObserver","subscribe","getLayers","getArray","forEach","layer","layerId","get","event","getSource","getParams","cqlFilterForCurrentLayer","CQL_FILTER","filter","getVisible","getProperties","name","isValidLayerId","join","q","document","getElementById","value","trim","f","clean","url","URL","location","href","split","searchParams","append","config","activeMap","getCenter","getZoom","getVisibleLayers","Object","keys","length","JSON","stringify","toString","StyledTextField","TextField","fontFamily","AnchorView","anchor","handleClickOnCopyToClipboard","select","execCommand","enqueueSnackbar","variant","allowCreatingCleanUrls","sx","container","item","columns","xs","ml","sm","onChange","checked","control","color","label","mr","fullWidth","id","InputProps","readOnly","size","queryCommandSupported","component","endIcon","withSnackbar","BaseWindowPlugin","handleButtonClick","showWindow","hideOtherPluginWindows","runCallback","opts","activeTool","eventName","pluginName","windowVisible","onWindowOpen","onWindowShow","closeWindow","onWindowHide","toLowerCase","visibleAtStart","mapConfig","isMobile","visibleAtStartMobile","position","registerWindowPlugin","closeEventName","prevProps","includes","render","onClose","onResize","onMaximize","onMinimize","draggingEnabled","customPanelHeaderButtons","resizingEnabled","scrollable","allowMaximizedWindow","disablePadding","mode","layerswitcherConfig","tools","find","t","children","pluginIsWidget","renderDrawerButton","renderWidgetButton","renderControlButton","createPortal","mdUp","button","divider","selected","mdDown","renderWindow"],"sourceRoot":""}
{"version":3,"file":"static/js/541.bca28651.chunk.js","mappings":"uLAAqBA,GAAAA,EAAAA,EAAAA,IACnB,WAAYC,GAAgB,IAAD,4BAI3BC,eAAiB,SAACC,GAChB,MAAsD,EAAKF,cAAnDG,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,gBAEnBC,EAFJ,EAAwCC,UAER,IAAM,KACtC,OAAIF,IAAoBD,EACf,IAAII,OAAJ,YAAgBL,EAAhB,KAAiCG,IAGrCD,GAAmBD,EACf,IAAII,OAAJ,WAAeL,EAAf,MAAiCG,GAGtCD,GAAmBD,EACd,IAAII,OAAJ,UAAcL,GAAgBG,GAEhC,IAAIE,OAAJ,WAAeL,EAAf,KAAgCG,EACxC,EApB0B,KAsB3BG,mBAAqB,SAACC,GACpB,OAAOA,EAAOC,QAAQ,4BAA6B,OACpD,EAxB0B,KA0B3BC,QAAU,SAACT,EAAcU,GACvB,IAAMC,EAAa,EAAKL,mBAAmBN,GAG3C,OAFc,EAAKD,eAAeY,GAAYC,KAAKF,EAGpD,EA9BCG,KAAKf,cAAgBA,CACtB,G","sources":["plugins/DocumentHandler/documentSearch/MatchSearch.js"],"sourcesContent":["export default class MatchSearch {\n  constructor(searchOptions) {\n    this.searchOptions = searchOptions;\n  }\n\n  getMatchRegexp = (searchString) => {\n    const { wildcardAtEnd, wildcardAtStart, matchCase } = this.searchOptions;\n\n    let regexpOptions = matchCase ? \"g\" : \"gi\";\n    if (wildcardAtStart && !wildcardAtEnd) {\n      return new RegExp(`.*${searchString}$`, regexpOptions);\n    }\n\n    if (!wildcardAtStart && wildcardAtEnd) {\n      return new RegExp(`^${searchString}.*`, regexpOptions);\n    }\n\n    if (wildcardAtStart && wildcardAtEnd) {\n      return new RegExp(`${searchString}`, regexpOptions);\n    }\n    return new RegExp(`^${searchString}$`, regexpOptions);\n  };\n\n  escapeSpecialChars = (string) => {\n    return string.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n  };\n\n  compare = (searchString, searchword) => {\n    const toSearchIn = this.escapeSpecialChars(searchString);\n    const match = this.getMatchRegexp(toSearchIn).test(searchword);\n\n    return match;\n  };\n}\n"],"names":["MatchSearch","searchOptions","getMatchRegexp","searchString","wildcardAtEnd","wildcardAtStart","regexpOptions","matchCase","RegExp","escapeSpecialChars","string","replace","compare","searchword","toSearchIn","test","this"],"sourceRoot":""}
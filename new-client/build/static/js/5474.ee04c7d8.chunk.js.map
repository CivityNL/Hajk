{"version":3,"file":"static/js/5474.ee04c7d8.chunk.js","mappings":"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","sources":["plugins/Sketch/components/DrawTypeSelector.js","plugins/Sketch/components/FeatureTextSetter.js","plugins/Sketch/components/Information.js","plugins/Sketch/components/SelectFeaturesDialog.js","plugins/Sketch/components/featureStyle/FeatureStyleAccordion.js","plugins/Sketch/components/featureStyle/FeatureStyleSelector.js","plugins/Sketch/components/featureStyle/StrokeTypeSelector.js","plugins/Sketch/constants/index.js","plugins/Sketch/views/AddView.js","../node_modules/@mui/icons-material/FormatShapes.js","../node_modules/@mui/icons-material/ImportExport.js","../node_modules/@mui/icons-material/OpenWith.js","../node_modules/@mui/icons-material/Save.js"],"sourcesContent":["import React from \"react\";\nimport { TextField, MenuItem, Tooltip } from \"@mui/material\";\nimport { DRAW_TYPES } from \"../constants\";\n\nconst DrawTypeSelector = (props) => {\n  return (\n    <TextField\n      fullWidth\n      id=\"select-draw-type\"\n      variant=\"outlined\"\n      size=\"small\"\n      select\n      value={props.activeDrawType}\n      onChange={(e) => props.setActiveDrawType(e.target.value)}\n    >\n      {DRAW_TYPES.map((option) => (\n        <MenuItem key={option.type} value={option.type}>\n          {\n            <Tooltip disableInteractive title={option.tooltip}>\n              <span style={{ width: \"100%\" }}>{option.label}</span>\n            </Tooltip>\n          }\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nexport default DrawTypeSelector;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport Dialog from \"../../../components/Dialog/Dialog\";\n\n// This component has a couple of responsibilities:\n// - 1) Subscribe to text-feature-creation\n// - 2) Prompt the user with a modal containing a text-input-field\n// - 3) Applied the text from the modal to the supplied feature.\nconst FeatureTextSetter = ({ drawModel, localObserver }) => {\n  // We're gonna need to keep track of if we've been supplied with a feature\n  // that we are supposed to apply text to.\n  const [feature, setFeature] = React.useState(null);\n\n  // We are going to need a handler for when the event on the observer fires.\n  const handleFeatureCreated = React.useCallback((addedFeature) => {\n    // We're only interested in features with the type \"Text\"\n    if (addedFeature.get(\"DRAW_METHOD\") === \"Text\") {\n      setFeature(addedFeature);\n    }\n  }, []);\n\n  // We are also going to need a handler for when the user closes the dialog\n  const handleCloseClick = React.useCallback(\n    (textFieldValue) => {\n      // If the user did not write any text, we remove the feature from\n      // the draw-source. (Since we don't want text-features without text).\n      if (textFieldValue.length === 0) {\n        drawModel.removeFeature(feature);\n      } else {\n        feature.set(\"USER_TEXT\", textFieldValue);\n        drawModel.refreshFeaturesTextStyle();\n      }\n      setFeature(null);\n    },\n    [drawModel, feature]\n  );\n\n  // If the user aborts, we make sure to remove the feature from the source\n  const handleAbortClick = React.useCallback(() => {\n    drawModel.removeFeature(feature);\n    setFeature(null);\n  }, [drawModel, feature]);\n\n  // Let's add an effect where we can subscribe to the addFeature-event\n  React.useEffect(() => {\n    localObserver.subscribe(\"drawModel.featureAdded\", handleFeatureCreated);\n    return () => {\n      localObserver.unsubscribe(\"drawModel.featureAdded\");\n    };\n  }, [drawModel, localObserver, handleFeatureCreated]);\n\n  return feature !== null\n    ? createPortal(\n        <Dialog\n          options={{\n            text: \"\",\n            prompt: true,\n            headerText: \"Ange text\",\n            buttonText: \"Ok\",\n            abortText: \"Avbryt\",\n          }}\n          open={feature !== null}\n          onClose={handleCloseClick}\n          onAbort={handleAbortClick}\n        />,\n        document.getElementById(\"map\")\n      )\n    : null;\n};\n\nexport default FeatureTextSetter;\n","import React from \"react\";\nimport { Paper, Typography } from \"@mui/material\";\n\n// A simple component showing the supplied text in a wrapper\nconst Information = ({ text }) => {\n  return (\n    <Paper style={{ width: \"100%\", padding: 8 }}>\n      <Typography align=\"center\" variant=\"body2\">\n        {text}\n      </Typography>\n    </Paper>\n  );\n};\n\nexport default Information;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nexport default function SelectFeaturesDialog({\n  localObserver,\n  drawModel,\n  model,\n}) {\n  // Let's keep everything in one state here since all properties are\n  // changing at the same time (almost).\n  const [state, setState] = React.useState({\n    clickedFeatures: [],\n    selectedFeatureIndexes: [],\n    highlightedFeature: null,\n  });\n\n  // Resets the state back to init.\n  const resetState = React.useCallback(() => {\n    setState({\n      clickedFeatures: [],\n      selectedFeatureIndexes: [],\n      highlightedFeature: null,\n    });\n  }, []);\n\n  // Handles map-click-event from drawModel and updates the clickedFeatures\n  // with the payload.\n  const handleDrawSelectClick = React.useCallback((clickedFeatures) => {\n    setState((state) => ({ ...state, clickedFeatures }));\n  }, []);\n\n  // Handles selection of features in the dialog-list. If the feature-index is already\n  // selected, we remove it, otherwise we add it to the selection.\n  const handleFeatureSelectChange = (featureIndex) => {\n    // Create the new selected feature-indexes...\n    const newSelectedFeatureIndexes =\n      state.selectedFeatureIndexes.indexOf(featureIndex) !== -1\n        ? state.selectedFeatureIndexes.filter((i) => i !== featureIndex)\n        : [...state.selectedFeatureIndexes, featureIndex];\n    // ...and update the state\n    setState((state) => ({\n      ...state,\n      selectedFeatureIndexes: newSelectedFeatureIndexes,\n    }));\n  };\n\n  // Handles dialog abort, resets the state so that the dialog can close.\n  const handleAbort = () => {\n    // We have to remove the eventual highlighted feature when aborting...\n    state.highlightedFeature &&\n      drawModel.removeFeature(state.highlightedFeature);\n    // ...and reset the state.\n    resetState();\n  };\n\n  // Handles confirmation from the dialog. Let's the drawModel add the feature,\n  // and then the state is reset so that the dialog is closed.\n  const handleConfirm = () => {\n    state.selectedFeatureIndexes.map((index) => {\n      return drawModel.drawSelectedFeature(state.clickedFeatures[index]);\n    });\n    resetState();\n  };\n\n  // Handler for mouse-enter on list of clicked features. Creates a new\n  // feature (which is used to show where the clicked feature is in the map).\n  const handleMouseEnter = (index) => {\n    // Let's get the clicked feature we're currently hoovering.\n    const hoveredFeature = state.clickedFeatures[index];\n    // Then we can create a corresponding highlight-feature.\n    const highlightFeature = model.createHighlightFeature(hoveredFeature);\n    // We'll add the highlight-feature to the draw-layer...\n    drawModel.addFeature(highlightFeature, { silent: true });\n    // ...and update the state so that we can keep track of what we are highlighting.\n    setState({\n      ...state,\n      highlightedFeature: highlightFeature,\n    });\n  };\n\n  // Handler for mouse-leave on the list of clicked features. Removes the currently\n  // highlighted feature from the draw-layer.\n  const handleMouseLeave = () => {\n    state.highlightedFeature &&\n      drawModel.removeFeature(state.highlightedFeature);\n  };\n\n  // An effect that handles subscriptions (and un-subscriptions) to the observer-\n  // event fired from the drawModel when the user has clicked a feature with the\n  // \"select feature from map\"-tool active. The event will only be fired if there\n  // is more than one feature present at the location on which the user clicked.\n  // (If there's zero or one, the drawModel will take care of it).\n  React.useEffect(() => {\n    localObserver.subscribe(\"drawModel.select.click\", handleDrawSelectClick);\n    return () => {\n      localObserver.unsubscribe(\"drawModel.select.click\");\n    };\n  }, [localObserver, handleDrawSelectClick]);\n\n  return createPortal(\n    <Dialog\n      open={state.clickedFeatures.length > 1}\n      onClose={handleAbort}\n      // Must stop event-bubbling. Otherwise the parent element in react can be dragged etc.\n      onMouseDown={(e) => {\n        e.stopPropagation();\n      }}\n    >\n      <DialogTitle>Välj de objekt du vill kopiera</DialogTitle>\n      <DialogContent>\n        <List sx={{ width: \"100%\", maxHeight: \"30vh\" }}>\n          {state.clickedFeatures.map((feature, index) => (\n            <ListItem\n              disableGutters\n              key={index}\n              onMouseEnter={() => handleMouseEnter(index)}\n              onMouseLeave={() => handleMouseLeave(index)}\n            >\n              <ListItemButton\n                onClick={() => handleFeatureSelectChange(index)}\n                dense\n              >\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={state.selectedFeatureIndexes.indexOf(index) !== -1}\n                    tabIndex={-1}\n                    disableRipple\n                  />\n                </ListItemIcon>\n                <ListItemText primary={feature.getId()} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          disabled={state.selectedFeatureIndexes.length === 0}\n          onClick={handleConfirm}\n        >\n          OK\n        </Button>\n        <Button onClick={handleAbort}>Avbryt</Button>\n      </DialogActions>\n    </Dialog>,\n    document.getElementById(\"map\")\n  );\n}\n","import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport { TwitterPicker } from \"react-color\";\n\nimport { Box, Grid, Typography, Tooltip } from \"@mui/material\";\nimport { Paper, Slider } from \"@mui/material\";\n\nimport { Accordion, AccordionDetails, AccordionSummary } from \"@mui/material\";\n\nimport { DRAW_COLORS } from \"../../constants\";\nimport StrokeTypeSelector from \"./StrokeTypeSelector\";\n\nconst StyledAccordionSummary = styled(AccordionSummary)(() => ({\n  minHeight: 35,\n  \"&.MuiAccordionSummary-root.Mui-expanded\": {\n    minHeight: 35,\n  },\n  \"& .MuiAccordionSummary-content\": {\n    transition: \"inherit !important\",\n    marginTop: 0,\n    marginBottom: 0,\n    \"&.Mui-expanded\": {\n      marginTop: 0,\n      marginBottom: 0,\n    },\n  },\n}));\n\n// We want to be able to display the current color. Let's create\n// a color-badge component.\nconst ColorBadge = ({ color }) => {\n  return (\n    <Box\n      style={{\n        height: \"1.1rem\",\n        width: \"1.1rem\",\n        backgroundColor: color,\n        borderRadius: \"10%\",\n        marginLeft: 4,\n        border: color.toLowerCase() === \"#ffffff\" ? \"1px solid black\" : null,\n      }}\n    />\n  );\n};\n\n// We want to be able to change the opacity of the fill color. Let's\n// create a slider that can be used to change the value.\nconst OpacitySlider = ({ opacity, handleOpacityChange }) => {\n  return (\n    <Grid item xs={12}>\n      <Paper style={{ padding: 8, marginTop: 8 }}>\n        <Typography variant=\"caption\">{`Opacitet: ${Math.floor(\n          opacity * 100\n        )}%`}</Typography>\n        <Slider\n          size=\"small\"\n          min={0}\n          max={1}\n          value={opacity}\n          step={0.01}\n          onChange={handleOpacityChange}\n          valueLabelFormat={(value) => `${Math.floor(value * 100)}%`}\n          valueLabelDisplay=\"auto\"\n        />\n      </Paper>\n    </Grid>\n  );\n};\n\n// We want to be able to change the opacity of the fill color. Let's\n// create a slider that can be used to change the value.\nconst StrokeWidthSlider = ({ strokeWidth, handleStrokeWidthChange }) => {\n  return (\n    <Grid item xs={12}>\n      <Paper style={{ padding: 8, marginTop: 8 }}>\n        <Typography variant=\"caption\">{`Linjebredd: ${strokeWidth}px`}</Typography>\n        <Slider\n          size=\"small\"\n          min={1}\n          max={5}\n          value={strokeWidth}\n          step={0.5}\n          onChange={handleStrokeWidthChange}\n          valueLabelFormat={(value) => `${value}`}\n          valueLabelDisplay=\"auto\"\n        />\n      </Paper>\n    </Grid>\n  );\n};\n\nconst AccordionSummaryContents = (props) => {\n  // We need to get the string-representation of the supplied color-object\n  // to be used in the color badge... (If it not already a string).\n  const colorString =\n    typeof props.color === \"string\"\n      ? props.color\n      : props.drawModel.getRGBAString(props.color);\n  // Then we'll render everything!\n  return (\n    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n      <Typography variant=\"button\">{props.title}</Typography>\n      <Grid container item xs={4} justifyContent=\"flex-end\" alignItems=\"center\">\n        {props.showOpacitySlider && (\n          <Typography variant=\"caption\">{`${\n            typeof props.color === \"string\"\n              ? 100\n              : Math.floor(props.color?.a * 100 || 100)\n          }%`}</Typography>\n        )}\n        {typeof props.strokeWidth === \"number\" && (\n          <Typography variant=\"caption\">{`${props.strokeWidth}px`}</Typography>\n        )}\n        <ColorBadge color={colorString} />\n      </Grid>\n    </Grid>\n  );\n};\n\n// The draw-style-accordion includes a summary showing the current draw-style-settings.\n// It also includes tools to update the current style.\nconst FeatureStyleAccordion = (props) => {\n  return (\n    <Accordion size=\"small\" style={{ marginBottom: 8 }}>\n      <Tooltip\n        disableInteractive\n        title={`Klicka här för att ändra ${props.title.toLowerCase()}.`}\n      >\n        <StyledAccordionSummary>\n          <AccordionSummaryContents\n            title={props.title}\n            color={props.color}\n            showOpacitySlider={props.showOpacitySlider}\n            strokeWidth={props.strokeWidth}\n            drawModel={props.drawModel}\n          />\n        </StyledAccordionSummary>\n      </Tooltip>\n      <AccordionDetails style={{ maxWidth: \"100%\" }}>\n        <Grid container>\n          <Grid item xs={12}>\n            <TwitterPicker\n              colors={DRAW_COLORS}\n              triangle=\"hide\"\n              onChange={props.handleColorChange}\n              styles={{\n                default: {\n                  card: {\n                    maxWidth: \"100%\",\n                    background: \"unset\", // Hard-coded to white, we don't want that.\n                  },\n                },\n              }}\n              color={props.color}\n            />\n          </Grid>\n          {props.showOpacitySlider && (\n            <OpacitySlider\n              handleOpacityChange={props.handleOpacityChange}\n              opacity={isNaN(props.color?.a) ? 1 : props.color.a}\n            />\n          )}\n          {props.showStrokeWidthSlider && (\n            <StrokeWidthSlider\n              handleStrokeWidthChange={props.handleStrokeWidthChange}\n              strokeWidth={props.strokeWidth}\n            />\n          )}\n          {props.showStrokeTypeSelector && (\n            <Grid item xs={12} style={{ marginTop: 8 }}>\n              <StrokeTypeSelector\n                handleStrokeTypeChange={props.handleStrokeTypeChange}\n                strokeType={props.strokeType}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default FeatureStyleAccordion;\n","import React from \"react\";\nimport { Grid, Typography, TextField } from \"@mui/material\";\nimport { STROKE_DASHES } from \"plugins/Sketch/constants\";\n\nimport FeatureStyleAccordion from \"./FeatureStyleAccordion\";\nimport StrokeTypeSelector from \"./StrokeTypeSelector\";\n\nexport default function FeatureStyleSelector(props) {\n  // We need a handler that can update the stroke-dash setting\n  const handleStrokeTypeChange = (e) => {\n    // We are storing both the stroke-type (e.g. \"dashed\", \"dotted\", or \"solid\") as well as\n    // the actual line-dash array which corresponds to the stroke-type.\n    // The stroke-type comes from the select-event\n    const strokeType = e.target.value;\n    // And corresponds to a line-dash from the constants\n    const lineDash = STROKE_DASHES.get(strokeType);\n    // When everything we need is fetched, we update the draw-style.\n    props.setDrawStyle({\n      ...props.drawStyle,\n      strokeType: strokeType,\n      lineDash: lineDash,\n    });\n  };\n\n  // We need a handler that can update the text-size setting\n  const handleTextSizeChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      size: parseInt(e.target.value),\n    });\n  };\n\n  // We need a handler that can update the stroke color\n  const handleStrokeColorChange = (e) => {\n    props.setDrawStyle({ ...props.drawStyle, strokeColor: e.rgb });\n  };\n\n  // We need a handler that can update the fill color\n  const handleFillColorChange = (e) => {\n    props.setDrawStyle({\n      ...props.drawStyle,\n      fillColor: { ...e.rgb, a: props.drawStyle.fillColor.a },\n    });\n  };\n\n  // We need a handler that can update the opacity value\n  const handleOpacityChange = (e, value) => {\n    props.setDrawStyle({\n      ...props.drawStyle,\n      fillColor: { ...props.drawStyle.fillColor, a: value },\n    });\n  };\n\n  // We need a handler that can update the strokeWidth value\n  const handleStrokeWidthChange = (e, value) => {\n    props.setDrawStyle({ ...props.drawStyle, strokeWidth: value });\n  };\n\n  // We need a handler that can update the text-foreground-color change\n  const handleForegroundColorChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      foregroundColor: e.hex,\n    });\n  };\n\n  // We need a handler that can update the text-background-color change\n  const handleBackgroundColorChange = (e) => {\n    props.setTextStyle({\n      ...props.textStyle,\n      backgroundColor: e.hex,\n    });\n  };\n\n  const renderStrokeTypeSelector = () => {\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Variant</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <StrokeTypeSelector\n            handleStrokeTypeChange={handleStrokeTypeChange}\n            strokeType={props.drawStyle.strokeType}\n            includeContainer={false}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderTextSizeSelector = () => {\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Textstorlek</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            variant=\"outlined\"\n            type=\"number\"\n            size=\"small\"\n            fullWidth\n            value={props.textStyle.size}\n            onChange={handleTextSizeChange}\n          ></TextField>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style settings for area-drawings!\n  const renderFillStyleSettings = () => {\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Fyllnad\"\n            showOpacitySlider\n            color={props.drawStyle.fillColor}\n            handleColorChange={handleFillColorChange}\n            handleOpacityChange={handleOpacityChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Linje\"\n            showStrokeWidthSlider\n            color={props.drawStyle.strokeColor}\n            strokeWidth={props.drawStyle.strokeWidth}\n            handleColorChange={handleStrokeColorChange}\n            handleStrokeWidthChange={handleStrokeWidthChange}\n            drawModel={props.drawModel}\n            showStrokeTypeSelector\n            handleStrokeTypeChange={handleStrokeTypeChange}\n            strokeType={props.drawStyle.strokeType}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style settings for text-drawings!\n  const renderTextStyleSettings = () => {\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Färg - förgrund\"\n            color={props.textStyle.foregroundColor}\n            handleColorChange={handleForegroundColorChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <FeatureStyleAccordion\n            title=\"Färg - bakgrund\"\n            color={props.textStyle.backgroundColor}\n            handleColorChange={handleBackgroundColorChange}\n            drawModel={props.drawModel}\n          />\n        </Grid>\n      </Grid>\n    );\n  };\n\n  // The style-settings for arrows! We are not showing a stroke-width-slider\n  // when creating arrows, since they should have a standard width.\n  const renderArrowStyleSettings = () => {\n    return (\n      <FeatureStyleAccordion\n        title=\"Färg\"\n        color={props.drawStyle.strokeColor}\n        handleColorChange={handleStrokeColorChange}\n        drawModel={props.drawModel}\n      />\n    );\n  };\n\n  // The style settings for line-drawings!\n  // Why are we grid-ing these? Cause we're gonna be implementing more settings.\n  const renderLineStyleSettings = () => {\n    return (\n      <FeatureStyleAccordion\n        title=\"Bredd och färg\"\n        showStrokeWidthSlider\n        color={props.drawStyle.strokeColor}\n        strokeWidth={props.drawStyle.strokeWidth}\n        handleColorChange={handleStrokeColorChange}\n        handleStrokeWidthChange={handleStrokeWidthChange}\n        drawModel={props.drawModel}\n      />\n    );\n  };\n\n  // We want to display different settings depending on what the user is drawing!\n  // Let's check and render the appropriate settings.\n  const renderColorSelectors = () => {\n    switch (props.activeDrawType) {\n      case \"Arrow\":\n        return renderArrowStyleSettings();\n      case \"LineString\":\n        return renderLineStyleSettings();\n      case \"Text\":\n        return renderTextStyleSettings();\n      default:\n        return renderFillStyleSettings();\n    }\n  };\n\n  const renderCircleRadiusSelector = () => {\n    if (props.isEdit) {\n      return null;\n    }\n    return (\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Radie (m)</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            variant=\"outlined\"\n            type=\"number\"\n            size=\"small\"\n            fullWidth\n            defaultValue={props.drawModel.getCircleRadius()}\n            onChange={(e) => {\n              props.drawModel.setCircleRadius(e.target.value);\n            }}\n          ></TextField>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <Grid container>\n      {props.activeDrawType === \"LineString\" && renderStrokeTypeSelector()}\n      {props.activeDrawType === \"Text\" && renderTextSizeSelector()}\n      {props.activeDrawType === \"Circle\" && renderCircleRadiusSelector()}\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Utseende</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          {renderColorSelectors()}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport { Grid, MenuItem, Paper } from \"@mui/material\";\nimport { TextField, Tooltip, Typography } from \"@mui/material\";\nimport { STROKE_TYPES } from \"../../constants\";\n\nconst StrokeTypeSelector = (props) => {\n  return (\n    <Paper\n      style={{ padding: props.includeContainer !== false ? 8 : 0 }}\n      elevation={props.includeContainer !== false ? 3 : 0}\n    >\n      <Grid container>\n        {props.includeContainer !== false ? (\n          <Grid item xs={12}>\n            <Typography variant=\"caption\">Linjetyp</Typography>\n          </Grid>\n        ) : null}\n        <TextField\n          fullWidth\n          id=\"select-stroke-type\"\n          variant=\"outlined\"\n          size=\"small\"\n          select\n          value={props.strokeType}\n          onChange={props.handleStrokeTypeChange}\n        >\n          {STROKE_TYPES.map((option) => (\n            <MenuItem key={option.type} value={option.type}>\n              {\n                <Tooltip disableInteractive title={option.tooltip}>\n                  <span style={{ width: \"100%\" }}>{option.label}</span>\n                </Tooltip>\n              }\n            </MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default StrokeTypeSelector;\n","import EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FormatShapesIcon from \"@mui/icons-material/FormatShapes\";\nimport OpenWithIcon from \"@mui/icons-material/OpenWith\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport ImportExportIcon from \"@mui/icons-material/ImportExport\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\n\nexport const ACTIVITIES = [\n  {\n    id: \"ADD\",\n    tooltip: \"Lägg till nya objekt.\",\n    information:\n      \"Lägg till objekt genom att rita i kartan. Börja med att välja vilken typ av objekt du vill rita nedan.\",\n    icon: <EditIcon />,\n  },\n  {\n    id: \"EDIT\",\n    tooltip: \"Redigera existerande objekt.\",\n    information:\n      \"Redigera objekt du ritat tidigare genom att flytta noder, eller ändra färg.\",\n    icon: <FormatShapesIcon />,\n  },\n  {\n    id: \"MOVE\",\n    tooltip: \"Flytta existerande objekt.\",\n    information:\n      'Klicka på det objekt i kartan som du vill flytta för att aktivera \"flytt-läge\". Dra sedan objektet till rätt plats.',\n    icon: <OpenWithIcon />,\n  },\n  {\n    id: \"DELETE\",\n    tooltip: \"Ta bort objekt.\",\n    information:\n      \"Klicka på det rit-objekt som du vill ta bort, eller klicka på knappen nedan för att ta bort alla rit-objekt.\",\n    icon: <DeleteIcon />,\n  },\n  {\n    id: \"SAVE\",\n    tooltip: \"Spara ritade objekt.\",\n    information:\n      \"Behöver du ta en paus? Spara det du har ritat och fortsätt senare. Tänk på att enbart de objekt som syns i kartan sparas.\",\n    icon: <SaveIcon />,\n  },\n  {\n    id: \"UPLOAD\",\n    tooltip: \"Ladda ned eller ladda upp ritade objekt.\",\n    information:\n      \"Importera eller exportera ritobjekt i .kml-format. Använd knapparna nedan, eller dra in en .KML-fil direkt till kartan.\",\n    icon: <ImportExportIcon />,\n  },\n  {\n    id: \"SETTINGS\",\n    tooltip: \"Ändra om objektens mått ska synas etc.\",\n    information: \"Här kan du ändra verktygets inställningar.\",\n    icon: <SettingsIcon />,\n  },\n];\n\nexport const DRAW_COLORS = [\n  \"#FF6900\",\n  \"#FCB900\",\n  \"#7BDCB5\",\n  \"#00D084\",\n  \"#8ED1FC\",\n  \"#0693E3\",\n  \"#ABB8C3\",\n  \"#EB144C\",\n  \"#F78DA7\",\n  \"#9900EF\",\n  \"#354FAD\",\n];\n\nexport const DRAW_TYPES = [\n  {\n    type: \"Circle\",\n    label: \"Cirkel\",\n    tooltip:\n      \"Rita en cikel i kartan genom att klicka en gång där cikeln ska börja, dra sedan till önskad storlek och släpp.\",\n  },\n  {\n    type: \"LineString\",\n    label: \"Linje\",\n    tooltip:\n      \"Rita en linje i kartan genom att klicka en gång per nod, avlsuta med ett dubbelklick.\",\n  },\n  {\n    type: \"Rectangle\",\n    label: \"Rektangel\",\n    tooltip:\n      \"Rita en rektangel i kartan genom att klicka en gång där rektangeln ska börja, dra sedan till önskad storlek och släpp.\",\n  },\n  {\n    type: \"Arrow\",\n    label: \"Pil\",\n    tooltip:\n      \"Rita en pil i kartan genom att klicka en gång per nod, avlsuta med ett dubbelklick.\",\n  },\n  {\n    type: \"Select\",\n    label: \"Välj i kartan\",\n    tooltip:\n      \"Klicka på ett existerande objekt i kartan och kopiera in det i ritlagret.\",\n  },\n  {\n    type: \"Polygon\",\n    label: \"Polygon\",\n    tooltip:\n      \"Rita en polygon i kartan genom att klicka en gång per nod, avlsuta med ett dubbelklick.\",\n  },\n  {\n    type: \"Point\",\n    label: \"Punkt\",\n    tooltip:\n      \"Infoga en punkt i kartan genom att klicka där du vill ha punkten.\",\n  },\n  {\n    type: \"Text\",\n    label: \"Text\",\n    tooltip: \"Infoga text i kartan genom att klicka där du vill ha texten.\",\n  },\n];\n\nexport const MAX_REMOVED_FEATURES = 4;\nexport const PLUGIN_MARGIN = 10;\n\nexport const STROKE_TYPES = [\n  {\n    type: \"solid\",\n    label: \"Heldragen\",\n    tooltip: \"Heldragen linje.\",\n  },\n  {\n    type: \"dotted\",\n    label: \"Punktad\",\n    tooltip: \"Punktad linje.\",\n  },\n  {\n    type: \"dashed\",\n    label: \"Streckad\",\n    tooltip: \"Streckad linje.\",\n  },\n];\n\nexport const STROKE_DASHES = new Map([\n  [\"solid\", null],\n  [\"dotted\", [2, 7]],\n  [\"dashed\", [12, 7]],\n]);\n\n// A constant stating how many sketches we're allowed to save in local-storage.\nexport const MAX_SKETCHES = 3;\n\nexport const DEFAULT_MEASUREMENT_SETTINGS = {\n  showText: false,\n  showArea: false,\n  showLength: false,\n  showPerimeter: false,\n  areaUnit: \"AUTO\",\n  lengthUnit: \"AUTO\",\n  precision: 0,\n};\n\nexport const STORAGE_KEY = \"sketch\";\n\n// How many characters we allow the user to save in LS.\nexport const MAX_LS_CHARS = 1e6;\n\nexport const PROMPT_TEXTS = {\n  saveOverflow: \"Objekten kunde inte sparas. Arbetsytan för många objekt.\",\n  saveNoFeatures: \"Kunde inte skapa arbetsyta, inga ritobjekt hittades.\",\n  saveSuccess: \"Arbetsytan sparades utan problem.\",\n  CircleHelp:\n    \"Du kan skapa en cirkel genom att klicka med en bestämd radie, eller dra för att få en önskad radie.\",\n  LineStringHelp:\n    \"Skapa linjer genom att klicka på en position för varje nod, avsluta med dubbelklick.\",\n  RectangleHelp:\n    \"Skapa en rektangel genom att hålla vänsterklick med musen och dra över en yta för att få en önskad storlek.\",\n  ArrowHelp:\n    \"En pil skapas genom att klicka på en position för varje nod, avsluta med dubbelklick.\",\n  SelectHelp:\n    \"Klicka på ett existerande objekt i kartan och kopiera in det i ritlagret.\",\n  PolygonHelp:\n    \"Skapa en polygon genom att klicka på en position för varje nod, avsluta med dubbelklick.\",\n  PointHelp: \"Klicka på en position för att infoga en punkt.\",\n  TextHelp: \"Klicka på en position för att infoga text.\",\n  EDITHelp: \"Klicka på ett objekt för att redigera dess utseende.\",\n  MOVEHelp: \"Klicka på ett objekt för att förflytta det.\",\n  DELETEHelp: \"Klicka på ett objekt för att radera det från din skiss.\",\n  SAVEHelp:\n    \"Här kan du spara en arbetsyta för att fortsätta ditt arbete senare. För att spara över en äldre arbetsyta, ange samma namn.\",\n};\n\nexport const AREA_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisk\" },\n  { type: \"M2\", name: \"Kvadratmeter (m²)\" },\n  { type: \"KM2\", name: \"Kvadratkilometer (km²)\" },\n  { type: \"HECTARE\", name: \"Hektar (ha)\" },\n];\n\nexport const LENGTH_MEASUREMENT_UNITS = [\n  { type: \"AUTO\", name: \"Automatisk\" },\n  { type: \"M\", name: \"Meter (m)\" },\n  { type: \"KM\", name: \"Kilometer (km)\" },\n];\n\nexport const MEASUREMENT_PRECISIONS = [\n  { value: 0, name: \"0 decimaler\" },\n  { value: 1, name: \"1 decimal\" },\n  { value: 2, name: \"2 decimaler\" },\n  { value: 3, name: \"3 decimaler\" },\n];\n\nexport const DEFAULT_DRAW_STYLE_SETTINGS = {\n  strokeColor: { r: 10, g: 10, b: 10, a: 1 },\n  fillColor: { r: 60, g: 60, b: 60, a: 0.3 },\n  strokeType: \"solid\",\n  strokeWidth: 1,\n};\n\nexport const DEFAULT_TEXT_STYLE_SETTINGS = {\n  foregroundColor: \"#FFFFFF\",\n  backgroundColor: \"#000000\",\n  size: 14,\n};\n","import React from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\n\nimport DrawTypeSelector from \"../components/DrawTypeSelector\";\nimport Information from \"../components/Information\";\nimport FeatureStyleSelector from \"../components/featureStyle/FeatureStyleSelector\";\nimport FeatureTextSetter from \"../components/FeatureTextSetter\";\nimport SelectFeaturesDialog from \"../components/SelectFeaturesDialog\";\n\nconst AddView = (props) => {\n  // Let's destruct some properties from the props\n  const { model, activeDrawType, setActiveDrawType, localObserver, drawModel } =\n    props;\n  // We have to get some information about the current activity (view)\n  const activity = model.getActivityFromId(props.id);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Information text={activity.information} />\n      </Grid>\n      <Grid item xs={12} style={{ marginTop: 16 }}>\n        <Grid item xs={12} style={{ marginBottom: 4 }}>\n          <Typography align=\"center\">Typ</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <DrawTypeSelector\n            activeDrawType={activeDrawType}\n            setActiveDrawType={setActiveDrawType}\n          />\n        </Grid>\n      </Grid>\n      <FeatureStyleSelector\n        activeDrawType={activeDrawType}\n        drawStyle={props.drawStyle}\n        drawModel={props.drawModel}\n        setDrawStyle={props.setDrawStyle}\n        textStyle={props.textStyle}\n        setTextStyle={props.setTextStyle}\n      />\n      <FeatureTextSetter\n        localObserver={props.localObserver}\n        drawModel={props.drawModel}\n      />\n      <SelectFeaturesDialog\n        localObserver={localObserver}\n        drawModel={drawModel}\n        model={model}\n      />\n    </Grid>\n  );\n};\n\nexport default AddView;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M23 7V1h-6v2H7V1H1v6h2v10H1v6h6v-2h10v2h6v-6h-2V7h2zM3 3h2v2H3V3zm2 18H3v-2h2v2zm12-2H7v-2H5V7h2V5h10v2h2v10h-2v2zm4 2h-2v-2h2v2zM19 5V3h2v2h-2zm-5.27 9h-3.49l-.73 2H7.89l3.4-9h1.4l3.41 9h-1.63l-.74-2zm-3.04-1.26h2.61L12 8.91l-1.31 3.83z\"\n}), 'FormatShapes');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z\"\n}), 'OpenWith');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');\n\nexports.default = _default;"],"names":["props","fullWidth","id","variant","size","select","value","activeDrawType","onChange","e","setActiveDrawType","target","DRAW_TYPES","option","type","disableInteractive","title","tooltip","style","width","label","drawModel","localObserver","React","feature","setFeature","handleFeatureCreated","addedFeature","get","handleCloseClick","textFieldValue","length","removeFeature","set","refreshFeaturesTextStyle","handleAbortClick","subscribe","unsubscribe","createPortal","options","text","prompt","headerText","buttonText","abortText","open","onClose","onAbort","document","getElementById","padding","align","SelectFeaturesDialog","model","clickedFeatures","selectedFeatureIndexes","highlightedFeature","state","setState","resetState","handleDrawSelectClick","handleAbort","onMouseDown","stopPropagation","sx","maxHeight","map","index","disableGutters","onMouseEnter","hoveredFeature","highlightFeature","createHighlightFeature","addFeature","silent","handleMouseEnter","onMouseLeave","onClick","featureIndex","newSelectedFeatureIndexes","indexOf","filter","i","handleFeatureSelectChange","dense","edge","checked","tabIndex","disableRipple","primary","getId","disabled","drawSelectedFeature","StyledAccordionSummary","styled","AccordionSummary","minHeight","transition","marginTop","marginBottom","ColorBadge","color","height","backgroundColor","borderRadius","marginLeft","border","toLowerCase","OpacitySlider","opacity","handleOpacityChange","item","xs","Math","floor","min","max","step","valueLabelFormat","valueLabelDisplay","StrokeWidthSlider","strokeWidth","handleStrokeWidthChange","AccordionSummaryContents","colorString","getRGBAString","container","justifyContent","alignItems","showOpacitySlider","a","maxWidth","colors","DRAW_COLORS","triangle","handleColorChange","styles","default","card","background","isNaN","showStrokeWidthSlider","showStrokeTypeSelector","handleStrokeTypeChange","strokeType","FeatureStyleSelector","lineDash","STROKE_DASHES","setDrawStyle","drawStyle","handleTextSizeChange","setTextStyle","textStyle","parseInt","handleStrokeColorChange","strokeColor","rgb","handleFillColorChange","fillColor","handleForegroundColorChange","foregroundColor","hex","handleBackgroundColorChange","includeContainer","isEdit","defaultValue","getCircleRadius","setCircleRadius","renderColorSelectors","elevation","STROKE_TYPES","ACTIVITIES","information","icon","MAX_REMOVED_FEATURES","PLUGIN_MARGIN","Map","MAX_SKETCHES","DEFAULT_MEASUREMENT_SETTINGS","showText","showArea","showLength","showPerimeter","areaUnit","lengthUnit","precision","STORAGE_KEY","MAX_LS_CHARS","PROMPT_TEXTS","saveOverflow","saveNoFeatures","saveSuccess","CircleHelp","LineStringHelp","RectangleHelp","ArrowHelp","SelectHelp","PolygonHelp","PointHelp","TextHelp","EDITHelp","MOVEHelp","DELETEHelp","SAVEHelp","AREA_MEASUREMENT_UNITS","name","LENGTH_MEASUREMENT_UNITS","MEASUREMENT_PRECISIONS","DEFAULT_DRAW_STYLE_SETTINGS","r","g","b","DEFAULT_TEXT_STYLE_SETTINGS","activity","getActivityFromId","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d"],"sourceRoot":""}
{"version":3,"file":"static/js/2670.8c78d654.chunk.js","mappings":"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","sources":["../node_modules/ol/Overlay.js"],"sourcesContent":["/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {containsExtent} from './extent.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {outerHeight, outerWidth, removeChildren, removeNode} from './dom.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning',\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst =\n      options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className =\n      options.className !== undefined\n        ? options.className\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true,\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */ (\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(\n        map,\n        MapEventType.POSTRENDER,\n        this.render,\n        this\n      );\n      this.updatePixelPosition();\n      const container = this.stopEvent\n        ? map.getOverlayContainerStopEvent()\n        : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [\n      outerWidth(element),\n      outerHeight(element),\n    ]);\n\n    panIntoViewOptions = panIntoViewOptions || {};\n\n    const myMargin =\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n          map.getView().getCenterInternal()\n        );\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (\n      positioning == 'bottom-right' ||\n      positioning == 'center-right' ||\n      positioning == 'top-right'\n    ) {\n      posX = '-100%';\n    } else if (\n      positioning == 'bottom-center' ||\n      positioning == 'center-center' ||\n      positioning == 'top-center'\n    ) {\n      posX = '-50%';\n    }\n    if (\n      positioning == 'bottom-left' ||\n      positioning == 'bottom-center' ||\n      positioning == 'bottom-right'\n    ) {\n      posY = '-100%';\n    } else if (\n      positioning == 'center-left' ||\n      positioning == 'center-center' ||\n      positioning == 'center-right'\n    ) {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\nexport default Overlay;\n"],"names":["Property","Overlay","options","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","CLASS_SELECTABLE","style","position","pointerEvents","autoPan","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","setPosition","this","get","removeChildren","getElement","appendChild","removeNode","unlistenByKey","map","getMap","listen","MapEventType","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","panIntoView","panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","outerWidth","outerHeight","myMargin","margin","containsExtent","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animation","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","display","getPosition","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","setVisible","getOffset","getPositioning","x","round","y","posX","posY","transform","BaseObject"],"sourceRoot":""}
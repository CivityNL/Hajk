{"version":3,"file":"static/js/2130.82325dfb.chunk.js","mappings":"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","sources":["plugins/LayerSwitcher/components/VectorFilter.js"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { Vector as VectorLayer } from \"ol/layer\";\nimport { hfetch } from \"utils/FetchWrapper\";\n\nconst StyledFormControl = styled(FormControl)(({ theme }) => ({\n  margin: theme.spacing(1),\n  minWidth: 120,\n}));\n\nconst StyledTypography = styled(Typography)(({ theme }) => ({\n  fontWeight: 500,\n}));\n\nclass VectorFilter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterAttribute: props.layer.get(\"filterAttribute\") || \"\",\n      filterValue: props.layer.get(\"filterValue\") || \"\",\n      filterComparer: props.layer.get(\"filterComparer\") || \"\",\n      layerProperties: [],\n    };\n    this.loadFeatureInfo();\n  }\n\n  /**\n   * @summary Prepare entries for dropdown, will contain possible values for filterAttribute.\n   *\n   * @memberof VectorFilter\n   */\n  loadFeatureInfo = () => {\n    const { url, featureType } = this.props.layer.getProperties();\n    hfetch(\n      url +\n        `?service=WFS&request=describeFeatureType&outputFormat=application/json&typename=${featureType}`\n    ).then((response) => {\n      response.json().then((featureInfo) => {\n        const featureTypeInfo = featureInfo.featureTypes.find(\n          (type) => type.typeName === featureType\n        );\n        if (featureTypeInfo && Array.isArray(featureTypeInfo.properties)) {\n          const layerProperties = featureTypeInfo.properties\n            .filter((property) => property.type !== \"gml:Geometry\")\n            .map((property) => property.name);\n          this.setState({\n            layerProperties,\n          });\n        }\n      });\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  /**\n   * @summary Reads filter options from state, applies them on layer and refreshes the source.\n   *\n   * @memberof VectorFilter\n   */\n  setFilter = (e) => {\n    this.props.layer.set(\"filterAttribute\", this.state.filterAttribute);\n    this.props.layer.set(\"filterComparer\", this.state.filterComparer);\n    this.props.layer.set(\"filterValue\", this.state.filterValue);\n\n    this.props.layer.getSource().refresh();\n  };\n\n  /**\n   * @ Resets the UI to no filter and reloads the source\n   *\n   * @memberof VectorFilter\n   */\n  resetFilter = (e) => {\n    // Reset the UI\n    this.setState({\n      filterAttribute: \"\",\n      filterValue: \"\",\n      filterComparer: \"\",\n    });\n\n    // Reset filter options on layer\n    this.props.layer.set(\"filterAttribute\", \"\");\n    this.props.layer.set(\"filterComparer\", \"\");\n    this.props.layer.set(\"filterValue\", \"\");\n\n    // Refresh source\n    this.props.layer.getSource().refresh();\n  };\n\n  render() {\n    const { layer } = this.props;\n    if (layer instanceof VectorLayer) {\n      return (\n        <>\n          <StyledTypography variant=\"subtitle2\">\n            Filtrera innehåll baserat på attribut\n          </StyledTypography>\n          <StyledFormControl>\n            <InputLabel htmlFor=\"attribute\">Attribut</InputLabel>\n            <Select\n              value={this.state.filterAttribute}\n              onChange={this.handleChange}\n              inputProps={{\n                name: \"filterAttribute\",\n                id: \"attribute\",\n              }}\n            >\n              {this.state.layerProperties.map((property, i) => {\n                return (\n                  <MenuItem key={i} value={property}>\n                    {property}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </StyledFormControl>\n          <StyledFormControl>\n            <InputLabel htmlFor=\"comparer\">Jämförare</InputLabel>\n            <Select\n              value={this.state.filterComparer}\n              onChange={this.handleChange}\n              inputProps={{\n                name: \"filterComparer\",\n                id: \"comparer\",\n              }}\n            >\n              <MenuItem value=\"gt\">Större än</MenuItem>\n              <MenuItem value=\"lt\">Mindre än</MenuItem>\n              <MenuItem value=\"eq\">Lika med</MenuItem>\n              <MenuItem value=\"not\">Skilt från</MenuItem>\n            </Select>\n          </StyledFormControl>\n          <StyledFormControl>\n            <Input\n              value={this.state.filterValue}\n              onChange={this.handleChange}\n              placeholder=\"Filtervärde\"\n              inputProps={{\n                name: \"filterValue\",\n                \"aria-label\": \"Värde\",\n              }}\n            />\n          </StyledFormControl>\n\n          <Button variant=\"contained\" color=\"primary\" onClick={this.setFilter}>\n            Aktivera\n          </Button>\n          <Button onClick={this.resetFilter}>Återställ</Button>\n        </>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default VectorFilter;\n"],"names":["StyledFormControl","styled","FormControl","margin","theme","spacing","minWidth","StyledTypography","Typography","fontWeight","VectorFilter","props","loadFeatureInfo","layer","getProperties","url","featureType","hfetch","then","response","json","featureInfo","featureTypeInfo","featureTypes","find","type","typeName","Array","isArray","properties","layerProperties","filter","property","map","name","setState","handleChange","e","target","value","setFilter","set","state","filterAttribute","filterComparer","filterValue","getSource","refresh","resetFilter","get","this","VectorLayer","variant","htmlFor","onChange","inputProps","id","i","placeholder","color","onClick","React"],"sourceRoot":""}
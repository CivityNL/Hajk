{"version":3,"file":"static/js/5959.7d0e06fb.chunk.js","mappings":"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","sources":["plugins/LayerComparer/CustomOLControl.js","plugins/LayerComparer/LayerComparer.js","plugins/LayerComparer/SelectDropdown.js","../node_modules/@mui/icons-material/Compare.js"],"sourcesContent":["import Control from \"ol/control/Control\";\nimport { getRenderPixel } from \"ol/render\";\nimport \"./index.css\";\n\nexport default class OlSideBySideControl extends Control {\n  #container = null;\n  #divider = null;\n  #range = null;\n\n  constructor() {\n    const container = document.createElement(\"div\");\n\n    const divider = document.createElement(\"div\");\n    divider.className = \"ol-side-by-side-divider\";\n\n    const range = document.createElement(\"input\");\n    range.type = \"range\";\n    range.min = 0;\n    range.max = 1;\n    range.step = \"any\";\n    range.value = 0.5;\n    range.className = \"ol-side-by-side-range\";\n\n    super({\n      element: container,\n    });\n\n    this.#container = container;\n    this.#divider = divider;\n    this.#range = range;\n  }\n\n  #addEvents() {\n    this.#range.addEventListener(\"input\", () => {\n      this.updateClip();\n    });\n  }\n\n  updateClip() {\n    this.#divider.style.left = this.#getPosition() + \"px\";\n    this.getMap().render();\n  }\n\n  #getPosition() {\n    const rangeValue = this.#range.value;\n    const offset = (0.5 - rangeValue) * (2 * 0 + 42);\n    const size = this.getMap().getSize();\n    return size[0] * Number(rangeValue) + offset;\n  }\n\n  #prerenderLeft = (event) => {\n    const ctx = event.context;\n    const mapSize = this.getMap().getSize();\n    const width = this.#getPosition();\n\n    const tl = getRenderPixel(event, [0, 0]);\n    const tr = getRenderPixel(event, [width, 0]);\n    const bl = getRenderPixel(event, [width, mapSize[1]]);\n    const br = getRenderPixel(event, [0, mapSize[1]]);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(tl[0], tl[1]);\n    ctx.lineTo(tr[0], tr[1]);\n    ctx.lineTo(bl[0], bl[1]);\n    ctx.lineTo(br[0], br[1]);\n    ctx.closePath();\n    ctx.clip();\n  };\n\n  #prerenderRight = (event) => {\n    const ctx = event.context;\n    const mapSize = this.getMap().getSize();\n    const width = this.#getPosition();\n\n    const tl = getRenderPixel(event, [width, 0]);\n    const tr = getRenderPixel(event, [mapSize[0], 0]);\n    const bl = getRenderPixel(event, mapSize);\n    const br = getRenderPixel(event, [width, mapSize[1]]);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(tl[0], tl[1]);\n    ctx.lineTo(tr[0], tr[1]);\n    ctx.lineTo(bl[0], bl[1]);\n    ctx.lineTo(br[0], br[1]);\n    ctx.closePath();\n    ctx.clip();\n  };\n\n  #postrender(event) {\n    const ctx = event.context;\n    ctx.restore();\n  }\n\n  #unsetLayers = () => {\n    // Grab previous compare layer and hide them\n    this.getMap()\n      .getLayers()\n      .getArray()\n      .filter(\n        (l) =>\n          l.get(\"isLeftCompareLayer\") === true ||\n          l.get(\"isRightCompareLayer\") === true\n      )\n      .forEach((l) => {\n        l.set(\"visible\", false, true);\n        if (l.get(\"isLeftCompareLayer\") === true) {\n          l.set(\"isLeftCompareLayer\", false);\n          l.un(\"prerender\", this.#prerenderLeft);\n        } else {\n          l.set(\"isRightCompareLayer\", false);\n          l.un(\"prerender\", this.#prerenderRight);\n        }\n        l.un(\"postrender\", this.#postrender);\n      });\n  };\n\n  setCompareLayers(leftLayer, rightLayer) {\n    // Unset possible previous compare layers\n    this.#unsetLayers();\n\n    // Set visibility, silently (don't trigger a map render at this time)\n    leftLayer.set(\"visible\", true, true);\n\n    // Set a unique flag - used later\n    leftLayer.set(\"isLeftCompareLayer\", true);\n\n    // Add the render event handler that will split the screen in two\n    leftLayer.on(\"prerender\", this.#prerenderLeft);\n    leftLayer.on(\"postrender\", this.#postrender);\n\n    // Do the same for the other side of the screen\n    rightLayer.set(\"visible\", true, true);\n    rightLayer.set(\"isRightCompareLayer\", true);\n    rightLayer.on(\"prerender\", this.#prerenderRight);\n    rightLayer.on(\"postrender\", this.#postrender);\n  }\n\n  remove() {\n    // Hide previous compare layers and remove custom render handlers\n    this.#unsetLayers();\n\n    // Remove the DIV. Do it in a try/catch, else the DOM will throw\n    // an error if element can't be found.\n    try {\n      this.#container.removeChild(this.#divider);\n      this.#container.removeChild(this.#range);\n    } catch (error) {}\n  }\n\n  open() {\n    this.#container.appendChild(this.#divider);\n    this.#container.appendChild(this.#range);\n    this.#addEvents();\n  }\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Alert, Button, Stack } from \"@mui/material\";\nimport DialogWindowPlugin from \"plugins/DialogWindowPlugin\";\nimport CompareIcon from \"@mui/icons-material/Compare\";\nimport { useSnackbar } from \"notistack\";\n\nimport SelectDropdown from \"./SelectDropdown.js\";\nimport SDSControl from \"./CustomOLControl.js\";\n\nconst LayerComparer = (props) => {\n  const [layer1, setLayer1] = useState(\"\");\n  const [layer2, setLayer2] = useState(\"\");\n\n  const [layers, setLayers] = useState([]);\n  const [baseLayers, setBaseLayers] = useState([]);\n\n  // Prepare a ref that will hold our map control\n  const sds = useRef();\n\n  // Prepare a ref that will hold the ID of the original\n  // background layer. This makes it possible to restore\n  // to the same background when user closes the comparer.\n  const oldBackgroundLayer = useRef();\n\n  // When compare mode is active, we want to show a snackbar that\n  // allows user to simply disable the comparer.\n  const { closeSnackbar, enqueueSnackbar } = useSnackbar();\n  // We don't want to prompt the user with more than one snack, so lets track the current one,\n  // so that we can close it when another one is about to open.\n  const helperSnack = React.useRef(null);\n\n  // Prepare layers that will be available in the comparer.\n  // By doing it in this useEffect, we do it once and for all,\n  // which is a good idea, as such filter/map can be considered\n  // an expensive operation.\n  useEffect(() => {\n    const allLayers = props.map.getAllLayers();\n    const baseLayers = allLayers\n      .filter((l) => l.get(\"layerType\") === \"base\")\n      .map((l) => {\n        return { id: l.ol_uid, label: l.get(\"caption\") };\n      });\n\n    if (props.options.showNonBaseLayersInSelect) {\n      const layers = allLayers\n        .filter((l) => [\"layer\", \"group\"].includes(l.get(\"layerType\")))\n        .map((l) => {\n          return { id: l.ol_uid, label: l.get(\"caption\") };\n        });\n      setLayers(layers);\n    }\n\n    setBaseLayers(baseLayers);\n  }, [props.map, props.options.showNonBaseLayersInSelect]);\n\n  // Create a new SDSControl, add to a ref and add the ref to our map.\n  useEffect(() => {\n    sds.current = new SDSControl();\n    props.map.addControl(sds.current);\n  }, [props.map]);\n\n  // When Hajk Drawer is toggled the map's view (canvas's) size\n  // changes too. We must update the clipper's position accordingly.\n  useEffect(() => {\n    props.app.globalObserver.on(\"core.drawerToggled\", () => {\n      sds.current.updateClip();\n    });\n  }, [props.app.globalObserver]);\n\n  // The main action happens in this useEffect. When both compare layers\n  // are set we initialize the comparer control and make it visible.\n  // If both compare layers are empty, we do the contrary and remove the control\n  // and restore the original background layer.\n  useEffect(() => {\n    if (layer1 === \"\" || layer2 === \"\") {\n      // Show previous background\n      oldBackgroundLayer.current?.setVisible(true);\n\n      // Remove the slider as soon as one of the compare layers is not selected\n      sds.current.remove();\n\n      // Close the snackbar\n      closeSnackbar(helperSnack.current);\n    } else {\n      const l1 = props.map.getAllLayers().find((l) => l.ol_uid === layer1);\n      const l2 = props.map.getAllLayers().find((l) => l.ol_uid === layer2);\n\n      // Hide old background layers\n      oldBackgroundLayer.current = props.map\n        .getAllLayers()\n        .find((l) => l.getVisible() === true && l.get(\"layerType\") === \"base\");\n      oldBackgroundLayer.current?.setVisible(false);\n\n      sds.current.open();\n      sds.current.setCompareLayers(l1, l2);\n\n      // Show the snackbar, but ensure that only one snackbar exists\n      closeSnackbar(helperSnack.current);\n      helperSnack.current = enqueueSnackbar(\n        \"Avsluta jämföringsläget genom att trycka på knappen\",\n        {\n          variant: \"default\",\n          persist: true,\n          anchorOrigin: { vertical: \"bottom\", horizontal: \"center\" },\n          action: (key) => (\n            <Button\n              variant=\"contained\"\n              color=\"error\"\n              onClick={() => {\n                onAbort();\n                closeSnackbar(key);\n              }}\n            >\n              Sluta jämföra\n            </Button>\n          ),\n        }\n      );\n    }\n  }, [layer1, layer2, props.map, closeSnackbar, enqueueSnackbar]);\n\n  // User can at any time abort the comparer, here's a handler\n  // that resets the UI.\n  const onAbort = () => {\n    sds.current.remove();\n    oldBackgroundLayer.current?.setVisible(true);\n    setLayer1(\"\");\n    setLayer2(\"\");\n  };\n\n  return (\n    <DialogWindowPlugin\n      options={props.options} // Supply the unique instance's options…\n      map={props.map} // …but the shared map…\n      app={props.app} // …and app.\n      type=\"LayerComparer\" // Unique name - each plugin needs one. Upper-case first letter, must be valid JS variable name.\n      defaults={{\n        // Some defaults to fall back to in case instanceOptions doesn't provide them.\n        icon: <CompareIcon />, // Default icon for this plugin\n        title: \"Lagerjämförare\",\n        description: \"Jämför lager sida vid sida\", // Shown on Widget button as well as Tooltip for Control button\n        headerText: \"Jämför lager sida vid sida\",\n        buttonText: \"Jämför\",\n        primaryButtonVariant: \"contained\",\n        abortText: \"Nollställ & stäng\",\n        onAbort: onAbort,\n      }}\n    >\n      <Stack spacing={2}>\n        <Alert icon={<CompareIcon />} variant=\"info\">\n          Välj två lager att jämföra och tryck på <i>Jämför</i>.\n        </Alert>\n\n        <SelectDropdown\n          setter={setLayer1}\n          value={layer1}\n          counterValue={layer2}\n          baseLayers={baseLayers}\n          layers={layers}\n          label=\"Vänster sida\"\n        />\n        <SelectDropdown\n          setter={setLayer2}\n          value={layer2}\n          counterValue={layer1}\n          baseLayers={baseLayers}\n          layers={layers}\n          label=\"Höger sida\"\n        />\n      </Stack>\n    </DialogWindowPlugin>\n  );\n};\n\nexport default LayerComparer;\n","import React from \"react\";\n\nimport {\n  Box,\n  FormControl,\n  InputLabel,\n  ListSubheader,\n  Select,\n  MenuItem,\n} from \"@mui/material\";\n\nconst SelectDropdown = (props) => {\n  const { setter, value, counterValue, baseLayers, layers, label } = props;\n\n  const handleChange = (setter, value) => {\n    setter(value);\n  };\n\n  return (\n    <Box sx={{ minWidth: 120 }}>\n      <FormControl fullWidth>\n        <InputLabel id=\"layer-1-label\">{label}</InputLabel>\n        <Select\n          labelId=\"layer-1-label\"\n          id=\"layer-1-select\"\n          label=\"Lager 1\"\n          value={value}\n          onChange={(e) => handleChange(setter, e.target.value)}\n        >\n          <MenuItem value=\"\">Inget lager valt</MenuItem>\n          {baseLayers.length > 0 && layers.length > 0 && (\n            <ListSubheader>Bakgrundslager</ListSubheader>\n          )}\n          {baseLayers.map((l, i) => {\n            return (\n              <MenuItem key={i} value={l.id} disabled={l.id === counterValue}>\n                {l.label}\n              </MenuItem>\n            );\n          })}\n          {baseLayers.length > 0 && layers.length > 0 && (\n            <ListSubheader>Lager</ListSubheader>\n          )}\n          {layers.map((l, i) => {\n            return (\n              <MenuItem key={i} value={l.id}>\n                {l.label}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SelectDropdown;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h5v2h2V1h-2v2zm0 15H5l5-6v6zm9-15h-5v2h5v13l-5-6v9h5c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'Compare');\n\nexports.default = _default;"],"names":["OlSideBySideControl","container","document","createElement","divider","className","range","type","min","max","step","value","element","event","ctx","context","mapSize","getMap","getSize","width","tl","getRenderPixel","tr","bl","br","save","beginPath","moveTo","lineTo","closePath","clip","getLayers","getArray","filter","l","get","forEach","set","un","this","style","left","render","leftLayer","rightLayer","on","removeChild","error","appendChild","Control","addEventListener","updateClip","rangeValue","offset","Number","restore","props","useState","layer1","setLayer1","layer2","setLayer2","layers","setLayers","baseLayers","setBaseLayers","sds","useRef","oldBackgroundLayer","useSnackbar","closeSnackbar","enqueueSnackbar","helperSnack","React","useEffect","allLayers","map","getAllLayers","id","ol_uid","label","options","showNonBaseLayersInSelect","includes","current","SDSControl","addControl","app","globalObserver","setVisible","remove","l1","find","l2","getVisible","open","setCompareLayers","variant","persist","anchorOrigin","vertical","horizontal","action","key","color","onClick","onAbort","defaults","icon","title","description","headerText","buttonText","primaryButtonVariant","abortText","spacing","setter","counterValue","sx","minWidth","fullWidth","labelId","onChange","e","handleChange","target","length","i","disabled","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}